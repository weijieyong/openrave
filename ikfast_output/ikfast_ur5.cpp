/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004c generated on 2024-07-18 16:14:45.119980
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004c);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.03) // 5D IK has some crazy degenerate cases, but can rely on jacobian refinment to make better, just need good starting point
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

template <typename T> struct ComplexLess
{
    bool operator()(const complex<T>& lhs, const complex<T>& rhs) const
    {
        if (real(lhs) < real(rhs)) {
            return true;
        }
        if (real(lhs) > real(rhs)) {
            return false;
        }
        return imag(lhs) < imag(rhs);
    }
};

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[1]);
x4=IKcos(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKcos(j[5]);
x8=IKsin(j[5]);
x9=IKsin(j[0]);
x10=IKsin(j[4]);
x11=IKcos(j[4]);
x12=((1.0)*x11);
x13=((1.0)*x5);
x14=((0.09465)*x9);
x15=((0.39225)*x0);
x16=((0.09465)*x0);
x17=((1.0)*x1);
x18=((0.0823)*x6);
x19=((0.0823)*x5);
x20=((0.39225)*x1);
x21=((1.0)*x6);
x22=((1.0)*x0);
x23=((1.0)*x9);
x24=((0.425)*x3);
x25=(x3*x4);
x26=(x2*x3);
x27=((-1.0)*x10);
x28=(x2*x9);
x29=(x1*x4);
x30=(x11*x9);
x31=(x1*x2);
x32=(x0*x17*x2);
x33=(x17*x28);
x34=(x26+x29);
x35=((((-1.0)*x17*x2))+(((1.0)*x25)));
x36=(x34*x6);
x37=(x35*x5);
x38=((((-1.0)*x32))+((x0*x25)));
x39=((((-1.0)*x33))+((x25*x9)));
x40=((((-1.0)*x0*x17*x4))+(((-1.0)*x22*x26)));
x41=((((-1.0)*x23*x26))+(((-1.0)*x17*x4*x9)));
x42=(((x35*x6))+((x5*(((((-1.0)*x26))+(((-1.0)*x17*x4)))))));
x43=(((x38*x6))+((x40*x5)));
x44=(((x41*x5))+((x39*x6)));
x45=(((x5*(((((-1.0)*x22*x25))+x32))))+((x40*x6)));
x46=(((x41*x6))+((x5*(((((-1.0)*x23*x25))+x33)))));
x47=(x11*x43);
eerot[0]=(((x7*((((x10*x9))+x47))))+((x45*x8)));
eerot[1]=(((x45*x7))+((x8*(((((-1.0)*x47))+((x27*x9)))))));
eerot[2]=(((x10*(((((-1.0)*x21*x38))+(((-1.0)*x13*x40))))))+x30);
eetrans[0]=(((x6*((((x16*x26))+((x16*x29))))))+(((-1.0)*x0*x24))+((x10*(((((-1.0)*x18*x38))+(((-1.0)*x19*x40))))))+(((0.0823)*x30))+((x15*x31))+(((0.10915)*x9))+(((-1.0)*x15*x25))+((x5*(((((-1.0)*x16*x31))+((x16*x25)))))));
eerot[3]=(((x46*x8))+((x7*((((x0*x27))+((x11*x44)))))));
eerot[4]=(((x8*(((((-1.0)*x12*x44))+((x10*x22))))))+((x46*x7)));
eerot[5]=((((-1.0)*x0*x12))+((x10*(((((-1.0)*x13*x41))+(((-1.0)*x21*x39)))))));
eetrans[1]=(((x5*(((((-1.0)*x14*x31))+((x14*x25))))))+((x20*x28))+((x6*((((x14*x29))+((x14*x26))))))+(((-0.0823)*x0*x11))+(((-1.0)*x24*x9))+(((-0.39225)*x25*x9))+((x10*(((((-1.0)*x18*x39))+(((-1.0)*x19*x41))))))+(((-0.10915)*x0)));
eerot[6]=(((x42*x8))+((x11*x7*((x36+x37)))));
eerot[7]=(((x42*x7))+((x11*x8*(((((-1.0)*x37))+(((-1.0)*x36)))))));
eerot[8]=(x10*(((((-1.0)*x13*x35))+(((-1.0)*x21*x34)))));
eetrans[2]=((0.089159)+(((-0.39225)*x26))+(((-1.0)*x20*x4))+((x5*(((((0.09465)*x26))+(((0.09465)*x29))))))+((x10*(((((-1.0)*x19*x35))+(((-1.0)*x18*x34))))))+(((-0.425)*x1))+((x6*(((((-0.09465)*x25))+(((0.09465)*x31)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API const int* GetFreeIndices() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,tj0,j0mul,j1,cj1,sj1,htj1,tj1,j1mul,j2,cj2,sj2,htj2,tj2,j2mul,j3,cj3,sj3,htj3,tj3,j3mul,j4,cj4,sj4,htj4,tj4,j4mul,j5,cj5,sj5,htj5,tj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((-0.0823)*r02))+px);
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((-0.0823)*r12))+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.089159)+(((-0.0823)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x48=((1.0)*py);
IkReal x49=((1.0)*px);
IkReal x50=((1.0)*pz);
pp=((px*px)+(pz*pz)+(py*py));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((py*r11))+((px*r01))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x48))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x50)));
rxp0_2=(((py*r00))+(((-1.0)*r10*x49)));
rxp1_0=((((-1.0)*r21*x48))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x50)));
rxp1_2=(((py*r01))+(((-1.0)*r11*x49)));
rxp2_0=((((-1.0)*r22*x48))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x50)));
rxp2_2=((((-1.0)*r12*x49))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x51=((0.09465)*r20);
IkReal x52=((0.1893)*npx);
IkReal x53=((0.09465)*r21);
IkReal x54=((0.1893)*npy);
IkReal x55=((0.09465)*r02);
IkReal x56=((0.1893)*rxp2_2);
IkReal x57=((0.09465)*r01);
IkReal x58=((0.1893)*rxp1_2);
IkReal x59=((1.0)*pp);
IkReal x60=((2.0)*pz);
IkReal x61=((-0.09465)*r22);
IkReal x62=((-1.0)*r21);
IkReal x63=((-1.0)*npy);
IkReal x64=((-1.0)*r01);
IkReal x65=((-1.0)*rxp1_0);
IkReal x66=((-1.0)*rxp0_2);
IkReal x67=((-1.0)*rxp2_2);
IkReal x68=((-0.09465)*r21);
IkReal x69=((-0.09465)*r00);
IkReal x70=((-0.1893)*rxp0_2);
IkReal x71=((((-1.0)*npy*x60))+(((0.0089586225)*r21))+((pp*r21)));
IkReal x72=((((-1.0)*r20*x59))+(((-0.0089586225)*r20))+((npx*x60)));
IkReal x73=((((-0.0089586225)*r22))+(((-1.0)*r22*x59))+((npz*x60)));
matrixinvcoeffs[0]=x51;
matrixinvcoeffs[1]=x52;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=0;
matrixinvcoeffs[10]=0;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=0;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x51;
matrixinvcoeffs[19]=x52;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=0;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=0;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=0;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x53;
matrixinvcoeffs[33]=x54;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=0;
matrixinvcoeffs[42]=0;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=0;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x53;
matrixinvcoeffs[51]=x54;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=0;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=0;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=0;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=0;
matrixinvcoeffs[73]=x61;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=0;
matrixinvcoeffs[76]=x56;
matrixinvcoeffs[77]=x55;
matrixinvcoeffs[78]=((-0.09465)*r12);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=0;
matrixinvcoeffs[90]=0;
matrixinvcoeffs[91]=x61;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=((0.09465)*r12);
matrixinvcoeffs[94]=x55;
matrixinvcoeffs[95]=x56;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=x62;
matrixinvcoeffs[101]=x63;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=x64;
matrixinvcoeffs[105]=rxp1_2;
matrixinvcoeffs[106]=r11;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x71;
matrixinvcoeffs[109]=x65;
matrixinvcoeffs[110]=rxp1_1;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=x62;
matrixinvcoeffs[119]=x63;
matrixinvcoeffs[120]=((-1.0)*r11);
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=x64;
matrixinvcoeffs[123]=rxp1_2;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=((-1.0)*rxp1_1);
matrixinvcoeffs[126]=x65;
matrixinvcoeffs[127]=x71;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=r20;
matrixinvcoeffs[133]=npx;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=r00;
matrixinvcoeffs[137]=x66;
matrixinvcoeffs[138]=((-1.0)*r10);
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=x72;
matrixinvcoeffs[141]=rxp0_0;
matrixinvcoeffs[142]=((-1.0)*rxp0_1);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=r20;
matrixinvcoeffs[151]=npx;
matrixinvcoeffs[152]=r10;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=r00;
matrixinvcoeffs[155]=x66;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_1;
matrixinvcoeffs[158]=rxp0_0;
matrixinvcoeffs[159]=x72;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=r22;
matrixinvcoeffs[165]=npz;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=r02;
matrixinvcoeffs[169]=x67;
matrixinvcoeffs[170]=((-1.0)*r12);
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=x73;
matrixinvcoeffs[173]=rxp2_0;
matrixinvcoeffs[174]=((-1.0)*rxp2_1);
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=r22;
matrixinvcoeffs[183]=npz;
matrixinvcoeffs[184]=r12;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=r02;
matrixinvcoeffs[187]=x67;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_1;
matrixinvcoeffs[190]=rxp2_0;
matrixinvcoeffs[191]=x73;
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=0;
matrixinvcoeffs[201]=x68;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=0;
matrixinvcoeffs[204]=x58;
matrixinvcoeffs[205]=x57;
matrixinvcoeffs[206]=((-0.09465)*r11);
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=0;
matrixinvcoeffs[218]=0;
matrixinvcoeffs[219]=x68;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=((0.09465)*r11);
matrixinvcoeffs[222]=x57;
matrixinvcoeffs[223]=x58;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=0;
matrixinvcoeffs[233]=x51;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=0;
matrixinvcoeffs[236]=x70;
matrixinvcoeffs[237]=x69;
matrixinvcoeffs[238]=((0.09465)*r10);
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=0;
matrixinvcoeffs[250]=0;
matrixinvcoeffs[251]=x51;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=((-0.09465)*r10);
matrixinvcoeffs[254]=x69;
matrixinvcoeffs[255]=x70;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_4=matrixinvcoeffs[68], gclwh4_5=matrixinvcoeffs[84], gclwh4_6=matrixinvcoeffs[100], gclwh4_7=matrixinvcoeffs[116], gclwh4_8=matrixinvcoeffs[132], gclwh4_9=matrixinvcoeffs[148], gclwh4_10=matrixinvcoeffs[164], gclwh4_11=matrixinvcoeffs[180], gclwh4_12=matrixinvcoeffs[196], gclwh4_13=matrixinvcoeffs[212], gclwh4_14=matrixinvcoeffs[228], gclwh4_15=matrixinvcoeffs[244], gclwh5_4=matrixinvcoeffs[69], gclwh5_5=matrixinvcoeffs[85], gclwh5_6=matrixinvcoeffs[101], gclwh5_7=matrixinvcoeffs[117], gclwh5_8=matrixinvcoeffs[133], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_11=matrixinvcoeffs[181], gclwh5_12=matrixinvcoeffs[197], gclwh5_13=matrixinvcoeffs[213], gclwh5_14=matrixinvcoeffs[229], gclwh5_15=matrixinvcoeffs[245], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_6=matrixinvcoeffs[102], gclwh6_7=matrixinvcoeffs[118], gclwh6_8=matrixinvcoeffs[134], gclwh6_9=matrixinvcoeffs[150], gclwh6_10=matrixinvcoeffs[166], gclwh6_15=matrixinvcoeffs[246], gclwh7_4=matrixinvcoeffs[71], gclwh7_5=matrixinvcoeffs[87], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_8=matrixinvcoeffs[135], gclwh7_9=matrixinvcoeffs[151], gclwh7_10=matrixinvcoeffs[167], gclwh7_15=matrixinvcoeffs[247], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_6=matrixinvcoeffs[104], gclwh8_7=matrixinvcoeffs[120], gclwh8_8=matrixinvcoeffs[136], gclwh8_9=matrixinvcoeffs[152], gclwh8_10=matrixinvcoeffs[168], gclwh9_4=matrixinvcoeffs[73], gclwh9_5=matrixinvcoeffs[89], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_8=matrixinvcoeffs[137], gclwh9_9=matrixinvcoeffs[153], gclwh9_10=matrixinvcoeffs[169], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_6=matrixinvcoeffs[106], gclwh10_7=matrixinvcoeffs[122], gclwh10_8=matrixinvcoeffs[138], gclwh10_9=matrixinvcoeffs[154], gclwh10_10=matrixinvcoeffs[170], gclwh11_4=matrixinvcoeffs[75], gclwh11_5=matrixinvcoeffs[91], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_8=matrixinvcoeffs[139], gclwh11_9=matrixinvcoeffs[155], gclwh11_10=matrixinvcoeffs[171], gclwh12_4=matrixinvcoeffs[76], gclwh12_5=matrixinvcoeffs[92], gclwh12_6=matrixinvcoeffs[108], gclwh12_7=matrixinvcoeffs[124], gclwh12_8=matrixinvcoeffs[140], gclwh12_9=matrixinvcoeffs[156], gclwh12_10=matrixinvcoeffs[172], gclwh12_11=matrixinvcoeffs[188], gclwh12_12=matrixinvcoeffs[204], gclwh12_13=matrixinvcoeffs[220], gclwh12_14=matrixinvcoeffs[236], gclwh12_15=matrixinvcoeffs[252], gclwh13_4=matrixinvcoeffs[77], gclwh13_5=matrixinvcoeffs[93], gclwh13_6=matrixinvcoeffs[109], gclwh13_7=matrixinvcoeffs[125], gclwh13_8=matrixinvcoeffs[141], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_11=matrixinvcoeffs[189], gclwh13_12=matrixinvcoeffs[205], gclwh13_13=matrixinvcoeffs[221], gclwh13_14=matrixinvcoeffs[237], gclwh13_15=matrixinvcoeffs[253], gclwh14_4=matrixinvcoeffs[78], gclwh14_5=matrixinvcoeffs[94], gclwh14_6=matrixinvcoeffs[110], gclwh14_7=matrixinvcoeffs[126], gclwh14_8=matrixinvcoeffs[142], gclwh14_9=matrixinvcoeffs[158], gclwh14_10=matrixinvcoeffs[174], gclwh14_11=matrixinvcoeffs[190], gclwh14_12=matrixinvcoeffs[206], gclwh14_13=matrixinvcoeffs[222], gclwh14_14=matrixinvcoeffs[238], gclwh14_15=matrixinvcoeffs[254], gclwh15_4=matrixinvcoeffs[79], gclwh15_5=matrixinvcoeffs[95], gclwh15_6=matrixinvcoeffs[111], gclwh15_7=matrixinvcoeffs[127], gclwh15_8=matrixinvcoeffs[143], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_11=matrixinvcoeffs[191], gclwh15_12=matrixinvcoeffs[207], gclwh15_13=matrixinvcoeffs[223], gclwh15_14=matrixinvcoeffs[239], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x74=((1.0)*py);
IkReal x75=((-0.03275)+px);
IkReal x76=((0.81725)+px);
IkReal x77=((0.03275)+px);
IkReal x78=((-0.81725)+px);
IkReal x79=((-0.10915)+py);
IkReal x80=((0.154705425)*gclwh12_9);
IkReal x81=((0.067544388555)*rxp1_0);
IkReal x82=(pp*r11);
IkReal x83=((0.10915)*gclwh6_5);
IkReal x84=((0.0089586225)*r00);
IkReal x85=(pp*r10);
IkReal x86=((0.1893)*rxp0_1);
IkReal x87=((0.0089586225)*r12);
IkReal x88=((0.1893)*rxp2_1);
IkReal x89=(gclwh15_11*rxp0_0);
IkReal x90=((0.074252925)*gclwh0_0);
IkReal x91=((0.01239915)*rxp2_1);
IkReal x92=((0.17125635)*gclwh7_15);
IkReal x93=((0.14850585)*rxp1_1);
IkReal x94=(gclwh4_12*rxp2_1);
IkReal x95=(pp*r00);
IkReal x96=((0.10915)*gclwh9_5);
IkReal x97=((0.14850585)*rxp0_1);
IkReal x98=((0.000977833645875)*gclwh10_5);
IkReal x99=((0.01239915)*rxp0_1);
IkReal x100=((0.067544388555)*rxp2_0);
IkReal x101=((0.006199575)*rxp0_1);
IkReal x102=((0.000977833645875)*r10);
IkReal x103=((0.000977833645875)*r02);
IkReal x104=((0.000381218255625)*r01);
IkReal x105=((0.0140560787025)*r00);
IkReal x106=(npy*py);
IkReal x107=((3.138)*gclwh6_9);
IkReal x108=(npz*py);
IkReal x109=((0.2183)*gclwh10_7);
IkReal x110=((0.1893)*rxp1_1);
IkReal x111=((0.09465)*r01);
IkReal x112=(gclwh2_0*pz);
IkReal x113=((0.14850585)*rxp2_1);
IkReal x114=((0.154705425)*rxp2_1);
IkReal x115=((0.10915)*gclwh8_7);
IkReal x116=((0.067544388555)*rxp0_0);
IkReal x117=(pp*r02);
IkReal x118=((0.10915)*gclwh11_5);
IkReal x119=(gclwh4_9*rxp2_0);
IkReal x120=((0.35681135)*gclwh7_15);
IkReal x121=((2.0)*gclwh11_8);
IkReal x122=((0.7136227)*gclwh6_15);
IkReal x123=(gclwh0_1*r00);
IkReal x124=((0.002706734445)*rxp0_1);
IkReal x125=((0.09465)*gclwh1_3);
IkReal x126=((0.81725)*gclwh8_9);
IkReal x127=(gclwh3_2*r11);
IkReal x128=((0.002706734445)*gclwh13_15);
IkReal x129=(pp*r01);
IkReal x130=((1.569)*gclwh6_9);
IkReal x131=((0.0140560787025)*gclwh6_9);
IkReal x132=(gclwh1_2*r10);
IkReal x133=((0.032418827055)*gclwh12_15);
IkReal x134=((0.000977833645875)*r01);
IkReal x135=((0.1893)*rxp2_0);
IkReal x136=((0.01429865)*gclwh7_15);
IkReal x137=(gclwh4_11*rxp2_0);
IkReal x138=((0.30941085)*rxp2_0);
IkReal x139=((0.032418827055)*rxp0_0);
IkReal x140=((0.09465)*pz);
IkReal x141=((0.000381218255625)*gclwh1_3);
IkReal x142=((0.007321434238125)*r00);
IkReal x143=(gclwh14_14*rxp0_0);
IkReal x144=((0.006199575)*rxp1_1);
IkReal x145=((0.03275)*gclwh9_9);
IkReal x146=((0.063496204505625)*gclwh2_1);
IkReal x147=(gclwh3_2*r01);
IkReal x148=((0.30941085)*rxp2_1);
IkReal x149=(gclwh5_9*rxp2_1);
IkReal x150=((0.000977833645875)*r11);
IkReal x151=((0.020662095)*rxp2_1);
IkReal x152=(gclwh14_11*rxp0_0);
IkReal x153=((0.020662095)*rxp0_1);
IkReal x154=((0.032418827055)*rxp2_0);
IkReal x155=(gclwh9_9*npx);
IkReal x156=((1.6345)*py);
IkReal x157=((0.0655)*gclwh6_9);
IkReal x158=((0.006199575)*rxp1_0);
IkReal x159=((1.0)*gclwh7_8);
IkReal x160=((0.0089586225)*r02);
IkReal x161=((0.032418827055)*rxp0_1);
IkReal x162=(gclwh12_13*rxp1_0);
IkReal x163=((0.2970117)*gclwh5_11);
IkReal x164=((0.81725)*gclwh9_9);
IkReal x165=((3.138)*px);
IkReal x166=(gclwh10_9*r02);
IkReal x167=(gclwh15_9*rxp0_1);
IkReal x168=((0.000977833645875)*r12);
IkReal x169=((0.01239915)*rxp1_1);
IkReal x170=((0.0089586225)*r10);
IkReal x171=(gclwh13_12*rxp1_0);
IkReal x172=((0.1893)*rxp1_0);
IkReal x173=((0.020662095)*rxp1_0);
IkReal x174=((0.2183)*px);
IkReal x175=((0.007321434238125)*gclwh6_9);
IkReal x176=(pp*r12);
IkReal x177=((0.03275)*gclwh8_9);
IkReal x178=((0.09465)*gclwh0_1);
IkReal x179=((0.002706734445)*rxp0_0);
IkReal x180=(gclwh5_15*rxp2_1);
IkReal x181=((0.01429865)*gclwh6_15);
IkReal x182=((1.0)*gclwh7_10);
IkReal x183=((0.0089586225)*r01);
IkReal x184=((0.000977833645875)*r00);
IkReal x185=(gclwh8_9*npx);
IkReal x186=(npz*px);
IkReal x187=(gclwh0_0*r00);
IkReal x188=((0.10915)*gclwh6_7);
IkReal x189=((1.6345)*gclwh10_9);
IkReal x190=(gclwh14_9*rxp0_0);
IkReal x191=(gclwh15_13*rxp0_0);
IkReal x192=((0.000293394886875)*r10);
IkReal x193=((3.138)*py);
IkReal x194=((2.0)*px);
IkReal x195=((0.3425127)*gclwh7_15);
IkReal x196=((0.0285973)*gclwh6_15);
IkReal x197=(gclwh12_14*rxp1_0);
IkReal x198=((0.002706734445)*rxp2_0);
IkReal x199=((0.10915)*gclwh7_5);
IkReal x200=((0.10915)*gclwh8_5);
IkReal x201=((1.569)*gclwh7_9);
IkReal x202=(npx*py);
IkReal x203=(gclwh13_15*rxp1_1);
IkReal x204=(gclwh15_11*rxp0_1);
IkReal x205=(gclwh7_9*r01);
IkReal x206=((0.2970117)*rxp1_1);
IkReal x207=((0.067544388555)*rxp1_1);
IkReal x208=((0.30941085)*rxp1_1);
IkReal x209=((0.006199575)*rxp2_0);
IkReal x210=((0.81725)*gclwh7_9);
IkReal x211=(gclwh10_9*r12);
IkReal x212=(gclwh12_11*rxp1_0);
IkReal x213=((0.067544388555)*rxp0_1);
IkReal x214=((1.569)*gclwh8_9);
IkReal x215=((0.10915)*gclwh10_7);
IkReal x216=((1.6345)*gclwh11_9);
IkReal x217=((0.1893)*rxp0_0);
IkReal x218=((0.063496204505625)*gclwh1_3);
IkReal x219=(gclwh5_12*rxp2_1);
IkReal x220=(gclwh4_14*rxp2_0);
IkReal x221=((0.14850585)*rxp2_0);
IkReal x222=(npy*px);
IkReal x223=((1.6345)*px);
IkReal x224=((0.0089586225)*r11);
IkReal x225=((0.020662095)*rxp0_0);
IkReal x226=((0.006199575)*gclwh2_0);
IkReal x227=(gclwh11_9*r02);
IkReal x228=((0.154705425)*rxp1_1);
IkReal x229=(gclwh4_15*rxp2_1);
IkReal x230=(gclwh14_13*rxp0_0);
IkReal x231=((0.03275)*gclwh10_9);
IkReal x232=(gclwh0_0*r10);
IkReal x233=((0.10915)*gclwh9_7);
IkReal x234=((0.2970117)*rxp1_0);
IkReal x235=(gclwh7_9*r11);
IkReal x236=((0.30941085)*rxp0_1);
IkReal x237=((1.6345)*gclwh7_9);
IkReal x238=((0.03275)*gclwh6_9);
IkReal x239=((0.020662095)*rxp1_1);
IkReal x240=((0.154705425)*rxp1_0);
IkReal x241=(gclwh13_13*rxp1_0);
IkReal x242=(gclwh14_11*rxp0_1);
IkReal x243=((0.006199575)*rxp2_1);
IkReal x244=(gclwh1_2*r00);
IkReal x245=((0.03275)*gclwh11_9);
IkReal x246=((0.81725)*gclwh6_9);
IkReal x247=((0.020662095)*rxp2_0);
IkReal x248=((2.0)*gclwh11_10);
IkReal x249=((1.569)*gclwh9_9);
IkReal x250=((0.81725)*gclwh10_9);
IkReal x251=((0.81725)*gclwh11_9);
IkReal x252=(gclwh15_14*rxp0_0);
IkReal x253=(gclwh7_15*r11);
IkReal x254=((0.35681135)*gclwh6_15);
IkReal x255=((0.000293394886875)*gclwh6_9);
IkReal x256=((0.17125635)*gclwh6_15);
IkReal x257=((0.002706734445)*rxp1_1);
IkReal x258=((0.154705425)*gclwh2_0);
IkReal x259=(gclwh11_9*r12);
IkReal x260=((0.01239915)*rxp2_0);
IkReal x261=((0.0655)*px);
IkReal x262=(gclwh0_1*r10);
IkReal x263=((0.3425127)*gclwh6_15);
IkReal x264=((2.0)*gclwh10_10);
IkReal x265=((0.10915)*gclwh7_7);
IkReal x266=(gclwh15_9*rxp0_0);
IkReal x267=((0.154705425)*rxp2_0);
IkReal x268=((0.000293394886875)*r00);
IkReal x269=(gclwh8_9*r10);
IkReal x270=((0.002706734445)*rxp1_0);
IkReal x271=(gclwh3_3*r11);
IkReal x272=((0.0285973)*gclwh7_15);
IkReal x273=((0.0655)*py);
IkReal x274=(gclwh13_14*rxp1_0);
IkReal x275=((0.10915)*gclwh10_5);
IkReal x276=((0.2970117)*rxp2_1);
IkReal x277=((1.569)*gclwh10_9);
IkReal x278=((0.0655)*gclwh11_9);
IkReal x279=(gclwh14_9*rxp0_1);
IkReal x280=((0.7136227)*gclwh7_15);
IkReal x281=(gclwh6_15*r11);
IkReal x282=((0.10915)*gclwh11_7);
IkReal x283=((0.074252925)*gclwh2_0);
IkReal x284=((0.03275)*gclwh7_9);
IkReal x285=((1.6345)*gclwh6_9);
IkReal x286=((1.569)*gclwh11_9);
IkReal x287=((0.032418827055)*rxp1_1);
IkReal x288=((0.0655)*gclwh10_9);
IkReal x289=((2.0)*gclwh10_8);
IkReal x290=(gclwh9_9*r10);
IkReal x291=(gclwh6_15*r01);
IkReal x292=((0.0655)*gclwh7_9);
IkReal x293=((0.032418827055)*rxp1_0);
IkReal x294=(gclwh7_15*r01);
IkReal x295=(gclwh9_10*x85);
IkReal x296=(gclwh11_10*x176);
IkReal x297=(gclwh15_10*x86);
IkReal x298=(gclwh15_5*x153);
IkReal x299=(gclwh14_10*x217);
IkReal x300=(gclwh10_10*x160);
IkReal x301=(gclwh9_5*x102);
IkReal x302=(gclwh10_10*x117);
IkReal x303=(gclwh11_5*x168);
IkReal x304=(gclwh9_10*x170);
IkReal x305=(gclwh8_5*x184);
IkReal x306=(gclwh8_10*x84);
IkReal x307=(gclwh8_10*x95);
IkReal x308=(r02*x98);
IkReal x309=(gclwh11_10*x87);
IkReal x310=(gclwh14_5*x225);
IkReal x311=(gclwh4_5*x247);
IkReal x312=(gclwh4_10*x135);
IkReal x313=(gclwh6_5*x134);
IkReal x314=(gclwh5_5*x151);
IkReal x315=(gclwh13_5*x239);
IkReal x316=(gclwh13_10*x110);
IkReal x317=(gclwh5_10*x88);
IkReal x318=(gclwh7_5*x150);
IkReal x319=(gclwh7_10*x224);
IkReal x320=(gclwh12_10*x172);
IkReal x321=(gclwh12_5*x173);
IkReal x322=(gclwh6_10*x183);
IkReal x323=(gclwh9_8*x170);
IkReal x324=(gclwh15_8*x86);
IkReal x325=(gclwh8_7*x184);
IkReal x326=(gclwh8_8*x84);
IkReal x327=(gclwh14_8*x217);
IkReal x328=(gclwh10_8*x160);
IkReal x329=(gclwh9_8*x85);
IkReal x330=(gclwh11_8*x176);
IkReal x331=(gclwh10_8*x117);
IkReal x332=(gclwh15_7*x153);
IkReal x333=(gclwh10_7*x103);
IkReal x334=(gclwh8_8*x95);
IkReal x335=(gclwh14_7*x225);
IkReal x336=(gclwh11_7*x168);
IkReal x337=(gclwh9_7*x102);
IkReal x338=(gclwh11_8*x87);
IkReal x339=(gclwh4_8*x135);
IkReal x340=(gclwh5_7*x151);
IkReal x341=(gclwh7_8*x224);
IkReal x342=(gclwh7_7*x150);
IkReal x343=(gclwh5_8*x88);
IkReal x344=(gclwh4_7*x247);
IkReal x345=(gclwh6_7*x134);
IkReal x346=(gclwh6_8*x183);
IkReal x347=(gclwh12_8*x172);
IkReal x348=(gclwh13_7*x239);
IkReal x349=(gclwh12_7*x173);
IkReal x350=(gclwh13_8*x110);
IkReal x351=(gclwh11_5*x103);
IkReal x352=(gclwh4_5*x151);
IkReal x353=(gclwh9_5*x184);
IkReal x354=(gclwh9_10*x84);
IkReal x355=(gclwh6_10*x82);
IkReal x356=(gclwh12_10*x110);
IkReal x357=(gclwh11_10*x160);
IkReal x358=(gclwh12_5*x239);
IkReal x359=(gclwh15_10*x217);
IkReal x360=(gclwh15_5*x225);
IkReal x361=(gclwh11_10*x117);
IkReal x362=(gclwh4_10*x88);
IkReal x363=(gclwh6_5*x150);
IkReal x364=(gclwh6_10*x224);
IkReal x365=(gclwh9_10*x95);
IkReal x366=(gclwh7_10*x183);
IkReal x367=(gclwh13_10*x172);
IkReal x368=(gclwh8_10*x170);
IkReal x369=(gclwh14_5*x153);
IkReal x370=(gclwh5_10*x135);
IkReal x371=(gclwh13_5*x173);
IkReal x372=(gclwh7_5*x134);
IkReal x373=(r12*x98);
IkReal x374=(gclwh5_5*x247);
IkReal x375=(gclwh8_5*x102);
IkReal x376=(gclwh14_10*x86);
IkReal x377=(gclwh10_10*x87);
IkReal x378=(gclwh15_7*x225);
IkReal x379=(gclwh9_8*x84);
IkReal x380=(gclwh4_7*x151);
IkReal x381=(gclwh6_7*x150);
IkReal x382=(gclwh6_8*x224);
IkReal x383=(gclwh11_7*x103);
IkReal x384=(gclwh12_8*x110);
IkReal x385=(gclwh11_8*x160);
IkReal x386=(gclwh11_8*x117);
IkReal x387=(gclwh9_8*x95);
IkReal x388=(gclwh12_7*x239);
IkReal x389=(gclwh6_8*x82);
IkReal x390=(gclwh9_7*x184);
IkReal x391=(gclwh4_8*x88);
IkReal x392=(gclwh15_8*x217);
IkReal x393=(gclwh7_8*x183);
IkReal x394=(gclwh7_7*x134);
IkReal x395=(gclwh8_7*x102);
IkReal x396=(gclwh14_7*x153);
IkReal x397=(gclwh14_8*x86);
IkReal x398=(gclwh13_8*x172);
IkReal x399=(gclwh8_8*x170);
IkReal x400=(gclwh13_7*x173);
IkReal x401=(gclwh5_8*x135);
IkReal x402=(gclwh5_7*x247);
IkReal x403=(gclwh10_7*x168);
IkReal x404=(gclwh10_8*x87);
IkReal x405=((0.063496204505625)*x123);
IkReal x406=(r01*x146);
IkReal x407=((0.000381218255625)*x123);
IkReal x408=(gclwh2_1*x104);
IkReal x409=(r00*x218);
IkReal x410=((0.063496204505625)*gclwh3_3*r01);
IkReal x411=(gclwh3_3*x104);
IkReal x412=(r00*x141);
IkReal x413=(rxp1_0*x80);
IkReal x414=(gclwh13_9*x228);
IkReal x415=((0.154705425)*x119);
IkReal x416=(r01*x175);
IkReal x417=((0.007321434238125)*x235);
IkReal x418=(gclwh5_9*x114);
IkReal x419=((0.154705425)*x190);
IkReal x420=((0.007321434238125)*x259);
IkReal x421=((0.154705425)*x167);
IkReal x422=((0.007321434238125)*x166);
IkReal x423=((0.007321434238125)*x290);
IkReal x424=(gclwh8_9*x142);
IkReal x425=((0.2183)*gclwh9_7*npx);
IkReal x426=((2.0)*gclwh7_10*x106);
IkReal x427=(x117*x275);
IkReal x428=(x200*x95);
IkReal x429=((0.2183)*gclwh7_5*x106);
IkReal x430=(gclwh6_10*npy*x194);
IkReal x431=(gclwh6_5*npy*x174);
IkReal x432=(x118*x176);
IkReal x433=(x85*x96);
IkReal x434=(x182*x82);
IkReal x435=(gclwh8_5*npx*x174);
IkReal x436=(gclwh8_10*npx*x194);
IkReal x437=(x129*x83);
IkReal x438=(x199*x82);
IkReal x439=((0.2183)*gclwh11_5*x108);
IkReal x440=((1.0)*gclwh6_10*x129);
IkReal x441=(gclwh10_5*npz*x174);
IkReal x442=((2.0)*gclwh9_10*x202);
IkReal x443=(x186*x264);
IkReal x444=((0.2183)*gclwh9_5*x202);
IkReal x445=(x108*x248);
IkReal x446=(gclwh6_8*npy*x194);
IkReal x447=(x176*x282);
IkReal x448=(x117*x215);
IkReal x449=(x115*x95);
IkReal x450=(gclwh6_7*npy*x174);
IkReal x451=((0.2183)*gclwh7_7*x106);
IkReal x452=((2.0)*gclwh7_8*x106);
IkReal x453=(x233*x85);
IkReal x454=((0.2183)*gclwh9_7*x202);
IkReal x455=(x265*x82);
IkReal x456=((0.2183)*gclwh11_7*x108);
IkReal x457=(x109*x186);
IkReal x458=(gclwh8_8*npx*x194);
IkReal x459=(x129*x188);
IkReal x460=((1.0)*gclwh6_8*x129);
IkReal x461=(gclwh8_7*npx*x174);
IkReal x462=(x186*x289);
IkReal x463=(x108*x121);
IkReal x464=((2.0)*gclwh9_8*x202);
IkReal x465=(x159*x82);
IkReal x466=(x108*x264);
IkReal x467=(x82*x83);
IkReal x468=(x95*x96);
IkReal x469=((2.0)*gclwh8_10*x202);
IkReal x470=(gclwh7_10*npy*x194);
IkReal x471=((0.2183)*gclwh8_5*x202);
IkReal x472=((0.2183)*gclwh10_5*x108);
IkReal x473=(x117*x118);
IkReal x474=(gclwh7_5*npy*x174);
IkReal x475=(gclwh9_10*npx*x194);
IkReal x476=(x200*x85);
IkReal x477=(x186*x248);
IkReal x478=(x129*x182);
IkReal x479=((2.0)*gclwh6_10*x106);
IkReal x480=(gclwh11_5*npz*x174);
IkReal x481=((0.2183)*gclwh6_5*x106);
IkReal x482=(x129*x199);
IkReal x483=(x176*x275);
IkReal x484=((1.0)*gclwh8_10*x85);
IkReal x485=(gclwh9_5*npx*x174);
IkReal x486=((1.0)*gclwh10_10*x176);
IkReal x487=((0.2183)*gclwh8_7*x202);
IkReal x488=(x233*x95);
IkReal x489=(x108*x109);
IkReal x490=(x188*x82);
IkReal x491=((2.0)*gclwh8_8*x202);
IkReal x492=(gclwh7_7*npy*x174);
IkReal x493=(x117*x282);
IkReal x494=(gclwh7_8*npy*x194);
IkReal x495=(x108*x289);
IkReal x496=(x176*x215);
IkReal x497=((2.0)*gclwh6_8*x106);
IkReal x498=(x129*x159);
IkReal x499=(gclwh9_8*npx*x194);
IkReal x500=(gclwh9_7*npx*x174);
IkReal x501=((1.0)*gclwh8_8*x85);
IkReal x502=(gclwh11_7*npz*x174);
IkReal x503=((1.0)*gclwh10_8*x176);
IkReal x504=((0.2183)*gclwh6_7*x106);
IkReal x505=(x129*x265);
IkReal x506=(x121*x186);
IkReal x507=(x115*x85);
IkReal x508=(x185*x223);
IkReal x509=(x155*x156);
IkReal x510=(x108*x216);
IkReal x511=(x186*x189);
IkReal x512=(x210*x82);
IkReal x513=(x129*x246);
IkReal x514=(x176*x251);
IkReal x515=(x164*x85);
IkReal x516=(x126*x95);
IkReal x517=(x222*x285);
IkReal x518=(x117*x250);
IkReal x519=(x106*x237);
IkReal x520=(((r00*x90))+((r01*x283)));
IkReal x521=((((0.074252925)*x127))+(((0.074252925)*x132)));
IkReal x522=(((r10*x90))+((r11*x283)));
IkReal x523=((((0.074252925)*x244))+(((0.074252925)*x147)));
IkReal x524=(x412+x411);
IkReal x525=(x408+x407);
IkReal x526=(x409+x410);
IkReal x527=(x405+x406);
IkReal x528=(((x140*x187))+((gclwh2_1*pp*x111))+((x111*x112))+((x178*x95)));
IkReal x529=(((x125*x85))+(((0.09465)*gclwh3_3*x82))+((x127*x140))+((x132*x140)));
IkReal x530=(((x125*x95))+((gclwh3_3*pp*x111))+((x140*x244))+((gclwh3_2*pz*x111)));
IkReal x531=((-0.10915)+(((0.09465)*gclwh2_1*x82))+((x140*x232))+(((0.09465)*r11*x112))+((x178*x85)));
IkReal x532=(((r10*x218))+(((0.063496204505625)*x271))+x79+(((-1.0)*x529)));
IkReal x533=(x79+(((-1.0)*x529))+((r10*x141))+(((0.000381218255625)*x271)));
IkReal x534=(x531+(((-1.0)*r11*x146))+(((-0.063496204505625)*x262))+(((-1.0)*x74)));
IkReal x535=((((-0.000381218255625)*x262))+x531+(((-0.000381218255625)*gclwh2_1*r11))+(((-1.0)*x74)));
IkReal x536=(x421+x423+x419+x514+x420+x516+x517+x422+x519+x518+x424+x515);
IkReal x537=(x413+x418+x415+x509+x510+x416+x417+x508+x414+x513+x511+x512);
IkReal x538=(x308+x301+x307+x297+x427+x298+x302+x426+x299+x295+x300+x428+x310+x303+x431+x305+x430+x296+x433+x304+x432+x306+x429+x309);
IkReal x539=(x451+x453+x332+x323+x330+x328+x452+x326+x449+x335+x331+x325+x334+x333+x450+x448+x336+x338+x324+x329+x327+x337+x447+x446);
IkReal x540=(x469+x353+x468+x474+x351+x360+x363+x355+x352+x472+x364+x357+x471+x361+x359+x470+x362+x358+x473+x467+x365+x356+x466+x354);
IkReal x541=(x492+x384+x387+x386+x491+x383+x488+x379+x389+x382+x494+x380+x390+x388+x493+x489+x378+x487+x381+x495+x385+x391+x392+x490);
IkReal x542=(x320+x316+x318+x441+x435+x443+x434+x439+x437+x313+x319+x314+x317+x436+x321+x312+x438+x315+x322+x445+x442+x440+x311+x444);
IkReal x543=(x505+x502+x500+x396+x398+x394+x402+x401+x400+x393+x499+x501+x399+x395+x504+x506+x498+x503+x403+x397+x497+x507+x404+x496);
IkReal x544=(x343+x460+x345+x461+x463+x462+x344+x340+x341+x464+x339+x346+x348+x347+x465+x454+x458+x350+x457+x456+x455+x342+x349+x459);
IkReal x545=(x482+x479+x484+x377+x483+x372+x481+x376+x368+x374+x373+x475+x367+x478+x375+x366+x476+x486+x369+x485+x370+x371+x480+x477);
op[0]=(x76+(((-1.0)*x528))+x527);
op[1]=x532;
op[2]=((-1.0)*x520);
op[3]=((-1.0)*x521);
op[4]=(x525+x77+(((-1.0)*x528)));
op[5]=x533;
op[6]=x534;
op[7]=(x78+x526+(((-1.0)*x530)));
op[8]=x522;
op[9]=((-1.0)*x523);
op[10]=x535;
op[11]=(x524+(((-1.0)*x530))+x75);
op[12]=((-0.178405675)+x538+x536+(((-1.0)*x537))+(((-1.0)*x542)));
op[13]=((-0.65598384)+x539+(((-1.0)*gclwh5_11*x114))+(((0.154705425)*x204))+(((-0.154705425)*x212))+(((-1.0)*gclwh13_11*x228))+(((-0.154705425)*x137))+(((0.154705425)*x152))+(((-1.0)*x544)));
op[14]=(((gclwh15_13*x97))+(((-1.0)*gclwh4_13*x221))+(((-1.0)*gclwh13_13*x93))+(((-1.0)*gclwh14_12*x139))+((gclwh12_12*x293))+(((-1.0)*gclwh5_13*x113))+(((0.14850585)*x230))+(((-1.0)*gclwh15_12*x161))+((gclwh4_12*x154))+((gclwh13_12*x287))+(((-0.14850585)*x162))+(((0.032418827055)*x219)));
op[15]=((((0.032418827055)*x180))+(((-1.0)*gclwh15_15*x161))+((gclwh5_14*x113))+(((0.14850585)*x197))+(((-1.0)*x222*x263))+((x129*x256))+(((0.00153422099037787)*x291))+(((-1.0)*gclwh14_15*x139))+(((-1.0)*x106*x195))+((gclwh13_14*x93))+((x82*x92))+((rxp1_0*x133))+(((-0.14850585)*x143))+(((-1.0)*gclwh15_14*x97))+(((0.14850585)*x220))+((gclwh4_15*x154))+(((0.032418827055)*x203))+(((0.00153422099037787)*x253)));
op[16]=((-0.007149325)+(((0.000293394886875)*x259))+(((-0.006199575)*x119))+x538+(((-1.0)*x129*x238))+((x157*x222))+((gclwh8_9*x268))+((gclwh9_9*x192))+((x176*x245))+(((-0.000293394886875)*x235))+(((-1.0)*gclwh13_9*x144))+(((-1.0)*x108*x278))+(((-1.0)*x542))+((x177*x95))+(((-1.0)*x186*x288))+(((-1.0)*x155*x273))+(((-0.006199575)*x149))+(((-1.0)*r01*x255))+(((0.006199575)*x190))+((gclwh15_9*x101))+(((0.000293394886875)*x166))+((x145*x85))+(((-1.0)*gclwh12_9*x158))+(((-1.0)*x185*x261))+((x106*x292))+(((-1.0)*x284*x82))+((x117*x231)));
op[17]=((0.01084116)+(((-0.006199575)*x137))+x539+(((-1.0)*gclwh5_11*x243))+(((-1.0)*gclwh13_11*x144))+(((0.006199575)*x152))+((gclwh15_11*x101))+(((-1.0)*x544))+(((-1.0)*gclwh12_11*x158)));
op[18]=((-0.65598384)+(((-1.0)*x155*x223))+((x246*x82))+((gclwh4_9*x114))+(((-1.0)*x176*x250))+((x164*x95))+(((-1.0)*x186*x216))+(((-1.0)*x545))+(((0.007321434238125)*x227))+((x117*x251))+((x108*x189))+(((-0.007321434238125)*x269))+(((-1.0)*x106*x285))+((x156*x185))+(((-0.154705425)*x279))+(((-1.0)*gclwh5_9*x267))+(((-0.007321434238125)*x205))+(((0.154705425)*x266))+(((-1.0)*x129*x210))+(((-1.0)*gclwh13_9*x240))+((r11*x175))+(((-1.0)*x126*x85))+((x222*x237))+x540+((rxp1_1*x80))+((gclwh9_9*x142))+(((-0.007321434238125)*x211)));
op[19]=((0.178405675)+(((-1.0)*gclwh13_11*x240))+(((-1.0)*x543))+(((-1.0)*gclwh5_11*x267))+((gclwh12_11*x228))+x541+(((-0.154705425)*x242))+((gclwh4_11*x114))+(((0.154705425)*x89)));
op[20]=((((-1.0)*gclwh12_12*x287))+(((-1.0)*gclwh14_13*x97))+((gclwh4_13*x113))+((gclwh5_12*x154))+(((0.032418827055)*x171))+((gclwh14_12*x161))+(((-0.14850585)*x241))+(((-1.0)*gclwh5_13*x221))+(((-1.0)*gclwh15_12*x139))+(((-0.032418827055)*x94))+(((0.14850585)*x191))+((gclwh12_13*x93)));
op[21]=((((0.14850585)*x274))+(((-1.0)*x195*x222))+(((-1.0)*gclwh12_14*x93))+((gclwh14_15*x161))+((gclwh5_15*x154))+((gclwh13_15*x293))+(((-0.00153422099037787)*x281))+(((-1.0)*gclwh15_15*x139))+((x106*x263))+(((-1.0)*gclwh4_14*x113))+(((0.00153422099037787)*x294))+(((-0.14850585)*x252))+(((-1.0)*x256*x82))+((gclwh14_14*x97))+((x129*x92))+((gclwh5_14*x221))+(((-1.0)*rxp1_1*x133))+(((-0.032418827055)*x229)));
op[22]=((0.01084116)+(((-1.0)*gclwh13_9*x158))+(((-1.0)*x129*x284))+(((0.006199575)*x266))+(((-1.0)*x177*x85))+(((-1.0)*x186*x278))+(((-1.0)*x545))+((gclwh12_9*x144))+((x238*x82))+((gclwh9_9*x268))+((x117*x245))+((r11*x255))+((x108*x288))+((x222*x292))+(((-1.0)*x106*x157))+(((-1.0)*gclwh8_9*x192))+((gclwh4_9*x243))+x540+(((-1.0)*x176*x231))+(((0.000293394886875)*x227))+((x185*x273))+(((-1.0)*gclwh14_9*x101))+(((-0.000293394886875)*x211))+(((-1.0)*x155*x261))+(((-0.000293394886875)*x205))+((x145*x95))+(((-1.0)*gclwh5_9*x209)));
op[23]=((0.007149325)+((gclwh4_11*x243))+(((0.006199575)*x89))+(((-1.0)*gclwh14_11*x101))+(((-1.0)*x543))+(((-1.0)*gclwh5_11*x209))+x541+((gclwh12_11*x144))+(((-1.0)*gclwh13_11*x158)));
op[24]=((((-1.0)*r01*x258))+(((-0.154705425)*x187)));
op[25]=((((-0.154705425)*x127))+(((-0.154705425)*x132)));
op[26]=-1.569;
op[27]=0;
op[28]=((((-0.006199575)*x187))+(((-1.0)*r01*x226)));
op[29]=((((-0.006199575)*x127))+(((-0.006199575)*x132)));
op[30]=(((r11*x258))+(((0.154705425)*x232)));
op[31]=((((-0.154705425)*x244))+(((-0.154705425)*x147)));
op[32]=0;
op[33]=1.569;
op[34]=((((0.006199575)*x232))+((r11*x226)));
op[35]=((((-0.006199575)*x244))+(((-0.006199575)*x147)));
op[36]=((((-1.0)*gclwh15_12*x213))+(((-1.0)*gclwh13_13*x208))+(((-1.0)*gclwh5_13*x148))+((gclwh15_13*x236))+(((-1.0)*gclwh4_13*x138))+(((0.30941085)*x230))+((gclwh13_12*x207))+(((0.067544388555)*x219))+((gclwh4_12*x100))+(((-0.30941085)*x162))+(((-1.0)*gclwh14_12*x116))+((gclwh12_12*x81)));
op[37]=((((-1.0)*gclwh14_15*x116))+((gclwh5_14*x148))+(((0.00319653818836538)*x253))+(((0.067544388555)*x180))+((x129*x254))+((gclwh13_14*x208))+((gclwh4_14*x138))+(((-1.0)*x122*x222))+(((-1.0)*gclwh15_15*x213))+(((-1.0)*x106*x280))+(((0.30941085)*x197))+((gclwh12_15*x81))+(((-0.30941085)*x143))+(((0.067544388555)*x203))+(((0.00319653818836538)*x291))+(((-1.0)*gclwh15_14*x236))+((gclwh4_15*x100))+((x120*x82)));
op[38]=((0.3425127)+((gclwh13_9*x206))+((gclwh10_9*npz*x165))+(((0.0140560787025)*x235))+(((-1.0)*gclwh8_9*x105))+((r01*x131))+((x201*x82))+(((-0.2970117)*x190))+(((-0.0140560787025)*x259))+(((-1.0)*x176*x286))+(((3.138)*gclwh11_9*x108))+(((0.2970117)*x149))+(((0.2970117)*x119))+(((-1.0)*x214*x95))+(((-0.0140560787025)*x290))+(((-3.138)*gclwh7_9*x106))+((gclwh12_9*x234))+(((-0.2970117)*x167))+(((-1.0)*x117*x277))+(((-1.0)*x107*x222))+(((-1.0)*x249*x85))+((x155*x193))+((x165*x185))+(((-0.0140560787025)*x166))+((x129*x130)));
op[39]=(((gclwh13_11*x206))+(((-0.2970117)*x204))+((rxp2_1*x163))+(((0.2970117)*x212))+(((-0.2970117)*x152))+(((0.2970117)*x137)));
op[40]=((((-1.0)*gclwh5_13*x91))+((gclwh15_13*x99))+((gclwh13_12*x257))+(((0.01239915)*x230))+(((-1.0)*gclwh13_13*x169))+(((-0.01239915)*x162))+(((0.002706734445)*x219))+(((-1.0)*gclwh14_12*x179))+(((-1.0)*gclwh15_12*x124))+((gclwh12_12*x270))+(((-1.0)*gclwh4_13*x260))+((gclwh4_12*x198)));
op[41]=((((0.01239915)*x197))+((gclwh12_15*x270))+((gclwh4_15*x198))+(((-1.0)*x106*x272))+(((0.000128096207609625)*x291))+(((-1.0)*gclwh15_15*x124))+(((-0.01239915)*x143))+((gclwh5_14*x91))+((rxp1_1*x128))+((x129*x181))+(((0.01239915)*x220))+((x136*x82))+((gclwh13_14*x169))+(((-1.0)*gclwh15_14*x99))+(((0.000128096207609625)*x253))+(((0.002706734445)*x180))+(((-1.0)*x196*x222))+(((-1.0)*gclwh14_15*x179)));
op[42]=((((-0.067544388555)*x94))+(((-1.0)*gclwh14_13*x236))+((gclwh14_12*x213))+((gclwh13_12*x81))+(((-1.0)*gclwh15_12*x116))+(((0.30941085)*x191))+(((-0.30941085)*x241))+(((-1.0)*gclwh12_12*x207))+((gclwh5_12*x100))+(((-1.0)*gclwh5_13*x138))+((gclwh4_13*x148))+((gclwh12_13*x208)));
op[43]=((((-0.067544388555)*x229))+(((-1.0)*gclwh12_15*x207))+((gclwh5_15*x100))+((gclwh5_14*x138))+(((-0.30941085)*x252))+(((-1.0)*x222*x280))+(((0.30941085)*x274))+((x106*x122))+((gclwh13_15*x81))+(((-1.0)*gclwh4_14*x148))+(((0.00319653818836538)*x294))+(((-1.0)*gclwh15_15*x116))+((gclwh14_14*x236))+(((-0.00319653818836538)*x281))+(((-1.0)*gclwh12_14*x208))+((gclwh14_15*x213))+((x120*x129))+(((-1.0)*x254*x82)));
op[44]=(((x214*x85))+(((-0.0140560787025)*x227))+((gclwh11_9*npz*x165))+((x129*x201))+((x176*x277))+(((0.2970117)*x279))+((x106*x107))+((x155*x165))+(((0.0140560787025)*x211))+(((-1.0)*gclwh7_9*npy*x165))+(((-1.0)*x130*x82))+(((-3.138)*gclwh10_9*x108))+(((-1.0)*x185*x193))+(((-1.0)*r11*x131))+(((-1.0)*x117*x286))+(((0.2970117)*gclwh5_9*rxp2_0))+(((0.0140560787025)*x269))+(((-1.0)*gclwh9_9*x105))+(((-0.2970117)*x266))+((gclwh13_9*x234))+(((0.0140560787025)*x205))+(((-1.0)*gclwh12_9*x206))+(((-1.0)*x249*x95))+(((-1.0)*gclwh4_9*x276)));
op[45]=((-0.3425127)+(((-1.0)*gclwh12_11*x206))+(((0.2970117)*x242))+(((-1.0)*gclwh4_11*x276))+(((-0.2970117)*x89))+((gclwh13_11*x234))+((rxp2_0*x163)));
op[46]=((((-1.0)*gclwh14_13*x99))+(((-1.0)*gclwh12_12*x257))+(((-1.0)*gclwh15_12*x179))+(((-0.01239915)*x241))+(((-0.002706734445)*x94))+(((-1.0)*gclwh5_13*x260))+(((0.002706734445)*x171))+((gclwh14_12*x124))+((gclwh12_13*x169))+(((0.01239915)*x191))+((gclwh4_13*x91))+((gclwh5_12*x198)));
op[47]=(((rxp1_0*x128))+(((-0.000128096207609625)*x281))+((gclwh14_15*x124))+(((-0.01239915)*x252))+((gclwh5_15*x198))+(((-1.0)*gclwh4_14*x91))+(((0.000128096207609625)*x294))+(((-1.0)*x222*x272))+((gclwh5_14*x260))+(((-1.0)*gclwh12_15*x257))+((gclwh14_14*x99))+(((-0.002706734445)*x229))+(((-1.0)*gclwh12_14*x169))+(((-1.0)*x181*x82))+(((-1.0)*gclwh15_15*x179))+((x129*x136))+((x106*x196))+(((0.01239915)*x274)));
op[48]=(x78+(((-1.0)*x528))+x527);
op[49]=x532;
op[50]=x520;
op[51]=x521;
op[52]=(x525+(((-1.0)*x528))+x75);
op[53]=x533;
op[54]=x534;
op[55]=(x526+x76+(((-1.0)*x530)));
op[56]=((-1.0)*x522);
op[57]=x523;
op[58]=x535;
op[59]=(x524+x77+(((-1.0)*x530)));
op[60]=((0.178405675)+x538+(((-1.0)*x542))+x537+(((-1.0)*x536)));
IkReal x546=(pp*r11);
IkReal x547=((0.10915)*gclwh6_5);
IkReal x548=((0.0089586225)*r00);
IkReal x549=(pp*r10);
IkReal x550=((0.1893)*rxp0_1);
IkReal x551=((0.0089586225)*r12);
IkReal x552=((0.1893)*rxp2_1);
IkReal x553=((0.17125635)*gclwh7_15);
IkReal x554=((0.154705425)*rxp0_0);
IkReal x555=((0.14850585)*rxp1_1);
IkReal x556=(pp*r00);
IkReal x557=((0.10915)*gclwh9_5);
IkReal x558=((0.14850585)*rxp0_1);
IkReal x559=((0.000977833645875)*gclwh10_5);
IkReal x560=((0.006199575)*rxp0_1);
IkReal x561=((0.000977833645875)*r10);
IkReal x562=((0.000977833645875)*r02);
IkReal x563=(npz*py);
IkReal x564=((0.2183)*gclwh10_7);
IkReal x565=((0.1893)*rxp1_1);
IkReal x566=((0.14850585)*rxp2_1);
IkReal x567=((0.154705425)*rxp2_1);
IkReal x568=((0.10915)*gclwh8_7);
IkReal x569=(pp*r02);
IkReal x570=((0.10915)*gclwh11_5);
IkReal x571=((2.0)*gclwh11_8);
IkReal x572=(pp*r01);
IkReal x573=((0.032418827055)*gclwh12_15);
IkReal x574=((0.000977833645875)*r01);
IkReal x575=((0.1893)*rxp2_0);
IkReal x576=((0.006199575)*rxp2_0);
IkReal x577=((0.032418827055)*rxp0_0);
IkReal x578=(gclwh9_9*r00);
IkReal x579=((0.006199575)*rxp1_1);
IkReal x580=((0.03275)*gclwh9_9);
IkReal x581=((0.006199575)*rxp2_1);
IkReal x582=((0.000977833645875)*r11);
IkReal x583=((0.020662095)*rxp2_1);
IkReal x584=((0.020662095)*rxp0_1);
IkReal x585=((0.032418827055)*rxp2_0);
IkReal x586=(npy*py);
IkReal x587=((0.0655)*gclwh6_9);
IkReal x588=((0.006199575)*rxp1_0);
IkReal x589=((1.0)*gclwh7_8);
IkReal x590=((0.0089586225)*r02);
IkReal x591=((0.032418827055)*rxp0_1);
IkReal x592=((0.000977833645875)*r12);
IkReal x593=((0.0089586225)*r10);
IkReal x594=((0.1893)*rxp1_0);
IkReal x595=((0.020662095)*rxp1_0);
IkReal x596=((0.2183)*px);
IkReal x597=(gclwh6_9*r11);
IkReal x598=(pp*r12);
IkReal x599=((0.03275)*gclwh8_9);
IkReal x600=((0.032418827055)*rxp2_1);
IkReal x601=((1.0)*gclwh7_10);
IkReal x602=((0.0089586225)*r01);
IkReal x603=((0.000977833645875)*r00);
IkReal x604=(npx*py);
IkReal x605=(npz*px);
IkReal x606=((0.10915)*gclwh6_7);
IkReal x607=((0.006199575)*rxp0_0);
IkReal x608=((0.000293394886875)*r10);
IkReal x609=((2.0)*px);
IkReal x610=((0.3425127)*gclwh7_15);
IkReal x611=((0.14850585)*rxp1_0);
IkReal x612=((0.10915)*gclwh7_5);
IkReal x613=((0.10915)*gclwh8_5);
IkReal x614=((0.032418827055)*rxp1_1);
IkReal x615=((0.154705425)*rxp0_1);
IkReal x616=((0.000293394886875)*r01);
IkReal x617=((0.154705425)*rxp1_1);
IkReal x618=((0.10915)*gclwh10_7);
IkReal x619=((0.154705425)*rxp1_0);
IkReal x620=((0.1893)*rxp0_0);
IkReal x621=((0.14850585)*rxp2_0);
IkReal x622=((0.154705425)*rxp2_0);
IkReal x623=(npy*px);
IkReal x624=((0.0089586225)*r11);
IkReal x625=((0.14850585)*rxp0_0);
IkReal x626=((0.020662095)*rxp0_0);
IkReal x627=((0.03275)*gclwh10_9);
IkReal x628=((0.10915)*gclwh9_7);
IkReal x629=((0.03275)*gclwh6_9);
IkReal x630=((0.020662095)*rxp1_1);
IkReal x631=((0.032418827055)*rxp1_0);
IkReal x632=((0.03275)*gclwh11_9);
IkReal x633=(gclwh11_9*r02);
IkReal x634=((0.020662095)*rxp2_0);
IkReal x635=((2.0)*gclwh11_10);
IkReal x636=(gclwh10_9*r12);
IkReal x637=((0.00153422099037787)*r11);
IkReal x638=((0.17125635)*gclwh6_15);
IkReal x639=((0.3425127)*gclwh6_15);
IkReal x640=((2.0)*gclwh10_10);
IkReal x641=((0.10915)*gclwh7_7);
IkReal x642=((0.0655)*gclwh8_9);
IkReal x643=((0.10915)*gclwh10_5);
IkReal x644=((0.0655)*gclwh11_9);
IkReal x645=((0.10915)*gclwh11_7);
IkReal x646=((0.03275)*gclwh7_9);
IkReal x647=((0.0655)*gclwh10_9);
IkReal x648=((2.0)*gclwh10_8);
IkReal x649=((0.0655)*gclwh7_9);
IkReal x650=((0.00153422099037787)*r01);
IkReal x651=(gclwh9_8*x593);
IkReal x652=(gclwh15_8*x550);
IkReal x653=(gclwh8_7*x603);
IkReal x654=(gclwh8_8*x548);
IkReal x655=(gclwh14_8*x620);
IkReal x656=(gclwh10_8*x590);
IkReal x657=(gclwh9_8*x549);
IkReal x658=(gclwh11_8*x598);
IkReal x659=(gclwh10_8*x569);
IkReal x660=(gclwh15_7*x584);
IkReal x661=(gclwh10_7*x562);
IkReal x662=(gclwh8_8*x556);
IkReal x663=(gclwh14_7*x626);
IkReal x664=(gclwh11_7*x592);
IkReal x665=(gclwh9_7*x561);
IkReal x666=(gclwh11_8*x551);
IkReal x667=(gclwh4_8*x575);
IkReal x668=(gclwh5_7*x583);
IkReal x669=(gclwh7_8*x624);
IkReal x670=(gclwh7_7*x582);
IkReal x671=(gclwh5_8*x552);
IkReal x672=(gclwh4_7*x634);
IkReal x673=(gclwh6_7*x574);
IkReal x674=(gclwh6_8*x602);
IkReal x675=(gclwh12_8*x594);
IkReal x676=(gclwh13_7*x630);
IkReal x677=(gclwh12_7*x595);
IkReal x678=(gclwh13_8*x565);
IkReal x679=(gclwh11_5*x562);
IkReal x680=(gclwh4_5*x583);
IkReal x681=(gclwh9_5*x603);
IkReal x682=(gclwh9_10*x548);
IkReal x683=(gclwh6_10*x546);
IkReal x684=(gclwh12_10*x565);
IkReal x685=(gclwh11_10*x590);
IkReal x686=(gclwh12_5*x630);
IkReal x687=(gclwh15_10*x620);
IkReal x688=(gclwh15_5*x626);
IkReal x689=(gclwh11_10*x569);
IkReal x690=(gclwh4_10*x552);
IkReal x691=(gclwh6_5*x582);
IkReal x692=(gclwh6_10*x624);
IkReal x693=(gclwh9_10*x556);
IkReal x694=(gclwh7_10*x602);
IkReal x695=(gclwh13_10*x594);
IkReal x696=(gclwh8_10*x593);
IkReal x697=(gclwh14_5*x584);
IkReal x698=(gclwh5_10*x575);
IkReal x699=(gclwh13_5*x595);
IkReal x700=(gclwh7_5*x574);
IkReal x701=(r12*x559);
IkReal x702=(gclwh5_5*x634);
IkReal x703=(gclwh8_5*x561);
IkReal x704=(gclwh14_10*x550);
IkReal x705=(gclwh10_10*x551);
IkReal x706=(gclwh15_7*x626);
IkReal x707=(gclwh9_8*x548);
IkReal x708=(gclwh4_7*x583);
IkReal x709=(gclwh6_7*x582);
IkReal x710=(gclwh6_8*x624);
IkReal x711=(gclwh11_7*x562);
IkReal x712=(gclwh12_8*x565);
IkReal x713=(gclwh11_8*x590);
IkReal x714=(gclwh11_8*x569);
IkReal x715=(gclwh9_8*x556);
IkReal x716=(gclwh12_7*x630);
IkReal x717=(gclwh6_8*x546);
IkReal x718=(gclwh9_7*x603);
IkReal x719=(gclwh4_8*x552);
IkReal x720=(gclwh15_8*x620);
IkReal x721=(gclwh7_8*x602);
IkReal x722=(gclwh7_7*x574);
IkReal x723=(gclwh8_7*x561);
IkReal x724=(gclwh14_7*x584);
IkReal x725=(gclwh14_8*x550);
IkReal x726=(gclwh13_8*x594);
IkReal x727=(gclwh8_8*x593);
IkReal x728=(gclwh13_7*x595);
IkReal x729=(gclwh5_8*x575);
IkReal x730=(gclwh5_7*x634);
IkReal x731=(gclwh10_7*x592);
IkReal x732=(gclwh10_8*x551);
IkReal x733=((0.2183)*gclwh9_7*npx);
IkReal x734=(gclwh9_9*npx*px);
IkReal x735=(gclwh6_8*npy*x609);
IkReal x736=(x598*x645);
IkReal x737=(x569*x618);
IkReal x738=(x556*x568);
IkReal x739=(gclwh6_7*npy*x596);
IkReal x740=((0.2183)*gclwh7_7*x586);
IkReal x741=((2.0)*gclwh7_8*x586);
IkReal x742=(x549*x628);
IkReal x743=((0.2183)*gclwh9_7*x604);
IkReal x744=(x546*x641);
IkReal x745=((0.2183)*gclwh11_7*x563);
IkReal x746=(x564*x605);
IkReal x747=(gclwh8_8*npx*x609);
IkReal x748=(x572*x606);
IkReal x749=((1.0)*gclwh6_8*x572);
IkReal x750=(gclwh8_7*npx*x596);
IkReal x751=(x605*x648);
IkReal x752=(x563*x571);
IkReal x753=((2.0)*gclwh9_8*x604);
IkReal x754=(x546*x589);
IkReal x755=(x563*x640);
IkReal x756=(x546*x547);
IkReal x757=(x556*x557);
IkReal x758=((2.0)*gclwh8_10*x604);
IkReal x759=(gclwh7_10*npy*x609);
IkReal x760=((0.2183)*gclwh8_5*x604);
IkReal x761=((0.2183)*gclwh10_5*x563);
IkReal x762=(x569*x570);
IkReal x763=(gclwh7_5*npy*x596);
IkReal x764=(gclwh9_10*npx*x609);
IkReal x765=(x549*x613);
IkReal x766=(x605*x635);
IkReal x767=(x572*x601);
IkReal x768=((2.0)*gclwh6_10*x586);
IkReal x769=(gclwh11_5*npz*x596);
IkReal x770=((0.2183)*gclwh6_5*x586);
IkReal x771=(x572*x612);
IkReal x772=(x598*x643);
IkReal x773=((1.0)*gclwh8_10*x549);
IkReal x774=(gclwh9_5*npx*x596);
IkReal x775=((1.0)*gclwh10_10*x598);
IkReal x776=((0.2183)*gclwh8_7*x604);
IkReal x777=(x556*x628);
IkReal x778=(x563*x564);
IkReal x779=(x546*x606);
IkReal x780=((2.0)*gclwh8_8*x604);
IkReal x781=(gclwh7_7*npy*x596);
IkReal x782=(x569*x645);
IkReal x783=(gclwh7_8*npy*x609);
IkReal x784=(x563*x648);
IkReal x785=(x598*x618);
IkReal x786=((2.0)*gclwh6_8*x586);
IkReal x787=(x572*x589);
IkReal x788=(gclwh9_8*npx*x609);
IkReal x789=(gclwh9_7*npx*x596);
IkReal x790=((1.0)*gclwh8_8*x549);
IkReal x791=(gclwh11_7*npz*x596);
IkReal x792=((1.0)*gclwh10_8*x598);
IkReal x793=((0.2183)*gclwh6_7*x586);
IkReal x794=(x572*x641);
IkReal x795=(x571*x605);
IkReal x796=(x549*x568);
IkReal x797=(x662+x659+x656+x665+x664+x741+x655+x651+x658+x657+x666+x738+x735+x739+x653+x742+x661+x740+x660+x654+x652+x736+x737+x663);
IkReal x798=(x783+x718+x710+x780+x720+x714+x707+x712+x715+x719+x717+x709+x784+x782+x776+x711+x779+x777+x716+x781+x708+x713+x778+x706);
IkReal x799=(x680+x682+x762+x761+x679+x757+x760+x687+x686+x689+x681+x763+x756+x759+x684+x688+x683+x685+x690+x693+x758+x755+x691+x692);
IkReal x800=(x728+x721+x730+x723+x793+x788+x789+x726+x795+x794+x796+x731+x785+x786+x727+x724+x732+x790+x722+x729+x792+x791+x725+x787);
IkReal x801=(x744+x668+x751+x669+x672+x671+x753+x670+x745+x674+x676+x750+x675+x754+x673+x747+x743+x746+x748+x749+x677+x667+x752+x678);
IkReal x802=(x704+x770+x698+x695+x765+x699+x772+x767+x705+x771+x768+x774+x766+x700+x769+x702+x775+x696+x703+x701+x773+x697+x764+x694);
op[61]=((-0.65598384)+(((-1.0)*gclwh15_11*x615))+((gclwh12_11*x619))+(((-1.0)*gclwh14_11*x554))+((gclwh13_11*x617))+(((-1.0)*x801))+x797+((gclwh4_11*x622))+((gclwh5_11*x567)));
op[62]=((((-1.0)*gclwh14_13*x625))+(((-1.0)*gclwh15_13*x558))+((gclwh14_12*x577))+((gclwh5_13*x566))+(((-1.0)*gclwh13_12*x614))+(((-1.0)*gclwh12_12*x631))+(((-1.0)*gclwh5_12*x600))+((gclwh15_12*x591))+((gclwh4_13*x621))+(((-1.0)*gclwh4_12*x585))+((gclwh13_13*x555))+((gclwh12_13*x611)));
op[63]=((((-1.0)*gclwh4_15*x585))+((x586*x610))+(((-1.0)*gclwh5_15*x600))+(((-1.0)*gclwh7_15*x637))+(((-1.0)*gclwh12_14*x611))+((gclwh14_14*x625))+((gclwh15_14*x558))+(((-1.0)*gclwh5_14*x566))+(((-1.0)*gclwh13_14*x555))+(((-1.0)*gclwh6_15*x650))+((x623*x639))+(((-1.0)*gclwh4_14*x621))+((gclwh15_15*x591))+(((-1.0)*rxp1_0*x573))+(((-1.0)*x546*x553))+((gclwh14_15*x577))+(((-1.0)*gclwh13_15*x614))+(((-1.0)*x572*x638)));
op[64]=((0.007149325)+(((-1.0)*gclwh7_5*x582))+(((0.0655)*gclwh9_9*x604))+((gclwh14_10*x620))+(((-1.0)*x549*x580))+((r02*x559))+((gclwh15_5*x584))+((gclwh6_10*npy*x609))+((gclwh9_5*x561))+((gclwh11_10*x551))+(((-1.0)*gclwh10_5*npz*x596))+((gclwh12_9*x588))+((gclwh9_10*x593))+((gclwh10_10*x590))+(((0.2183)*gclwh7_5*x586))+(((-0.000293394886875)*gclwh11_9*r12))+(((-0.000293394886875)*gclwh8_9*r00))+(((-1.0)*gclwh6_10*x602))+(((-1.0)*x556*x599))+((gclwh10_10*x569))+(((-1.0)*x598*x632))+((gclwh9_10*x549))+((x563*x644))+((gclwh11_5*x592))+(((-1.0)*gclwh12_5*x595))+((x572*x629))+(((0.000293394886875)*gclwh7_9*r11))+(((-1.0)*gclwh4_5*x634))+(((-1.0)*gclwh9_9*x608))+((gclwh6_5*npy*x596))+((gclwh4_9*x576))+(((-1.0)*gclwh8_5*npx*x596))+(((-1.0)*gclwh6_10*x572))+(((-1.0)*gclwh5_5*x583))+(((-1.0)*gclwh13_5*x630))+(((-1.0)*gclwh14_9*x607))+((x556*x613))+((x569*x643))+(((-1.0)*gclwh4_10*x575))+(((-1.0)*gclwh6_5*x574))+(((-1.0)*x546*x612))+(((-1.0)*x546*x601))+(((-1.0)*x587*x623))+(((-1.0)*gclwh7_10*x624))+(((-1.0)*gclwh13_10*x565))+(((-1.0)*x569*x627))+(((2.0)*gclwh7_10*x586))+(((-1.0)*x605*x640))+((npx*px*x642))+((gclwh8_10*x548))+((gclwh11_10*x598))+((gclwh15_10*x550))+((x570*x598))+((gclwh8_10*x556))+((gclwh8_5*x603))+(((-1.0)*gclwh5_10*x552))+((gclwh13_9*x579))+((x546*x646))+(((-0.000293394886875)*gclwh10_9*r02))+((x605*x647))+((gclwh5_9*x581))+(((-2.0)*gclwh9_10*x604))+(((-0.2183)*gclwh11_5*x563))+(((-1.0)*gclwh8_10*npx*x609))+(((-0.2183)*gclwh9_5*x604))+((x549*x557))+(((-1.0)*gclwh12_10*x594))+(((-1.0)*x563*x635))+(((-1.0)*gclwh15_9*x560))+(((-1.0)*x547*x572))+((gclwh6_9*x616))+(((-1.0)*x586*x649))+((gclwh14_5*x626)));
op[65]=((0.01084116)+((gclwh4_11*x576))+((gclwh12_11*x588))+((gclwh5_11*x581))+((gclwh13_11*x579))+(((-1.0)*gclwh15_11*x560))+(((-1.0)*x801))+x797+(((-1.0)*gclwh14_11*x607)));
op[66]=((-0.65598384)+x799+(((-1.0)*gclwh4_9*x567))+(((-0.81725)*gclwh6_9*x546))+(((-0.81725)*gclwh9_9*x556))+(((-1.0)*gclwh15_9*x554))+(((0.007321434238125)*gclwh7_9*r01))+(((-1.0)*gclwh12_9*x617))+(((-0.007321434238125)*x597))+(((0.81725)*gclwh7_9*x572))+(((1.6345)*x734))+((gclwh13_9*x619))+((gclwh14_9*x615))+(((1.6345)*gclwh11_9*x605))+(((-1.6345)*gclwh7_9*x623))+(((0.007321434238125)*x636))+(((0.81725)*gclwh10_9*x598))+(((0.81725)*gclwh8_9*x549))+(((0.007321434238125)*gclwh8_9*r10))+(((-1.0)*x802))+(((-0.007321434238125)*x633))+(((-1.6345)*gclwh8_9*x604))+(((-0.007321434238125)*x578))+((gclwh5_9*x622))+(((-0.81725)*gclwh11_9*x569))+(((-1.6345)*gclwh10_9*x563))+(((1.6345)*gclwh6_9*x586)));
op[67]=((-0.178405675)+((gclwh14_11*x615))+((gclwh5_11*x622))+((gclwh13_11*x619))+x798+(((-1.0)*gclwh4_11*x567))+(((-1.0)*gclwh15_11*x554))+(((-1.0)*gclwh12_11*x617))+(((-1.0)*x800)));
op[68]=(((gclwh14_13*x558))+(((-1.0)*gclwh15_13*x625))+((gclwh12_12*x614))+(((-1.0)*gclwh5_12*x585))+((gclwh13_13*x611))+(((-1.0)*gclwh13_12*x631))+((gclwh4_12*x600))+(((-1.0)*gclwh12_13*x555))+(((-1.0)*gclwh4_13*x566))+((gclwh15_12*x577))+((gclwh5_13*x621))+(((-1.0)*gclwh14_12*x591)));
op[69]=(((rxp1_1*x573))+(((-1.0)*gclwh14_15*x591))+(((-1.0)*gclwh7_15*x650))+((gclwh12_14*x555))+(((-1.0)*gclwh5_15*x585))+(((-1.0)*gclwh14_14*x558))+(((-1.0)*gclwh5_14*x621))+((x546*x638))+(((-1.0)*x586*x639))+(((-1.0)*gclwh13_15*x631))+((x610*x623))+(((-1.0)*x553*x572))+((gclwh4_14*x566))+((gclwh6_15*x637))+((gclwh15_15*x577))+((gclwh15_14*x625))+(((-1.0)*gclwh13_14*x611))+((gclwh4_15*x600)));
op[70]=((0.01084116)+(((0.000293394886875)*x636))+x799+(((-1.0)*x556*x580))+(((-1.0)*x604*x642))+((gclwh7_9*x616))+((x598*x627))+((gclwh8_9*x608))+(((-1.0)*gclwh12_9*x579))+((gclwh5_9*x576))+(((-1.0)*x569*x632))+((x605*x644))+((gclwh13_9*x588))+(((-0.000293394886875)*x633))+(((-0.000293394886875)*x578))+(((-1.0)*x563*x647))+(((-1.0)*gclwh4_9*x581))+(((-0.000293394886875)*x597))+((x549*x599))+(((-1.0)*x802))+((x572*x646))+(((0.0655)*x734))+(((-1.0)*gclwh15_9*x607))+((x586*x587))+(((-1.0)*x623*x649))+((gclwh14_9*x560))+(((-1.0)*x546*x629)));
op[71]=((-0.007149325)+(((-1.0)*gclwh15_11*x607))+((gclwh13_11*x588))+x798+(((-1.0)*gclwh12_11*x579))+((gclwh14_11*x560))+(((-1.0)*x800))+((gclwh5_11*x576))+(((-1.0)*gclwh4_11*x581)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j0array[16], cj0array[16], sj0array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj0 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj0)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j0array[numsolutions]=((2.0)*(atan(htj0)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x803=htj1*htj1;
CheckValue<IkReal> x804=IKPowWithIntegerCheck(((1.0)+x803),-1);
if(!x804.valid){
continue;
}
cj1array[numsolutions]=((x804.value)*(((1.0)+(((-1.0)*x803)))));
CheckValue<IkReal> x805=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x805.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x805.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x806=htj2*htj2;
CheckValue<IkReal> x807=IKPowWithIntegerCheck(((1.0)+x806),-1);
if(!x807.valid){
continue;
}
cj2array[numsolutions]=((x807.value)*(((1.0)+(((-1.0)*x806)))));
CheckValue<IkReal> x808=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x808.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x808.value));
}
if(isinf(htj0)){
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
}
else{
IkReal x809=htj0*htj0;
CheckValue<IkReal> x810=IKPowWithIntegerCheck(((1.0)+x809),-1);
if(!x810.valid){
continue;
}
cj0array[numsolutions]=((x810.value)*(((1.0)+(((-1.0)*x809)))));
CheckValue<IkReal> x811=IKPowWithIntegerCheck(((1.0)+(htj0*htj0)),-1);
if(!x811.valid){
continue;
}
sj0array[numsolutions]=((2.0)*htj0*(x811.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj0 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij0[0] = 0; _ij0[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj0array[ij1]-cj0array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij1]-sj0array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij0[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j0 = j0array[ij1]; cj0 = cj0array[ij1]; sj0 = sj0array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}

template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
IkReal x812=(cj0*r02);
IkReal x813=(r12*sj0);
j5eval[0]=((((-1.0)*x813))+(((-1.0)*x812)));
j5eval[1]=IKsign(((((-1893.0)*x812))+(((-1893.0)*x813))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x814=(r02*sj0);
IkReal x815=(cj0*r12);
j5eval[0]=((((-1.0)*x815))+x814);
j5eval[1]=IKsign(((((-179.17245)*x815))+(((179.17245)*x814))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
j5eval[0]=r22;
j5eval[1]=IKsign(r22);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x817 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x817)==0){
continue;
}
IkReal x816=pow(x817,-0.5);
CheckValue<IkReal> x818 = IKatan2WithCheck(IkReal(((-1.0)*r12)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x818.valid){
continue;
}
IkReal gconst0=((-1.0)*(x818.value));
IkReal gconst1=(r12*x816);
IkReal gconst2=(r02*x816);
CheckValue<IkReal> x819 = IKatan2WithCheck(IkReal(((-1.0)*r12)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x819.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x819.value)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x820=(cj1*sj2);
IkReal x821=(gconst2*sj1);
IkReal x822=(gconst1*r01);
IkReal x823=((20000.0)*pz);
IkReal x824=((7845.0)*cj2);
IkReal x825=((8500.0)*sj1);
IkReal x826=(gconst1*r00);
IkReal x827=(gconst2*r11);
IkReal x828=(gconst2*r10);
IkReal x829=((7845.0)*x826);
CheckValue<IkReal> x830=IKPowWithIntegerCheck(IKsign(((((-1893.0)*gconst1*r12))+(((-1893.0)*gconst2*r02)))),-1);
if(!x830.valid){
continue;
}
CheckValue<IkReal> x831 = IKatan2WithCheck(IkReal((((x822*x823))+(((-7845.0)*x820*x827))+(((7845.0)*x820*x822))+((x822*x825))+(((-1.0)*x823*x827))+((sj1*x822*x824))+(((-1.0)*r11*x821*x824))+(((-8500.0)*r11*x821)))),IkReal(((((8500.0)*r10*x821))+((x823*x828))+(((-1.0)*sj1*x824*x826))+((r10*x821*x824))+(((-1.0)*x825*x826))+(((-1.0)*x823*x826))+(((7845.0)*x820*x828))+(((-1.0)*x820*x829)))),IKFAST_ATAN2_MAGTHRESH);
if(!x831.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x830.value)))+(x831.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
tj5 = IKtan(j5);
{
IkReal evalcond[4];
IkReal x832=IKcos(j5);
IkReal x833=IKsin(j5);
IkReal x834=((0.39225)*sj1);
IkReal x835=(gconst1*r01);
IkReal x836=((1.0)*px);
IkReal x837=(gconst2*r11);
IkReal x838=(gconst2*r10);
IkReal x839=((0.39225)*cj1);
IkReal x840=((0.09465)*x832);
IkReal x841=(r00*x833);
IkReal x842=((0.09465)*x833);
IkReal x843=(gconst1*x842);
evalcond[0]=(((cj2*x834))+((sj2*x839))+(((0.425)*sj1))+((r20*x842))+pz+((r21*x840)));
evalcond[1]=(((gconst1*x841))+(((-1.0)*x833*x838))+((x832*x835))+(((-1.0)*x832*x837)));
evalcond[2]=((0.10915)+((gconst2*py))+(((-1.0)*gconst1*x836))+((x837*x840))+(((-1.0)*x835*x840))+((x838*x842))+(((-0.09465)*gconst1*x841)));
evalcond[3]=(((sj2*x834))+(((-1.0)*r10*x843))+(((-1.0)*gconst2*x836))+(((-0.09465)*gconst2*x841))+(((-1.0)*gconst2*r01*x840))+(((-1.0)*gconst1*r11*x840))+(((-1.0)*gconst1*py))+(((-1.0)*cj2*x839))+(((-0.425)*cj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x844=((1.0)*sj2);
IkReal x845=(sj1*sj5);
IkReal x846=((1.0)*cj2);
IkReal x847=(cj5*sj1);
IkReal x848=(gconst2*r01);
IkReal x849=(cj1*sj5);
IkReal x850=(gconst2*r00);
IkReal x851=(gconst1*r10);
IkReal x852=(gconst1*r11);
IkReal x853=(cj1*cj5);
IkReal x854=(x852*x853);
if( IKabs((((sj2*x845*x851))+(((-1.0)*x846*x854))+(((-1.0)*r21*x844*x853))+(((-1.0)*r20*x844*x849))+(((-1.0)*x846*x849*x850))+(((-1.0)*x846*x849*x851))+((sj2*x847*x848))+((sj2*x847*x852))+(((-1.0)*r20*x845*x846))+(((-1.0)*r21*x846*x847))+(((-1.0)*x846*x848*x853))+((sj2*x845*x850)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x844*x854))+(((-1.0)*x846*x847*x852))+(((-1.0)*x844*x849*x851))+((cj2*r21*x853))+(((-1.0)*x844*x848*x853))+(((-1.0)*x845*x846*x850))+(((-1.0)*x845*x846*x851))+(((-1.0)*x844*x849*x850))+(((-1.0)*x846*x847*x848))+(((-1.0)*r21*x844*x847))+((cj2*r20*x849))+(((-1.0)*r20*x844*x845)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj2*x845*x851))+(((-1.0)*x846*x854))+(((-1.0)*r21*x844*x853))+(((-1.0)*r20*x844*x849))+(((-1.0)*x846*x849*x850))+(((-1.0)*x846*x849*x851))+((sj2*x847*x848))+((sj2*x847*x852))+(((-1.0)*r20*x845*x846))+(((-1.0)*r21*x846*x847))+(((-1.0)*x846*x848*x853))+((sj2*x845*x850))))+IKsqr(((((-1.0)*x844*x854))+(((-1.0)*x846*x847*x852))+(((-1.0)*x844*x849*x851))+((cj2*r21*x853))+(((-1.0)*x844*x848*x853))+(((-1.0)*x845*x846*x850))+(((-1.0)*x845*x846*x851))+(((-1.0)*x844*x849*x850))+(((-1.0)*x846*x847*x848))+(((-1.0)*r21*x844*x847))+((cj2*r20*x849))+(((-1.0)*r20*x844*x845))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((sj2*x845*x851))+(((-1.0)*x846*x854))+(((-1.0)*r21*x844*x853))+(((-1.0)*r20*x844*x849))+(((-1.0)*x846*x849*x850))+(((-1.0)*x846*x849*x851))+((sj2*x847*x848))+((sj2*x847*x852))+(((-1.0)*r20*x845*x846))+(((-1.0)*r21*x846*x847))+(((-1.0)*x846*x848*x853))+((sj2*x845*x850))), ((((-1.0)*x844*x854))+(((-1.0)*x846*x847*x852))+(((-1.0)*x844*x849*x851))+((cj2*r21*x853))+(((-1.0)*x844*x848*x853))+(((-1.0)*x845*x846*x850))+(((-1.0)*x845*x846*x851))+(((-1.0)*x844*x849*x850))+(((-1.0)*x846*x847*x848))+(((-1.0)*r21*x844*x847))+((cj2*r20*x849))+(((-1.0)*r20*x844*x845))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
tj3 = IKtan(j3);
{
IkReal evalcond[2];
IkReal x855=IKsin(j3);
IkReal x856=IKcos(j3);
IkReal x857=((1.0)*sj2);
IkReal x858=(cj2*x856);
IkReal x859=(cj1*x855);
IkReal x860=(sj1*x855);
evalcond[0]=((((-1.0)*sj1*x856*x857))+((cj1*x858))+(((-1.0)*cj2*x860))+(((-1.0)*x857*x859))+(((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
evalcond[1]=(((sj1*x858))+((cj5*gconst1*r11))+((gconst2*r00*sj5))+(((-1.0)*x857*x860))+((gconst1*r10*sj5))+((cj5*gconst2*r01))+((cj1*sj2*x856))+((cj2*x859)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
CheckValue<IkReal> x863 = IKatan2WithCheck(IkReal(((-1.0)*r12)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x863.valid){
continue;
}
IkReal x861=((-1.0)*(x863.value));
IkReal x862=x816;
sj0=gconst1;
cj0=gconst2;
j0=x861;
IkReal gconst0=x861;
IkReal gconst1=(r12*x862);
IkReal gconst2=(r02*x862);
j4eval[0]=((IKabs(((((-1.0)*cj5*r20))+((r21*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x866 = IKatan2WithCheck(IkReal(((-1.0)*r12)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x866.valid){
continue;
}
IkReal x864=((-1.0)*(x866.value));
IkReal x865=x816;
sj0=gconst1;
cj0=gconst2;
j0=x864;
IkReal gconst0=x864;
IkReal gconst1=(r12*x865);
IkReal gconst2=(r02*x865);
IkReal x867=cj5*cj5;
IkReal x868=r21*r21;
IkReal x869=((((-1.0)*x867*x868))+((x867*(r20*r20)))+(r22*r22)+(((-2.0)*cj5*r20*r21*sj5))+x868);
j4eval[0]=x869;
j4eval[1]=IKsign(x869);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x870=cj5*cj5;
IkReal x871=((1.0)*r22);
IkReal x872=((1.0)*gconst2);
IkReal x873=(r01*r21);
IkReal x874=(cj5*r20);
IkReal x875=(r21*sj5);
IkReal x876=(gconst1*r11);
IkReal x877=(gconst1*r10);
IkReal x878=(cj1*cj2*cj3);
IkReal x879=(r20*x870);
IkReal x880=(cj2*sj1*sj3);
IkReal x881=(cj1*sj2*sj3);
IkReal x882=(cj3*sj1*sj2);
CheckValue<IkReal> x883 = IKatan2WithCheck(IkReal(((((-1.0)*x871*x880))+(((-1.0)*x871*x882))+((r22*x878))+(((-1.0)*x871*x881)))),IkReal((((x875*x878))+(((-1.0)*x875*x882))+(((-1.0)*x875*x881))+((x874*x881))+(((-1.0)*x874*x878))+((x874*x882))+((x874*x880))+(((-1.0)*x875*x880)))),IKFAST_ATAN2_MAGTHRESH);
if(!x883.valid){
continue;
}
CheckValue<IkReal> x884=IKPowWithIntegerCheck(IKsign((((cj5*x875*x877))+((gconst2*r01*sj5*x874))+((gconst2*x870*x873))+(((-1.0)*gconst1*r12*x871))+((cj5*gconst2*r00*x875))+(((-1.0)*x877*x879))+(((-1.0)*r21*x876))+(((-1.0)*r00*x872*x879))+((r21*x870*x876))+((sj5*x874*x876))+(((-1.0)*x872*x873))+(((-1.0)*gconst2*r02*x871)))),-1);
if(!x884.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x883.value)+(((1.5707963267949)*(x884.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
tj4 = IKtan(j4);
{
IkReal evalcond[6];
IkReal x885=IKsin(j4);
IkReal x886=IKcos(j4);
IkReal x887=((1.0)*gconst1);
IkReal x888=((1.0)*gconst2);
IkReal x889=(sj1*sj2);
IkReal x890=(cj5*r20);
IkReal x891=(cj1*cj3);
IkReal x892=((1.0)*cj3);
IkReal x893=(cj5*r00);
IkReal x894=(r11*sj5);
IkReal x895=(cj2*sj1);
IkReal x896=(cj5*r10);
IkReal x897=(r21*sj5);
IkReal x898=(r12*x886);
IkReal x899=((1.0)*cj1*sj3);
IkReal x900=(r12*x885);
IkReal x901=(r02*x886);
IkReal x902=(gconst1*r01*sj5);
IkReal x903=(gconst1*x894);
IkReal x904=(r02*x885);
IkReal x905=(gconst2*r01*sj5);
IkReal x906=((1.0)*x885);
evalcond[0]=(((x885*x890))+((r22*x886))+(((-1.0)*x897*x906)));
evalcond[1]=((((-1.0)*cj2*x899))+(((-1.0)*x886*x897))+(((-1.0)*sj2*x891))+((sj3*x889))+(((-1.0)*x892*x895))+((x886*x890))+(((-1.0)*r22*x906)));
evalcond[2]=((((-1.0)*x886*x888*x894))+(((-1.0)*x886*x887*x893))+((gconst1*x904))+(((-1.0)*x888*x900))+((x886*x902))+((gconst2*x886*x896)));
evalcond[3]=(((x885*x905))+(((-1.0)*x885*x888*x893))+(((-1.0)*x888*x901))+((x885*x903))+(((-1.0)*x885*x887*x896))+(((-1.0)*x887*x898)));
evalcond[4]=((1.0)+(((-1.0)*x887*x901))+(((-1.0)*x885*x887*x893))+((x885*x902))+((gconst2*x885*x896))+(((-1.0)*x885*x888*x894))+((gconst2*x898)));
evalcond[5]=((((-1.0)*sj2*x899))+((gconst2*x904))+((x886*x903))+(((-1.0)*x889*x892))+((cj2*x891))+((gconst1*x900))+((x886*x905))+(((-1.0)*x886*x888*x893))+(((-1.0)*x886*x887*x896))+(((-1.0)*sj3*x895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x907=cj5*cj5;
IkReal x908=r21*r21;
IkReal x909=(r22*sj1);
IkReal x910=(sj2*sj3);
IkReal x911=(cj2*cj3);
IkReal x912=(cj5*r20);
IkReal x913=((1.0)*sj1);
IkReal x914=(r21*sj5);
IkReal x915=(cj1*cj3*sj2);
IkReal x916=((1.0)*cj1*cj2*sj3);
CheckValue<IkReal> x917=IKPowWithIntegerCheck(IKsign((((x907*(r20*r20)))+(((-2.0)*x912*x914))+(((-1.0)*x907*x908))+x908+(r22*r22))),-1);
if(!x917.valid){
continue;
}
CheckValue<IkReal> x918 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x916))+(((-1.0)*r22*x915))+((x909*x910))+(((-1.0)*x909*x911)))),IkReal((((x912*x915))+((sj1*x911*x912))+(((-1.0)*x910*x912*x913))+(((-1.0)*x911*x913*x914))+(((-1.0)*x914*x915))+((sj1*x910*x914))+((cj1*cj2*sj3*x912))+(((-1.0)*x914*x916)))),IKFAST_ATAN2_MAGTHRESH);
if(!x918.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x917.value)))+(x918.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
tj4 = IKtan(j4);
{
IkReal evalcond[6];
IkReal x919=IKsin(j4);
IkReal x920=IKcos(j4);
IkReal x921=((1.0)*gconst1);
IkReal x922=((1.0)*gconst2);
IkReal x923=(sj1*sj2);
IkReal x924=(cj5*r20);
IkReal x925=(cj1*cj3);
IkReal x926=((1.0)*cj3);
IkReal x927=(cj5*r00);
IkReal x928=(r11*sj5);
IkReal x929=(cj2*sj1);
IkReal x930=(cj5*r10);
IkReal x931=(r21*sj5);
IkReal x932=(r12*x920);
IkReal x933=((1.0)*cj1*sj3);
IkReal x934=(r12*x919);
IkReal x935=(r02*x920);
IkReal x936=(gconst1*r01*sj5);
IkReal x937=(gconst1*x928);
IkReal x938=(r02*x919);
IkReal x939=(gconst2*r01*sj5);
IkReal x940=((1.0)*x919);
evalcond[0]=((((-1.0)*x931*x940))+((r22*x920))+((x919*x924)));
evalcond[1]=(((sj3*x923))+(((-1.0)*r22*x940))+(((-1.0)*x920*x931))+(((-1.0)*x926*x929))+(((-1.0)*cj2*x933))+(((-1.0)*sj2*x925))+((x920*x924)));
evalcond[2]=(((gconst2*x920*x930))+((x920*x936))+(((-1.0)*x920*x922*x928))+(((-1.0)*x920*x921*x927))+(((-1.0)*x922*x934))+((gconst1*x938)));
evalcond[3]=((((-1.0)*x921*x932))+(((-1.0)*x919*x922*x927))+((x919*x937))+((x919*x939))+(((-1.0)*x922*x935))+(((-1.0)*x919*x921*x930)));
evalcond[4]=((1.0)+((x919*x936))+((gconst2*x919*x930))+(((-1.0)*x919*x921*x927))+(((-1.0)*x921*x935))+((gconst2*x932))+(((-1.0)*x919*x922*x928)));
evalcond[5]=((((-1.0)*sj3*x929))+(((-1.0)*x923*x926))+(((-1.0)*x920*x921*x930))+((gconst2*x938))+(((-1.0)*x920*x922*x927))+((gconst1*x934))+((x920*x937))+(((-1.0)*sj2*x933))+((cj2*x925))+((x920*x939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x941 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj5*r20))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x941.valid){
continue;
}
CheckValue<IkReal> x942=IKPowWithIntegerCheck(IKsign((((cj5*gconst1*r11))+((gconst2*r00*sj5))+((gconst1*r10*sj5))+((cj5*gconst2*r01)))),-1);
if(!x942.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x941.value)+(((1.5707963267949)*(x942.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
tj4 = IKtan(j4);
{
IkReal evalcond[6];
IkReal x943=IKsin(j4);
IkReal x944=IKcos(j4);
IkReal x945=((1.0)*gconst1);
IkReal x946=((1.0)*gconst2);
IkReal x947=(sj1*sj2);
IkReal x948=(cj5*r20);
IkReal x949=(cj1*cj3);
IkReal x950=((1.0)*cj3);
IkReal x951=(cj5*r00);
IkReal x952=(r11*sj5);
IkReal x953=(cj2*sj1);
IkReal x954=(cj5*r10);
IkReal x955=(r21*sj5);
IkReal x956=(r12*x944);
IkReal x957=((1.0)*cj1*sj3);
IkReal x958=(r12*x943);
IkReal x959=(r02*x944);
IkReal x960=(gconst1*r01*sj5);
IkReal x961=(gconst1*x952);
IkReal x962=(r02*x943);
IkReal x963=(gconst2*r01*sj5);
IkReal x964=((1.0)*x943);
evalcond[0]=(((r22*x944))+(((-1.0)*x955*x964))+((x943*x948)));
evalcond[1]=(((sj3*x947))+(((-1.0)*r22*x964))+(((-1.0)*x944*x955))+(((-1.0)*sj2*x949))+((x944*x948))+(((-1.0)*cj2*x957))+(((-1.0)*x950*x953)));
evalcond[2]=(((gconst1*x962))+(((-1.0)*x944*x945*x951))+((x944*x960))+((gconst2*x944*x954))+(((-1.0)*x944*x946*x952))+(((-1.0)*x946*x958)));
evalcond[3]=(((x943*x961))+(((-1.0)*x946*x959))+((x943*x963))+(((-1.0)*x945*x956))+(((-1.0)*x943*x945*x954))+(((-1.0)*x943*x946*x951)));
evalcond[4]=((1.0)+((gconst2*x943*x954))+(((-1.0)*x943*x945*x951))+(((-1.0)*x945*x959))+((gconst2*x956))+((x943*x960))+(((-1.0)*x943*x946*x952)));
evalcond[5]=((((-1.0)*x944*x946*x951))+(((-1.0)*x947*x950))+((x944*x963))+((gconst2*x962))+((gconst1*x958))+((x944*x961))+((cj2*x949))+(((-1.0)*sj3*x953))+(((-1.0)*x944*x945*x954))+(((-1.0)*sj2*x957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x965=((-1.0)*r12);
IkReal x967 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x967)==0){
continue;
}
IkReal x966=pow(x967,-0.5);
CheckValue<IkReal> x968 = IKatan2WithCheck(IkReal(x965),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x968.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x968.value))));
IkReal gconst4=(x965*x966);
IkReal gconst5=((-1.0)*r02*x966);
CheckValue<IkReal> x969 = IKatan2WithCheck(IkReal(((-1.0)*r12)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x969.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x969.value)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x970=(gconst5*r11);
IkReal x971=((8500.0)*sj1);
IkReal x972=(gconst4*r00);
IkReal x973=((20000.0)*pz);
IkReal x974=(gconst5*r10);
IkReal x975=(gconst4*r01);
IkReal x976=((7845.0)*cj1*sj2);
IkReal x977=((7845.0)*cj2*sj1);
CheckValue<IkReal> x978=IKPowWithIntegerCheck(IKsign(((((-1893.0)*gconst5*r02))+(((-1893.0)*gconst4*r12)))),-1);
if(!x978.valid){
continue;
}
CheckValue<IkReal> x979 = IKatan2WithCheck(IkReal(((((-1.0)*x970*x977))+((x975*x977))+((x973*x975))+(((-1.0)*x970*x971))+((x971*x975))+(((-1.0)*x970*x973))+((x975*x976))+(((-1.0)*x970*x976)))),IkReal(((((-1.0)*x972*x977))+(((-1.0)*x972*x973))+((x974*x976))+((x974*x977))+(((-1.0)*x971*x972))+(((-1.0)*x972*x976))+((x971*x974))+((x973*x974)))),IKFAST_ATAN2_MAGTHRESH);
if(!x979.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x978.value)))+(x979.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
tj5 = IKtan(j5);
{
IkReal evalcond[4];
IkReal x980=IKcos(j5);
IkReal x981=IKsin(j5);
IkReal x982=((0.39225)*sj1);
IkReal x983=((0.09465)*r11);
IkReal x984=((0.09465)*gconst5);
IkReal x985=((0.09465)*gconst4);
IkReal x986=((1.0)*gconst4);
IkReal x987=((0.09465)*r01);
IkReal x988=((1.0)*gconst5);
IkReal x989=((0.39225)*cj1);
IkReal x990=(r00*x981);
IkReal x991=(gconst4*x980);
IkReal x992=(gconst5*x980);
IkReal x993=(r10*x981);
evalcond[0]=(((sj2*x989))+(((0.425)*sj1))+pz+((cj2*x982))+(((0.09465)*r20*x981))+(((0.09465)*r21*x980)));
evalcond[1]=((((-1.0)*x988*x993))+(((-1.0)*r11*x980*x988))+((r01*x991))+((gconst4*x990)));
evalcond[2]=((0.10915)+(((-1.0)*x985*x990))+((x984*x993))+(((-1.0)*r01*x980*x985))+(((-1.0)*px*x986))+((x983*x992))+((gconst5*py)));
evalcond[3]=((((-1.0)*x983*x991))+(((-1.0)*x984*x990))+(((-1.0)*py*x986))+(((-1.0)*r01*x980*x984))+((sj2*x982))+(((-1.0)*px*x988))+(((-1.0)*x985*x993))+(((-1.0)*cj2*x989))+(((-0.425)*cj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x994=(gconst4*r10);
IkReal x995=((1.0)*r20);
IkReal x996=(cj1*cj2);
IkReal x997=((1.0)*cj5);
IkReal x998=(gconst5*r01);
IkReal x999=(gconst5*r00);
IkReal x1000=(cj5*sj2);
IkReal x1001=(cj2*sj1);
IkReal x1002=((1.0)*sj5);
IkReal x1003=(cj1*sj2);
IkReal x1004=(gconst4*r11);
IkReal x1005=(sj1*sj2*sj5);
IkReal x1006=(sj1*x1004);
IkReal x1007=(sj5*x1003);
if( IKabs((((x1005*x999))+((sj1*x1000*x998))+((x1005*x994))+(((-1.0)*x1002*x994*x996))+(((-1.0)*x1004*x996*x997))+(((-1.0)*r21*x1003*x997))+(((-1.0)*sj5*x1001*x995))+(((-1.0)*x1002*x996*x999))+(((-1.0)*x996*x997*x998))+(((-1.0)*r21*x1001*x997))+((x1000*x1006))+(((-1.0)*x1007*x995)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj5*x996))+(((-1.0)*x1003*x1004*x997))+((cj5*r21*x996))+(((-1.0)*r21*sj1*sj2*x997))+(((-1.0)*x1003*x997*x998))+(((-1.0)*x1001*x1002*x999))+(((-1.0)*x1001*x997*x998))+(((-1.0)*x1001*x1004*x997))+(((-1.0)*x1002*x1003*x999))+(((-1.0)*x1005*x995))+(((-1.0)*x1001*x1002*x994))+(((-1.0)*x1002*x1003*x994)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1005*x999))+((sj1*x1000*x998))+((x1005*x994))+(((-1.0)*x1002*x994*x996))+(((-1.0)*x1004*x996*x997))+(((-1.0)*r21*x1003*x997))+(((-1.0)*sj5*x1001*x995))+(((-1.0)*x1002*x996*x999))+(((-1.0)*x996*x997*x998))+(((-1.0)*r21*x1001*x997))+((x1000*x1006))+(((-1.0)*x1007*x995))))+IKsqr((((r20*sj5*x996))+(((-1.0)*x1003*x1004*x997))+((cj5*r21*x996))+(((-1.0)*r21*sj1*sj2*x997))+(((-1.0)*x1003*x997*x998))+(((-1.0)*x1001*x1002*x999))+(((-1.0)*x1001*x997*x998))+(((-1.0)*x1001*x1004*x997))+(((-1.0)*x1002*x1003*x999))+(((-1.0)*x1005*x995))+(((-1.0)*x1001*x1002*x994))+(((-1.0)*x1002*x1003*x994))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((x1005*x999))+((sj1*x1000*x998))+((x1005*x994))+(((-1.0)*x1002*x994*x996))+(((-1.0)*x1004*x996*x997))+(((-1.0)*r21*x1003*x997))+(((-1.0)*sj5*x1001*x995))+(((-1.0)*x1002*x996*x999))+(((-1.0)*x996*x997*x998))+(((-1.0)*r21*x1001*x997))+((x1000*x1006))+(((-1.0)*x1007*x995))), (((r20*sj5*x996))+(((-1.0)*x1003*x1004*x997))+((cj5*r21*x996))+(((-1.0)*r21*sj1*sj2*x997))+(((-1.0)*x1003*x997*x998))+(((-1.0)*x1001*x1002*x999))+(((-1.0)*x1001*x997*x998))+(((-1.0)*x1001*x1004*x997))+(((-1.0)*x1002*x1003*x999))+(((-1.0)*x1005*x995))+(((-1.0)*x1001*x1002*x994))+(((-1.0)*x1002*x1003*x994))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
tj3 = IKtan(j3);
{
IkReal evalcond[2];
IkReal x1008=IKsin(j3);
IkReal x1009=IKcos(j3);
IkReal x1010=((1.0)*sj2);
IkReal x1011=(cj2*x1009);
IkReal x1012=(cj1*x1008);
IkReal x1013=(sj1*x1008);
evalcond[0]=((((-1.0)*sj1*x1009*x1010))+(((-1.0)*cj2*x1013))+(((-1.0)*x1010*x1012))+(((-1.0)*cj5*r21))+((cj1*x1011))+(((-1.0)*r20*sj5)));
evalcond[1]=(((gconst4*r10*sj5))+(((-1.0)*x1010*x1013))+((cj1*sj2*x1009))+((cj5*gconst5*r01))+((sj1*x1011))+((cj2*x1012))+((gconst5*r00*sj5))+((cj5*gconst4*r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
IkReal x1014=((-1.0)*r12);
CheckValue<IkReal> x1017 = IKatan2WithCheck(IkReal(x1014),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1017.valid){
continue;
}
IkReal x1015=((1.0)*(x1017.value));
IkReal x1016=x966;
sj0=gconst4;
cj0=gconst5;
j0=((3.14159265)+(((-1.0)*x1015)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x1015)));
IkReal gconst4=(x1014*x1016);
IkReal gconst5=((-1.0)*r02*x1016);
j4eval[0]=((IKabs(((((-1.0)*cj5*r20))+((r21*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1018=((-1.0)*r12);
CheckValue<IkReal> x1021 = IKatan2WithCheck(IkReal(x1018),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1021.valid){
continue;
}
IkReal x1019=((1.0)*(x1021.value));
IkReal x1020=x966;
sj0=gconst4;
cj0=gconst5;
j0=((3.14159265)+(((-1.0)*x1019)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x1019)));
IkReal gconst4=(x1018*x1020);
IkReal gconst5=((-1.0)*r02*x1020);
IkReal x1022=cj5*cj5;
IkReal x1023=r21*r21;
IkReal x1024=(x1023+(r22*r22)+(((-2.0)*cj5*r20*r21*sj5))+((x1022*(r20*r20)))+(((-1.0)*x1022*x1023)));
j4eval[0]=x1024;
j4eval[1]=IKsign(x1024);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1025=cj5*cj5;
IkReal x1026=(cj5*r20);
IkReal x1027=(gconst4*r11);
IkReal x1028=((1.0)*r21);
IkReal x1029=(r21*sj5);
IkReal x1030=(gconst4*r10);
IkReal x1031=((1.0)*r22);
IkReal x1032=(gconst5*r00);
IkReal x1033=(cj1*cj2*cj3);
IkReal x1034=(gconst5*r01*r21);
IkReal x1035=(cj2*sj1*sj3);
IkReal x1036=(cj1*sj2*sj3);
IkReal x1037=(cj3*sj1*sj2);
IkReal x1038=((1.0)*r20*x1025);
CheckValue<IkReal> x1039=IKPowWithIntegerCheck(IKsign((((r21*x1025*x1027))+(((-1.0)*x1027*x1028))+(((-1.0)*gconst5*r02*x1031))+(((-1.0)*gconst4*r12*x1031))+((cj5*x1029*x1030))+((cj5*x1029*x1032))+((sj5*x1026*x1027))+(((-1.0)*gconst5*r01*x1028))+(((-1.0)*x1032*x1038))+((x1025*x1034))+((gconst5*r01*sj5*x1026))+(((-1.0)*x1030*x1038)))),-1);
if(!x1039.valid){
continue;
}
CheckValue<IkReal> x1040 = IKatan2WithCheck(IkReal(((((-1.0)*x1031*x1035))+(((-1.0)*x1031*x1037))+(((-1.0)*x1031*x1036))+((r22*x1033)))),IkReal(((((-1.0)*sj5*x1028*x1035))+((x1026*x1035))+((x1029*x1033))+(((-1.0)*sj5*x1028*x1036))+((x1026*x1036))+(((-1.0)*x1026*x1033))+(((-1.0)*sj5*x1028*x1037))+((x1026*x1037)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1040.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1039.value)))+(x1040.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
tj4 = IKtan(j4);
{
IkReal evalcond[6];
IkReal x1041=IKsin(j4);
IkReal x1042=IKcos(j4);
IkReal x1043=(r11*sj5);
IkReal x1044=(cj5*r10);
IkReal x1045=(sj1*sj2);
IkReal x1046=(cj5*r20);
IkReal x1047=(cj1*cj3);
IkReal x1048=(gconst4*r12);
IkReal x1049=((1.0)*cj3);
IkReal x1050=(cj2*sj1);
IkReal x1051=(r21*sj5);
IkReal x1052=(r01*sj5);
IkReal x1053=((1.0)*cj1*sj3);
IkReal x1054=((1.0)*x1041);
IkReal x1055=(cj5*gconst4*r00);
IkReal x1056=((1.0)*x1042);
IkReal x1057=(gconst5*x1042);
IkReal x1058=(gconst5*x1041);
IkReal x1059=(gconst4*x1052);
IkReal x1060=(cj5*gconst5*r00);
IkReal x1061=(gconst4*x1041);
evalcond[0]=(((x1041*x1046))+((r22*x1042))+(((-1.0)*x1051*x1054)));
evalcond[1]=((((-1.0)*r22*x1054))+(((-1.0)*x1051*x1056))+(((-1.0)*x1049*x1050))+(((-1.0)*sj2*x1047))+((x1042*x1046))+((sj3*x1045))+(((-1.0)*cj2*x1053)));
evalcond[2]=((((-1.0)*gconst5*r12*x1054))+((r02*x1061))+(((-1.0)*x1055*x1056))+(((-1.0)*gconst5*x1043*x1056))+((x1044*x1057))+((x1042*x1059)));
evalcond[3]=((((-1.0)*x1054*x1060))+(((-1.0)*x1048*x1056))+((x1052*x1058))+(((-1.0)*gconst4*x1044*x1054))+(((-1.0)*gconst5*r02*x1056))+((x1043*x1061)));
evalcond[4]=((1.0)+(((-1.0)*gconst4*r02*x1056))+((x1044*x1058))+((x1041*x1059))+((r12*x1057))+(((-1.0)*gconst5*x1043*x1054))+(((-1.0)*x1054*x1055)));
evalcond[5]=((((-1.0)*x1045*x1049))+((x1041*x1048))+((cj2*x1047))+((x1052*x1057))+((r02*x1058))+(((-1.0)*sj3*x1050))+((gconst4*x1042*x1043))+(((-1.0)*gconst4*x1044*x1056))+(((-1.0)*x1056*x1060))+(((-1.0)*sj2*x1053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1062=cj5*cj5;
IkReal x1063=r21*r21;
IkReal x1064=(r22*sj1);
IkReal x1065=(sj2*sj3);
IkReal x1066=(cj2*cj3);
IkReal x1067=(cj5*r20);
IkReal x1068=((1.0)*sj1);
IkReal x1069=(r21*sj5);
IkReal x1070=(cj1*cj3*sj2);
IkReal x1071=((1.0)*cj1*cj2*sj3);
CheckValue<IkReal> x1072 = IKatan2WithCheck(IkReal((((x1064*x1065))+(((-1.0)*r22*x1070))+(((-1.0)*x1064*x1066))+(((-1.0)*r22*x1071)))),IkReal(((((-1.0)*x1066*x1068*x1069))+((sj1*x1066*x1067))+(((-1.0)*x1069*x1071))+((sj1*x1065*x1069))+(((-1.0)*x1069*x1070))+((x1067*x1070))+((cj1*cj2*sj3*x1067))+(((-1.0)*x1065*x1067*x1068)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1072.valid){
continue;
}
CheckValue<IkReal> x1073=IKPowWithIntegerCheck(IKsign((x1063+(((-2.0)*x1067*x1069))+((x1062*(r20*r20)))+(r22*r22)+(((-1.0)*x1062*x1063)))),-1);
if(!x1073.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1072.value)+(((1.5707963267949)*(x1073.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
tj4 = IKtan(j4);
{
IkReal evalcond[6];
IkReal x1074=IKsin(j4);
IkReal x1075=IKcos(j4);
IkReal x1076=(r11*sj5);
IkReal x1077=(cj5*r10);
IkReal x1078=(sj1*sj2);
IkReal x1079=(cj5*r20);
IkReal x1080=(cj1*cj3);
IkReal x1081=(gconst4*r12);
IkReal x1082=((1.0)*cj3);
IkReal x1083=(cj2*sj1);
IkReal x1084=(r21*sj5);
IkReal x1085=(r01*sj5);
IkReal x1086=((1.0)*cj1*sj3);
IkReal x1087=((1.0)*x1074);
IkReal x1088=(cj5*gconst4*r00);
IkReal x1089=((1.0)*x1075);
IkReal x1090=(gconst5*x1075);
IkReal x1091=(gconst5*x1074);
IkReal x1092=(gconst4*x1085);
IkReal x1093=(cj5*gconst5*r00);
IkReal x1094=(gconst4*x1074);
evalcond[0]=(((r22*x1075))+((x1074*x1079))+(((-1.0)*x1084*x1087)));
evalcond[1]=((((-1.0)*r22*x1087))+(((-1.0)*sj2*x1080))+(((-1.0)*cj2*x1086))+((x1075*x1079))+((sj3*x1078))+(((-1.0)*x1084*x1089))+(((-1.0)*x1082*x1083)));
evalcond[2]=((((-1.0)*gconst5*r12*x1087))+(((-1.0)*x1088*x1089))+((r02*x1094))+((x1077*x1090))+(((-1.0)*gconst5*x1076*x1089))+((x1075*x1092)));
evalcond[3]=(((x1076*x1094))+((x1085*x1091))+(((-1.0)*x1081*x1089))+(((-1.0)*x1087*x1093))+(((-1.0)*gconst4*x1077*x1087))+(((-1.0)*gconst5*r02*x1089)));
evalcond[4]=((1.0)+(((-1.0)*gconst5*x1076*x1087))+((x1077*x1091))+(((-1.0)*gconst4*r02*x1089))+((r12*x1090))+(((-1.0)*x1087*x1088))+((x1074*x1092)));
evalcond[5]=(((x1085*x1090))+(((-1.0)*gconst4*x1077*x1089))+(((-1.0)*sj2*x1086))+(((-1.0)*sj3*x1083))+((cj2*x1080))+((x1074*x1081))+((gconst4*x1075*x1076))+(((-1.0)*x1078*x1082))+(((-1.0)*x1089*x1093))+((r02*x1091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1095=IKPowWithIntegerCheck(IKsign((((gconst4*r10*sj5))+((cj5*gconst5*r01))+((gconst5*r00*sj5))+((cj5*gconst4*r11)))),-1);
if(!x1095.valid){
continue;
}
CheckValue<IkReal> x1096 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj5*r20))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1095.value)))+(x1096.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
tj4 = IKtan(j4);
{
IkReal evalcond[6];
IkReal x1097=IKsin(j4);
IkReal x1098=IKcos(j4);
IkReal x1099=(r11*sj5);
IkReal x1100=(cj5*r10);
IkReal x1101=(sj1*sj2);
IkReal x1102=(cj5*r20);
IkReal x1103=(cj1*cj3);
IkReal x1104=(gconst4*r12);
IkReal x1105=((1.0)*cj3);
IkReal x1106=(cj2*sj1);
IkReal x1107=(r21*sj5);
IkReal x1108=(r01*sj5);
IkReal x1109=((1.0)*cj1*sj3);
IkReal x1110=((1.0)*x1097);
IkReal x1111=(cj5*gconst4*r00);
IkReal x1112=((1.0)*x1098);
IkReal x1113=(gconst5*x1098);
IkReal x1114=(gconst5*x1097);
IkReal x1115=(gconst4*x1108);
IkReal x1116=(cj5*gconst5*r00);
IkReal x1117=(gconst4*x1097);
evalcond[0]=((((-1.0)*x1107*x1110))+((r22*x1098))+((x1097*x1102)));
evalcond[1]=(((sj3*x1101))+(((-1.0)*x1105*x1106))+(((-1.0)*x1107*x1112))+((x1098*x1102))+(((-1.0)*cj2*x1109))+(((-1.0)*r22*x1110))+(((-1.0)*sj2*x1103)));
evalcond[2]=((((-1.0)*x1111*x1112))+(((-1.0)*gconst5*x1099*x1112))+((x1098*x1115))+(((-1.0)*gconst5*r12*x1110))+((x1100*x1113))+((r02*x1117)));
evalcond[3]=((((-1.0)*gconst4*x1100*x1110))+(((-1.0)*x1110*x1116))+(((-1.0)*x1104*x1112))+((x1099*x1117))+((x1108*x1114))+(((-1.0)*gconst5*r02*x1112)));
evalcond[4]=((1.0)+((r12*x1113))+(((-1.0)*gconst4*r02*x1112))+((x1097*x1115))+(((-1.0)*gconst5*x1099*x1110))+(((-1.0)*x1110*x1111))+((x1100*x1114)));
evalcond[5]=((((-1.0)*x1101*x1105))+((cj2*x1103))+((gconst4*x1098*x1099))+(((-1.0)*gconst4*x1100*x1112))+((x1108*x1113))+(((-1.0)*x1112*x1116))+((x1097*x1104))+(((-1.0)*sj2*x1109))+((r02*x1114))+(((-1.0)*sj3*x1106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1118=((-1.0)*r12);
IkReal x1120 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1120)==0){
continue;
}
IkReal x1119=pow(x1120,-0.5);
CheckValue<IkReal> x1121 = IKatan2WithCheck(IkReal(((-1.0)*r02)),IkReal(x1118),IKFAST_ATAN2_MAGTHRESH);
if(!x1121.valid){
continue;
}
IkReal gconst6=((-1.0)*(x1121.value));
IkReal gconst7=(r02*x1119);
IkReal gconst8=(x1118*x1119);
CheckValue<IkReal> x1122 = IKatan2WithCheck(IkReal(((-1.0)*r02)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x1122.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j0+(x1122.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1123=gconst7*gconst7;
IkReal x1124=gconst8*gconst8;
IkReal x1125=((0.04022625)*cj1);
IkReal x1126=((0.0371264625)*cj1*cj2);
IkReal x1127=((0.0371264625)*sj1*sj2);
IkReal x1128=(gconst7*x1127);
IkReal x1129=(((gconst8*x1127))+(((0.0103310475)*gconst7)));
IkReal x1130=((((0.09465)*x1123))+(((0.09465)*x1124)));
IkReal x1131=(((gconst8*x1125))+((gconst8*x1126)));
IkReal x1132=(((gconst7*x1125))+((gconst7*x1126))+(((0.0103310475)*gconst8)));
CheckValue<IkReal> x1133 = IKatan2WithCheck(IkReal((((r01*(((((-1.0)*x1132))+x1128))))+((r11*(((((-1.0)*x1129))+x1131))))+(((-1.0)*rxp1_2*x1130)))),IkReal((((r00*((x1132+(((-1.0)*x1128))))))+((rxp0_2*x1130))+((r10*(((((-1.0)*x1131))+x1129)))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1133.valid){
continue;
}
CheckValue<IkReal> x1134=IKPowWithIntegerCheck(IKsign((r22*(((((-0.0089586225)*x1123))+(((-0.0089586225)*x1124)))))),-1);
if(!x1134.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1133.value)+(((1.5707963267949)*(x1134.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
tj5 = IKtan(j5);
{
IkReal evalcond[4];
IkReal x1135=IKsin(j5);
IkReal x1136=IKcos(j5);
IkReal x1137=((1.0)*gconst7);
IkReal x1138=((0.39225)*sj1);
IkReal x1139=((0.09465)*gconst8);
IkReal x1140=((0.09465)*gconst7);
IkReal x1141=((1.0)*gconst8);
IkReal x1142=((0.39225)*cj1);
IkReal x1143=(r11*x1136);
IkReal x1144=(r10*x1135);
IkReal x1145=(r00*x1135);
IkReal x1146=(r01*x1136);
evalcond[0]=(((sj2*x1142))+(((0.425)*sj1))+(((0.09465)*r20*x1135))+(((0.09465)*r21*x1136))+pz+((cj2*x1138)));
evalcond[1]=(((gconst7*x1146))+(((-1.0)*x1141*x1144))+(((-1.0)*x1141*x1143))+((gconst7*x1145)));
evalcond[2]=((0.10915)+(((-1.0)*px*x1137))+((x1139*x1144))+(((-1.0)*x1140*x1146))+((x1139*x1143))+((gconst8*py))+(((-1.0)*x1140*x1145)));
evalcond[3]=((((-1.0)*x1140*x1144))+((sj2*x1138))+(((-1.0)*x1139*x1146))+(((-1.0)*x1139*x1145))+(((-1.0)*py*x1137))+(((-1.0)*x1140*x1143))+(((-1.0)*cj2*x1142))+(((-1.0)*px*x1141))+(((-0.425)*cj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1147=(r20*sj5);
IkReal x1148=(sj1*sj2);
IkReal x1149=(cj1*cj2);
IkReal x1150=(cj5*r21);
IkReal x1151=(cj5*gconst8*r01);
IkReal x1152=((1.0)*cj2*sj1);
IkReal x1153=(cj5*gconst7*r11);
IkReal x1154=(gconst8*r00*sj5);
IkReal x1155=((1.0)*cj1*sj2);
IkReal x1156=(gconst7*r10*sj5);
if( IKabs(((((-1.0)*x1149*x1156))+((x1148*x1156))+(((-1.0)*x1147*x1155))+(((-1.0)*x1147*x1152))+(((-1.0)*x1150*x1155))+(((-1.0)*x1150*x1152))+(((-1.0)*x1149*x1154))+((x1148*x1154))+(((-1.0)*x1149*x1151))+((x1148*x1151))+(((-1.0)*x1149*x1153))+((x1148*x1153)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1151*x1152))+(((-1.0)*x1148*x1150))+(((-1.0)*x1152*x1156))+(((-1.0)*x1153*x1155))+(((-1.0)*x1151*x1155))+(((-1.0)*x1152*x1153))+((x1149*x1150))+(((-1.0)*x1147*x1148))+(((-1.0)*x1152*x1154))+(((-1.0)*x1154*x1155))+(((-1.0)*x1155*x1156))+((x1147*x1149)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1149*x1156))+((x1148*x1156))+(((-1.0)*x1147*x1155))+(((-1.0)*x1147*x1152))+(((-1.0)*x1150*x1155))+(((-1.0)*x1150*x1152))+(((-1.0)*x1149*x1154))+((x1148*x1154))+(((-1.0)*x1149*x1151))+((x1148*x1151))+(((-1.0)*x1149*x1153))+((x1148*x1153))))+IKsqr(((((-1.0)*x1151*x1152))+(((-1.0)*x1148*x1150))+(((-1.0)*x1152*x1156))+(((-1.0)*x1153*x1155))+(((-1.0)*x1151*x1155))+(((-1.0)*x1152*x1153))+((x1149*x1150))+(((-1.0)*x1147*x1148))+(((-1.0)*x1152*x1154))+(((-1.0)*x1154*x1155))+(((-1.0)*x1155*x1156))+((x1147*x1149))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x1149*x1156))+((x1148*x1156))+(((-1.0)*x1147*x1155))+(((-1.0)*x1147*x1152))+(((-1.0)*x1150*x1155))+(((-1.0)*x1150*x1152))+(((-1.0)*x1149*x1154))+((x1148*x1154))+(((-1.0)*x1149*x1151))+((x1148*x1151))+(((-1.0)*x1149*x1153))+((x1148*x1153))), ((((-1.0)*x1151*x1152))+(((-1.0)*x1148*x1150))+(((-1.0)*x1152*x1156))+(((-1.0)*x1153*x1155))+(((-1.0)*x1151*x1155))+(((-1.0)*x1152*x1153))+((x1149*x1150))+(((-1.0)*x1147*x1148))+(((-1.0)*x1152*x1154))+(((-1.0)*x1154*x1155))+(((-1.0)*x1155*x1156))+((x1147*x1149))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
tj3 = IKtan(j3);
{
IkReal evalcond[2];
IkReal x1157=IKsin(j3);
IkReal x1158=IKcos(j3);
IkReal x1159=((1.0)*sj2);
IkReal x1160=(cj2*x1158);
IkReal x1161=(cj1*x1157);
IkReal x1162=(sj1*x1157);
evalcond[0]=(((cj1*x1160))+(((-1.0)*x1159*x1161))+(((-1.0)*cj5*r21))+(((-1.0)*r20*sj5))+(((-1.0)*sj1*x1158*x1159))+(((-1.0)*cj2*x1162)));
evalcond[1]=(((cj5*gconst7*r11))+((sj1*x1160))+((gconst7*r10*sj5))+((gconst8*r00*sj5))+((cj1*sj2*x1158))+((cj2*x1161))+(((-1.0)*x1159*x1162))+((cj5*gconst8*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
IkReal x1163=((-1.0)*r12);
IkReal x1164=x1119;
CheckValue<IkReal> x1166 = IKatan2WithCheck(IkReal(((-1.0)*r02)),IkReal(x1163),IKFAST_ATAN2_MAGTHRESH);
if(!x1166.valid){
continue;
}
IkReal x1165=((-1.0)*(x1166.value));
sj0=gconst7;
cj0=gconst8;
j0=x1165;
IkReal gconst6=x1165;
IkReal gconst7=(r02*x1164);
IkReal gconst8=(x1163*x1164);
j4eval[0]=((IKabs(((((-1.0)*cj5*r20))+((r21*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1167=((-1.0)*r12);
IkReal x1168=x1119;
CheckValue<IkReal> x1170 = IKatan2WithCheck(IkReal(((-1.0)*r02)),IkReal(x1167),IKFAST_ATAN2_MAGTHRESH);
if(!x1170.valid){
continue;
}
IkReal x1169=((-1.0)*(x1170.value));
sj0=gconst7;
cj0=gconst8;
j0=x1169;
IkReal gconst6=x1169;
IkReal gconst7=(r02*x1168);
IkReal gconst8=(x1167*x1168);
IkReal x1171=cj5*cj5;
IkReal x1172=r21*r21;
IkReal x1173=(((x1171*(r20*r20)))+(r22*r22)+(((-2.0)*cj5*r20*r21*sj5))+(((-1.0)*x1171*x1172))+x1172);
j4eval[0]=x1173;
j4eval[1]=IKsign(x1173);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1174=cj5*cj5;
IkReal x1175=(cj5*r20);
IkReal x1176=((1.0)*r21);
IkReal x1177=(gconst8*r01);
IkReal x1178=(gconst7*r10);
IkReal x1179=(gconst7*r11);
IkReal x1180=(r21*sj5);
IkReal x1181=((1.0)*r22);
IkReal x1182=(cj5*gconst8*sj5);
IkReal x1183=(cj1*cj2*cj3);
IkReal x1184=(cj2*sj1*sj3);
IkReal x1185=(cj1*sj2*sj3);
IkReal x1186=(cj3*sj1*sj2);
IkReal x1187=(r21*x1174);
IkReal x1188=((1.0)*r20*x1174);
CheckValue<IkReal> x1189=IKPowWithIntegerCheck(IKsign((((x1177*x1187))+((cj5*x1178*x1180))+((sj5*x1175*x1179))+((cj5*gconst8*r00*x1180))+(((-1.0)*gconst7*r12*x1181))+(((-1.0)*gconst8*r02*x1181))+(((-1.0)*x1178*x1188))+(((-1.0)*x1176*x1177))+(((-1.0)*x1176*x1179))+(((-1.0)*gconst8*r00*x1188))+((sj5*x1175*x1177))+((x1179*x1187)))),-1);
if(!x1189.valid){
continue;
}
CheckValue<IkReal> x1190 = IKatan2WithCheck(IkReal(((((-1.0)*x1181*x1185))+((r22*x1183))+(((-1.0)*x1181*x1184))+(((-1.0)*x1181*x1186)))),IkReal((((x1175*x1186))+((x1175*x1185))+(((-1.0)*sj5*x1176*x1184))+((x1180*x1183))+(((-1.0)*sj5*x1176*x1186))+(((-1.0)*sj5*x1176*x1185))+(((-1.0)*x1175*x1183))+((x1175*x1184)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1190.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1189.value)))+(x1190.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
tj4 = IKtan(j4);
{
IkReal evalcond[6];
IkReal x1191=IKsin(j4);
IkReal x1192=IKcos(j4);
IkReal x1193=((1.0)*r02);
IkReal x1194=(r01*sj5);
IkReal x1195=(gconst8*r12);
IkReal x1196=(cj5*r10);
IkReal x1197=(sj1*sj2);
IkReal x1198=(cj5*r20);
IkReal x1199=(cj1*cj3);
IkReal x1200=(r11*sj5);
IkReal x1201=((1.0)*cj3);
IkReal x1202=(cj2*sj1);
IkReal x1203=(r21*sj5);
IkReal x1204=(gconst7*x1192);
IkReal x1205=((1.0)*cj1*sj3);
IkReal x1206=((1.0)*cj5*r00);
IkReal x1207=(gconst7*x1191);
IkReal x1208=((1.0)*x1191);
IkReal x1209=(gconst8*x1192);
IkReal x1210=(gconst8*x1191);
evalcond[0]=(((r22*x1192))+((x1191*x1198))+(((-1.0)*x1203*x1208)));
evalcond[1]=(((x1192*x1198))+(((-1.0)*x1201*x1202))+(((-1.0)*x1192*x1203))+(((-1.0)*r22*x1208))+(((-1.0)*sj2*x1199))+(((-1.0)*cj2*x1205))+((sj3*x1197)));
evalcond[2]=((((-1.0)*x1200*x1209))+(((-1.0)*x1204*x1206))+(((-1.0)*x1195*x1208))+((x1196*x1209))+((x1194*x1204))+((r02*x1207)));
evalcond[3]=((((-1.0)*x1193*x1209))+(((-1.0)*x1206*x1210))+(((-1.0)*r12*x1204))+((x1200*x1207))+(((-1.0)*x1196*x1207))+((x1194*x1210)));
evalcond[4]=((1.0)+((x1194*x1207))+(((-1.0)*gconst8*x1200*x1208))+(((-1.0)*x1193*x1204))+((x1192*x1195))+(((-1.0)*x1206*x1207))+((x1196*x1210)));
evalcond[5]=(((r02*x1210))+((x1194*x1209))+(((-1.0)*x1206*x1209))+(((-1.0)*x1197*x1201))+((r12*x1207))+(((-1.0)*sj2*x1205))+(((-1.0)*x1196*x1204))+((cj2*x1199))+((x1200*x1204))+(((-1.0)*sj3*x1202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1211=cj5*cj5;
IkReal x1212=r21*r21;
IkReal x1213=(r22*sj1);
IkReal x1214=(sj2*sj3);
IkReal x1215=(cj2*cj3);
IkReal x1216=(cj5*r20);
IkReal x1217=((1.0)*sj1);
IkReal x1218=(r21*sj5);
IkReal x1219=(cj1*cj3*sj2);
IkReal x1220=((1.0)*cj1*cj2*sj3);
CheckValue<IkReal> x1221=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1211*x1212))+(((-2.0)*x1216*x1218))+(r22*r22)+((x1211*(r20*r20)))+x1212)),-1);
if(!x1221.valid){
continue;
}
CheckValue<IkReal> x1222 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1220))+(((-1.0)*x1213*x1215))+((x1213*x1214))+(((-1.0)*r22*x1219)))),IkReal(((((-1.0)*x1214*x1216*x1217))+((sj1*x1215*x1216))+(((-1.0)*x1218*x1219))+(((-1.0)*x1218*x1220))+((x1216*x1219))+((cj1*cj2*sj3*x1216))+(((-1.0)*x1215*x1217*x1218))+((sj1*x1214*x1218)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1222.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1221.value)))+(x1222.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
tj4 = IKtan(j4);
{
IkReal evalcond[6];
IkReal x1223=IKsin(j4);
IkReal x1224=IKcos(j4);
IkReal x1225=((1.0)*r02);
IkReal x1226=(r01*sj5);
IkReal x1227=(gconst8*r12);
IkReal x1228=(cj5*r10);
IkReal x1229=(sj1*sj2);
IkReal x1230=(cj5*r20);
IkReal x1231=(cj1*cj3);
IkReal x1232=(r11*sj5);
IkReal x1233=((1.0)*cj3);
IkReal x1234=(cj2*sj1);
IkReal x1235=(r21*sj5);
IkReal x1236=(gconst7*x1224);
IkReal x1237=((1.0)*cj1*sj3);
IkReal x1238=((1.0)*cj5*r00);
IkReal x1239=(gconst7*x1223);
IkReal x1240=((1.0)*x1223);
IkReal x1241=(gconst8*x1224);
IkReal x1242=(gconst8*x1223);
evalcond[0]=(((x1223*x1230))+(((-1.0)*x1235*x1240))+((r22*x1224)));
evalcond[1]=(((sj3*x1229))+(((-1.0)*x1233*x1234))+(((-1.0)*cj2*x1237))+((x1224*x1230))+(((-1.0)*r22*x1240))+(((-1.0)*sj2*x1231))+(((-1.0)*x1224*x1235)));
evalcond[2]=((((-1.0)*x1236*x1238))+(((-1.0)*x1227*x1240))+((x1228*x1241))+((x1226*x1236))+(((-1.0)*x1232*x1241))+((r02*x1239)));
evalcond[3]=((((-1.0)*r12*x1236))+((x1226*x1242))+(((-1.0)*x1238*x1242))+(((-1.0)*x1225*x1241))+(((-1.0)*x1228*x1239))+((x1232*x1239)));
evalcond[4]=((1.0)+(((-1.0)*gconst8*x1232*x1240))+(((-1.0)*x1238*x1239))+((x1228*x1242))+(((-1.0)*x1225*x1236))+((x1224*x1227))+((x1226*x1239)));
evalcond[5]=(((r02*x1242))+((x1226*x1241))+(((-1.0)*x1228*x1236))+(((-1.0)*x1238*x1241))+((cj2*x1231))+(((-1.0)*sj2*x1237))+((x1232*x1236))+(((-1.0)*x1229*x1233))+(((-1.0)*sj3*x1234))+((r12*x1239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1243 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj5*r20))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1243.valid){
continue;
}
CheckValue<IkReal> x1244=IKPowWithIntegerCheck(IKsign((((cj5*gconst7*r11))+((gconst7*r10*sj5))+((gconst8*r00*sj5))+((cj5*gconst8*r01)))),-1);
if(!x1244.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1243.value)+(((1.5707963267949)*(x1244.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
tj4 = IKtan(j4);
{
IkReal evalcond[6];
IkReal x1245=IKsin(j4);
IkReal x1246=IKcos(j4);
IkReal x1247=((1.0)*r02);
IkReal x1248=(r01*sj5);
IkReal x1249=(gconst8*r12);
IkReal x1250=(cj5*r10);
IkReal x1251=(sj1*sj2);
IkReal x1252=(cj5*r20);
IkReal x1253=(cj1*cj3);
IkReal x1254=(r11*sj5);
IkReal x1255=((1.0)*cj3);
IkReal x1256=(cj2*sj1);
IkReal x1257=(r21*sj5);
IkReal x1258=(gconst7*x1246);
IkReal x1259=((1.0)*cj1*sj3);
IkReal x1260=((1.0)*cj5*r00);
IkReal x1261=(gconst7*x1245);
IkReal x1262=((1.0)*x1245);
IkReal x1263=(gconst8*x1246);
IkReal x1264=(gconst8*x1245);
evalcond[0]=((((-1.0)*x1257*x1262))+((x1245*x1252))+((r22*x1246)));
evalcond[1]=((((-1.0)*sj2*x1253))+(((-1.0)*r22*x1262))+(((-1.0)*x1246*x1257))+((sj3*x1251))+((x1246*x1252))+(((-1.0)*cj2*x1259))+(((-1.0)*x1255*x1256)));
evalcond[2]=(((x1248*x1258))+(((-1.0)*x1249*x1262))+((x1250*x1263))+(((-1.0)*x1254*x1263))+((r02*x1261))+(((-1.0)*x1258*x1260)));
evalcond[3]=((((-1.0)*r12*x1258))+(((-1.0)*x1247*x1263))+(((-1.0)*x1260*x1264))+((x1248*x1264))+(((-1.0)*x1250*x1261))+((x1254*x1261)));
evalcond[4]=((1.0)+(((-1.0)*x1260*x1261))+((x1246*x1249))+((x1248*x1261))+((x1250*x1264))+(((-1.0)*gconst8*x1254*x1262))+(((-1.0)*x1247*x1258)));
evalcond[5]=((((-1.0)*x1251*x1255))+((cj2*x1253))+((r12*x1261))+(((-1.0)*x1260*x1263))+(((-1.0)*x1250*x1258))+((x1248*x1263))+(((-1.0)*sj2*x1259))+(((-1.0)*sj3*x1256))+((r02*x1264))+((x1254*x1258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1265=((-1.0)*r02);
IkReal x1267 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1267)==0){
continue;
}
IkReal x1266=pow(x1267,-0.5);
CheckValue<IkReal> x1268 = IKatan2WithCheck(IkReal(x1265),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x1268.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x1268.value))));
IkReal gconst10=(x1265*x1266);
IkReal gconst11=((1.0)*r12*x1266);
CheckValue<IkReal> x1269 = IKatan2WithCheck(IkReal(((-1.0)*r02)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x1269.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0+(x1269.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[2];
IkReal x1270=((-1.0)*r02);
CheckValue<IkReal> x1273 = IKatan2WithCheck(IkReal(x1270),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x1273.valid){
continue;
}
IkReal x1271=((1.0)*(x1273.value));
IkReal x1272=x1266;
sj0=gconst10;
cj0=gconst11;
j0=((3.14159265)+(((-1.0)*x1271)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x1271)));
IkReal gconst10=(x1270*x1272);
IkReal gconst11=((1.0)*r12*x1272);
j5eval[0]=0;
j5eval[1]=0;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1274=gconst11*gconst11;
IkReal x1275=gconst10*gconst10;
IkReal x1276=((0.04022625)*cj1);
IkReal x1277=((0.0371264625)*cj1*cj2);
IkReal x1278=((0.0371264625)*sj1*sj2);
IkReal x1279=(gconst10*x1278);
IkReal x1280=((((0.09465)*x1275))+(((0.09465)*x1274)));
IkReal x1281=(((gconst11*x1278))+(((0.0103310475)*gconst10)));
IkReal x1282=(((gconst11*x1277))+((gconst11*x1276)));
IkReal x1283=(((gconst10*x1277))+((gconst10*x1276))+(((0.0103310475)*gconst11)));
CheckValue<IkReal> x1284 = IKatan2WithCheck(IkReal((((r11*((x1282+(((-1.0)*x1281))))))+(((-1.0)*rxp1_2*x1280))+((r01*(((((-1.0)*x1283))+x1279)))))),IkReal((((r00*(((((-1.0)*x1279))+x1283))))+((r10*((x1281+(((-1.0)*x1282))))))+((rxp0_2*x1280)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1284.valid){
continue;
}
CheckValue<IkReal> x1285=IKPowWithIntegerCheck(IKsign((r22*(((((-0.0089586225)*x1275))+(((-0.0089586225)*x1274)))))),-1);
if(!x1285.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1284.value)+(((1.5707963267949)*(x1285.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
tj5 = IKtan(j5);
{
IkReal evalcond[4];
IkReal x1286=IKsin(j5);
IkReal x1287=IKcos(j5);
IkReal x1288=((0.39225)*sj1);
IkReal x1289=((0.09465)*gconst11);
IkReal x1290=((0.09465)*gconst10);
IkReal x1291=((1.0)*px);
IkReal x1292=((0.39225)*cj1);
IkReal x1293=((1.0)*gconst11);
IkReal x1294=(r11*x1287);
IkReal x1295=(r00*x1286);
IkReal x1296=(r01*x1287);
IkReal x1297=(r10*x1286);
evalcond[0]=(((cj2*x1288))+(((0.09465)*r21*x1287))+((sj2*x1292))+(((0.425)*sj1))+(((0.09465)*r20*x1286))+pz);
evalcond[1]=(((gconst10*x1295))+((gconst10*x1296))+(((-1.0)*x1293*x1297))+(((-1.0)*x1293*x1294)));
evalcond[2]=((0.10915)+(((-1.0)*gconst10*x1291))+(((-1.0)*x1290*x1295))+((gconst11*py))+((x1289*x1297))+((x1289*x1294))+(((-1.0)*x1290*x1296)));
evalcond[3]=(((sj2*x1288))+(((-1.0)*x1289*x1295))+(((-1.0)*x1290*x1297))+(((-1.0)*cj2*x1292))+(((-1.0)*x1290*x1294))+(((-1.0)*x1289*x1296))+(((-1.0)*gconst10*py))+(((-1.0)*gconst11*x1291))+(((-0.425)*cj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1298=((1.0)*sj2);
IkReal x1299=(r20*sj5);
IkReal x1300=(cj1*sj5);
IkReal x1301=(gconst11*r00);
IkReal x1302=(cj1*cj2);
IkReal x1303=((1.0)*cj2);
IkReal x1304=(gconst10*r10);
IkReal x1305=(cj5*sj1);
IkReal x1306=(gconst10*r11);
IkReal x1307=(cj5*r21);
IkReal x1308=(sj1*sj5);
IkReal x1309=(cj5*gconst11*r01);
IkReal x1310=(cj1*cj5*x1306);
IkReal x1311=(gconst11*r01*x1305);
if( IKabs((((sj2*x1304*x1308))+((sj2*x1305*x1306))+((sj2*x1301*x1308))+(((-1.0)*cj1*x1298*x1299))+(((-1.0)*sj1*x1299*x1303))+(((-1.0)*x1300*x1301*x1303))+(((-1.0)*cj5*x1302*x1306))+(((-1.0)*cj1*x1298*x1307))+(((-1.0)*r21*x1303*x1305))+(((-1.0)*x1302*x1309))+((sj2*x1311))+(((-1.0)*x1300*x1303*x1304)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1298*x1300*x1304))+(((-1.0)*x1298*x1310))+(((-1.0)*x1298*x1300*x1301))+(((-1.0)*x1303*x1305*x1306))+(((-1.0)*r21*x1298*x1305))+(((-1.0)*x1303*x1311))+(((-1.0)*x1301*x1303*x1308))+((x1299*x1302))+((x1302*x1307))+(((-1.0)*cj1*x1298*x1309))+(((-1.0)*x1303*x1304*x1308))+(((-1.0)*sj1*x1298*x1299)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj2*x1304*x1308))+((sj2*x1305*x1306))+((sj2*x1301*x1308))+(((-1.0)*cj1*x1298*x1299))+(((-1.0)*sj1*x1299*x1303))+(((-1.0)*x1300*x1301*x1303))+(((-1.0)*cj5*x1302*x1306))+(((-1.0)*cj1*x1298*x1307))+(((-1.0)*r21*x1303*x1305))+(((-1.0)*x1302*x1309))+((sj2*x1311))+(((-1.0)*x1300*x1303*x1304))))+IKsqr(((((-1.0)*x1298*x1300*x1304))+(((-1.0)*x1298*x1310))+(((-1.0)*x1298*x1300*x1301))+(((-1.0)*x1303*x1305*x1306))+(((-1.0)*r21*x1298*x1305))+(((-1.0)*x1303*x1311))+(((-1.0)*x1301*x1303*x1308))+((x1299*x1302))+((x1302*x1307))+(((-1.0)*cj1*x1298*x1309))+(((-1.0)*x1303*x1304*x1308))+(((-1.0)*sj1*x1298*x1299))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((sj2*x1304*x1308))+((sj2*x1305*x1306))+((sj2*x1301*x1308))+(((-1.0)*cj1*x1298*x1299))+(((-1.0)*sj1*x1299*x1303))+(((-1.0)*x1300*x1301*x1303))+(((-1.0)*cj5*x1302*x1306))+(((-1.0)*cj1*x1298*x1307))+(((-1.0)*r21*x1303*x1305))+(((-1.0)*x1302*x1309))+((sj2*x1311))+(((-1.0)*x1300*x1303*x1304))), ((((-1.0)*x1298*x1300*x1304))+(((-1.0)*x1298*x1310))+(((-1.0)*x1298*x1300*x1301))+(((-1.0)*x1303*x1305*x1306))+(((-1.0)*r21*x1298*x1305))+(((-1.0)*x1303*x1311))+(((-1.0)*x1301*x1303*x1308))+((x1299*x1302))+((x1302*x1307))+(((-1.0)*cj1*x1298*x1309))+(((-1.0)*x1303*x1304*x1308))+(((-1.0)*sj1*x1298*x1299))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
tj3 = IKtan(j3);
{
IkReal evalcond[2];
IkReal x1312=IKsin(j3);
IkReal x1313=IKcos(j3);
IkReal x1314=((1.0)*sj2);
IkReal x1315=(cj2*x1313);
IkReal x1316=(cj1*x1312);
IkReal x1317=(sj1*x1312);
evalcond[0]=((((-1.0)*cj2*x1317))+(((-1.0)*x1314*x1316))+((cj1*x1315))+(((-1.0)*sj1*x1313*x1314))+(((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
evalcond[1]=(((gconst11*r00*sj5))+((cj2*x1316))+((sj1*x1315))+(((-1.0)*x1314*x1317))+((cj5*gconst11*r01))+((cj1*sj2*x1313))+((gconst10*r10*sj5))+((cj5*gconst10*r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
IkReal x1318=((-1.0)*r02);
CheckValue<IkReal> x1321 = IKatan2WithCheck(IkReal(x1318),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x1321.valid){
continue;
}
IkReal x1319=((1.0)*(x1321.value));
IkReal x1320=x1266;
sj0=gconst10;
cj0=gconst11;
j0=((3.14159265)+(((-1.0)*x1319)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x1319)));
IkReal gconst10=(x1318*x1320);
IkReal gconst11=((1.0)*r12*x1320);
j4eval[0]=((IKabs(((((-1.0)*cj5*r20))+((r21*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1322=((-1.0)*r02);
CheckValue<IkReal> x1325 = IKatan2WithCheck(IkReal(x1322),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x1325.valid){
continue;
}
IkReal x1323=((1.0)*(x1325.value));
IkReal x1324=x1266;
sj0=gconst10;
cj0=gconst11;
j0=((3.14159265)+(((-1.0)*x1323)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x1323)));
IkReal gconst10=(x1322*x1324);
IkReal gconst11=((1.0)*r12*x1324);
IkReal x1326=cj5*cj5;
IkReal x1327=r21*r21;
IkReal x1328=(((x1326*(r20*r20)))+(r22*r22)+(((-1.0)*x1326*x1327))+(((-2.0)*cj5*r20*r21*sj5))+x1327);
j4eval[0]=x1328;
j4eval[1]=IKsign(x1328);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1329=cj5*cj5;
IkReal x1330=((1.0)*r22);
IkReal x1331=(cj5*r20);
IkReal x1332=(gconst10*sj5);
IkReal x1333=(r21*sj5);
IkReal x1334=((1.0)*gconst10);
IkReal x1335=(r11*r21);
IkReal x1336=(cj5*gconst11*sj5);
IkReal x1337=(cj1*cj2*cj3);
IkReal x1338=(cj2*sj1*sj3);
IkReal x1339=(cj1*sj2*sj3);
IkReal x1340=(cj3*sj1*sj2);
IkReal x1341=(gconst11*r01*r21);
IkReal x1342=(r20*x1329);
CheckValue<IkReal> x1343=IKPowWithIntegerCheck(IKsign((((gconst11*r01*sj5*x1331))+((x1329*x1341))+((cj5*r10*r21*x1332))+(((-1.0)*x1334*x1335))+(((-1.0)*gconst10*r12*x1330))+(((-1.0)*gconst11*r00*x1342))+((gconst10*x1329*x1335))+(((-1.0)*x1341))+(((-1.0)*gconst11*r02*x1330))+((cj5*gconst11*r00*x1333))+((r11*x1331*x1332))+(((-1.0)*r10*x1334*x1342)))),-1);
if(!x1343.valid){
continue;
}
CheckValue<IkReal> x1344 = IKatan2WithCheck(IkReal(((((-1.0)*x1330*x1340))+(((-1.0)*x1330*x1338))+(((-1.0)*x1330*x1339))+((r22*x1337)))),IkReal((((x1331*x1339))+((x1331*x1338))+(((-1.0)*x1333*x1340))+(((-1.0)*x1333*x1338))+((x1331*x1340))+((x1333*x1337))+(((-1.0)*x1331*x1337))+(((-1.0)*x1333*x1339)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1344.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1343.value)))+(x1344.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
tj4 = IKtan(j4);
{
IkReal evalcond[6];
IkReal x1345=IKsin(j4);
IkReal x1346=IKcos(j4);
IkReal x1347=((1.0)*gconst10);
IkReal x1348=(r01*sj5);
IkReal x1349=(cj5*r10);
IkReal x1350=(sj1*sj2);
IkReal x1351=(cj5*r20);
IkReal x1352=(cj1*cj3);
IkReal x1353=((1.0)*cj3);
IkReal x1354=(cj5*r00);
IkReal x1355=(cj2*sj1);
IkReal x1356=(r11*sj5);
IkReal x1357=(r21*sj5);
IkReal x1358=((1.0)*cj1*sj3);
IkReal x1359=(r12*x1346);
IkReal x1360=(gconst10*x1348);
IkReal x1361=(gconst10*x1345);
IkReal x1362=(gconst11*x1346);
IkReal x1363=(gconst11*x1345);
IkReal x1364=((1.0)*x1345);
evalcond[0]=(((r22*x1346))+(((-1.0)*x1357*x1364))+((x1345*x1351)));
evalcond[1]=(((sj3*x1350))+(((-1.0)*cj2*x1358))+(((-1.0)*x1353*x1355))+((x1346*x1351))+(((-1.0)*sj2*x1352))+(((-1.0)*r22*x1364))+(((-1.0)*x1346*x1357)));
evalcond[2]=(((x1349*x1362))+(((-1.0)*r12*x1363))+((r02*x1361))+(((-1.0)*x1356*x1362))+((x1346*x1360))+(((-1.0)*x1346*x1347*x1354)));
evalcond[3]=((((-1.0)*x1347*x1359))+((x1348*x1363))+(((-1.0)*r02*x1362))+(((-1.0)*x1354*x1363))+((x1356*x1361))+(((-1.0)*x1345*x1347*x1349)));
evalcond[4]=((1.0)+(((-1.0)*x1345*x1347*x1354))+(((-1.0)*r02*x1346*x1347))+(((-1.0)*x1356*x1363))+((gconst11*x1359))+((x1345*x1360))+((x1349*x1363)));
evalcond[5]=(((r12*x1361))+(((-1.0)*sj3*x1355))+(((-1.0)*x1354*x1362))+((x1348*x1362))+(((-1.0)*sj2*x1358))+((r02*x1363))+(((-1.0)*x1346*x1347*x1349))+(((-1.0)*x1350*x1353))+((cj2*x1352))+((gconst10*x1346*x1356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1365=cj5*cj5;
IkReal x1366=r21*r21;
IkReal x1367=(r22*sj1);
IkReal x1368=(sj2*sj3);
IkReal x1369=(cj2*cj3);
IkReal x1370=(cj5*r20);
IkReal x1371=((1.0)*sj1);
IkReal x1372=(r21*sj5);
IkReal x1373=(cj1*cj3*sj2);
IkReal x1374=((1.0)*cj1*cj2*sj3);
CheckValue<IkReal> x1375 = IKatan2WithCheck(IkReal(((((-1.0)*x1367*x1369))+(((-1.0)*r22*x1373))+(((-1.0)*r22*x1374))+((x1367*x1368)))),IkReal(((((-1.0)*x1372*x1373))+(((-1.0)*x1369*x1371*x1372))+((sj1*x1369*x1370))+((cj1*cj2*sj3*x1370))+((sj1*x1368*x1372))+(((-1.0)*x1368*x1370*x1371))+((x1370*x1373))+(((-1.0)*x1372*x1374)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1375.valid){
continue;
}
CheckValue<IkReal> x1376=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1365*x1366))+((x1365*(r20*r20)))+(((-2.0)*x1370*x1372))+(r22*r22)+x1366)),-1);
if(!x1376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1375.value)+(((1.5707963267949)*(x1376.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
tj4 = IKtan(j4);
{
IkReal evalcond[6];
IkReal x1377=IKsin(j4);
IkReal x1378=IKcos(j4);
IkReal x1379=((1.0)*gconst10);
IkReal x1380=(r01*sj5);
IkReal x1381=(cj5*r10);
IkReal x1382=(sj1*sj2);
IkReal x1383=(cj5*r20);
IkReal x1384=(cj1*cj3);
IkReal x1385=((1.0)*cj3);
IkReal x1386=(cj5*r00);
IkReal x1387=(cj2*sj1);
IkReal x1388=(r11*sj5);
IkReal x1389=(r21*sj5);
IkReal x1390=((1.0)*cj1*sj3);
IkReal x1391=(r12*x1378);
IkReal x1392=(gconst10*x1380);
IkReal x1393=(gconst10*x1377);
IkReal x1394=(gconst11*x1378);
IkReal x1395=(gconst11*x1377);
IkReal x1396=((1.0)*x1377);
evalcond[0]=(((r22*x1378))+((x1377*x1383))+(((-1.0)*x1389*x1396)));
evalcond[1]=((((-1.0)*cj2*x1390))+((x1378*x1383))+(((-1.0)*x1385*x1387))+((sj3*x1382))+(((-1.0)*x1378*x1389))+(((-1.0)*r22*x1396))+(((-1.0)*sj2*x1384)));
evalcond[2]=((((-1.0)*r12*x1395))+((x1381*x1394))+(((-1.0)*x1378*x1379*x1386))+((x1378*x1392))+((r02*x1393))+(((-1.0)*x1388*x1394)));
evalcond[3]=(((x1380*x1395))+(((-1.0)*x1386*x1395))+(((-1.0)*x1379*x1391))+(((-1.0)*x1377*x1379*x1381))+(((-1.0)*r02*x1394))+((x1388*x1393)));
evalcond[4]=((1.0)+((x1381*x1395))+(((-1.0)*r02*x1378*x1379))+((x1377*x1392))+(((-1.0)*x1377*x1379*x1386))+(((-1.0)*x1388*x1395))+((gconst11*x1391)));
evalcond[5]=(((x1380*x1394))+((r12*x1393))+(((-1.0)*sj3*x1387))+((gconst10*x1378*x1388))+((cj2*x1384))+(((-1.0)*x1382*x1385))+(((-1.0)*x1386*x1394))+(((-1.0)*sj2*x1390))+(((-1.0)*x1378*x1379*x1381))+((r02*x1395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1397 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj5*r20))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1397.valid){
continue;
}
CheckValue<IkReal> x1398=IKPowWithIntegerCheck(IKsign((((gconst11*r00*sj5))+((cj5*gconst11*r01))+((gconst10*r10*sj5))+((cj5*gconst10*r11)))),-1);
if(!x1398.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1397.value)+(((1.5707963267949)*(x1398.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
tj4 = IKtan(j4);
{
IkReal evalcond[6];
IkReal x1399=IKsin(j4);
IkReal x1400=IKcos(j4);
IkReal x1401=((1.0)*gconst10);
IkReal x1402=(r01*sj5);
IkReal x1403=(cj5*r10);
IkReal x1404=(sj1*sj2);
IkReal x1405=(cj5*r20);
IkReal x1406=(cj1*cj3);
IkReal x1407=((1.0)*cj3);
IkReal x1408=(cj5*r00);
IkReal x1409=(cj2*sj1);
IkReal x1410=(r11*sj5);
IkReal x1411=(r21*sj5);
IkReal x1412=((1.0)*cj1*sj3);
IkReal x1413=(r12*x1400);
IkReal x1414=(gconst10*x1402);
IkReal x1415=(gconst10*x1399);
IkReal x1416=(gconst11*x1400);
IkReal x1417=(gconst11*x1399);
IkReal x1418=((1.0)*x1399);
evalcond[0]=(((x1399*x1405))+((r22*x1400))+(((-1.0)*x1411*x1418)));
evalcond[1]=((((-1.0)*cj2*x1412))+((x1400*x1405))+(((-1.0)*x1407*x1409))+(((-1.0)*x1400*x1411))+(((-1.0)*r22*x1418))+(((-1.0)*sj2*x1406))+((sj3*x1404)));
evalcond[2]=(((r02*x1415))+(((-1.0)*x1400*x1401*x1408))+(((-1.0)*x1410*x1416))+((x1403*x1416))+(((-1.0)*r12*x1417))+((x1400*x1414)));
evalcond[3]=(((x1410*x1415))+(((-1.0)*x1408*x1417))+((x1402*x1417))+(((-1.0)*x1401*x1413))+(((-1.0)*r02*x1416))+(((-1.0)*x1399*x1401*x1403)));
evalcond[4]=((1.0)+(((-1.0)*r02*x1400*x1401))+((x1403*x1417))+((gconst11*x1413))+(((-1.0)*x1399*x1401*x1408))+(((-1.0)*x1410*x1417))+((x1399*x1414)));
evalcond[5]=((((-1.0)*x1408*x1416))+((gconst10*x1400*x1410))+((r02*x1417))+(((-1.0)*x1404*x1407))+(((-1.0)*sj3*x1409))+((cj2*x1406))+(((-1.0)*sj2*x1412))+((r12*x1415))+((x1402*x1416))+(((-1.0)*x1400*x1401*x1403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1419=((7845.0)*cj2);
IkReal x1420=(gconst10*sj1);
IkReal x1421=((20000.0)*pz);
IkReal x1422=(gconst11*r10);
IkReal x1423=(gconst11*r11);
IkReal x1424=(sj1*x1423);
IkReal x1425=((7845.0)*cj1*sj2);
IkReal x1426=(gconst10*x1425);
CheckValue<IkReal> x1427=IKPowWithIntegerCheck(IKsign(((((-1893.0)*gconst11*r02))+(((-1893.0)*gconst10*r12)))),-1);
if(!x1427.valid){
continue;
}
CheckValue<IkReal> x1428 = IKatan2WithCheck(IkReal((((r01*x1426))+((gconst10*r01*x1421))+(((-1.0)*x1423*x1425))+(((-8500.0)*x1424))+((r01*x1419*x1420))+(((-1.0)*x1419*x1424))+(((-1.0)*x1421*x1423))+(((8500.0)*r01*x1420)))),IkReal((((x1421*x1422))+(((8500.0)*sj1*x1422))+(((-8500.0)*r00*x1420))+(((-1.0)*r00*x1419*x1420))+((x1422*x1425))+((sj1*x1419*x1422))+(((-1.0)*r00*x1426))+(((-1.0)*gconst10*r00*x1421)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1428.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1427.value)))+(x1428.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
tj5 = IKtan(j5);
{
IkReal evalcond[4];
IkReal x1429=IKsin(j5);
IkReal x1430=IKcos(j5);
IkReal x1431=((0.39225)*sj1);
IkReal x1432=((0.09465)*gconst11);
IkReal x1433=((0.09465)*gconst10);
IkReal x1434=((1.0)*px);
IkReal x1435=((0.39225)*cj1);
IkReal x1436=((1.0)*gconst11);
IkReal x1437=(r11*x1430);
IkReal x1438=(r00*x1429);
IkReal x1439=(r01*x1430);
IkReal x1440=(r10*x1429);
evalcond[0]=(((sj2*x1435))+(((0.09465)*r21*x1430))+((cj2*x1431))+(((0.425)*sj1))+(((0.09465)*r20*x1429))+pz);
evalcond[1]=(((gconst10*x1438))+(((-1.0)*x1436*x1440))+(((-1.0)*x1436*x1437))+((gconst10*x1439)));
evalcond[2]=((0.10915)+((x1432*x1440))+(((-1.0)*x1433*x1438))+(((-1.0)*gconst10*x1434))+((x1432*x1437))+((gconst11*py))+(((-1.0)*x1433*x1439)));
evalcond[3]=((((-1.0)*x1432*x1439))+(((-1.0)*x1433*x1440))+((sj2*x1431))+(((-1.0)*x1433*x1437))+(((-1.0)*cj2*x1435))+(((-1.0)*gconst10*py))+(((-1.0)*x1432*x1438))+(((-1.0)*gconst11*x1434))+(((-0.425)*cj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1441=((1.0)*sj2);
IkReal x1442=(r20*sj5);
IkReal x1443=(cj1*sj5);
IkReal x1444=(gconst11*r00);
IkReal x1445=(cj1*cj2);
IkReal x1446=((1.0)*cj2);
IkReal x1447=(gconst10*r10);
IkReal x1448=(cj5*sj1);
IkReal x1449=(gconst10*r11);
IkReal x1450=(cj5*r21);
IkReal x1451=(sj1*sj5);
IkReal x1452=(cj5*gconst11*r01);
IkReal x1453=(cj1*cj5*x1449);
IkReal x1454=(gconst11*r01*x1448);
if( IKabs(((((-1.0)*cj5*x1445*x1449))+(((-1.0)*sj1*x1442*x1446))+((sj2*x1454))+((sj2*x1447*x1451))+(((-1.0)*r21*x1446*x1448))+(((-1.0)*cj1*x1441*x1442))+((sj2*x1448*x1449))+(((-1.0)*x1445*x1452))+(((-1.0)*x1443*x1444*x1446))+(((-1.0)*cj1*x1441*x1450))+((sj2*x1444*x1451))+(((-1.0)*x1443*x1446*x1447)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1441*x1443*x1444))+(((-1.0)*x1446*x1447*x1451))+((x1442*x1445))+(((-1.0)*x1446*x1454))+((x1445*x1450))+(((-1.0)*x1441*x1443*x1447))+(((-1.0)*sj1*x1441*x1442))+(((-1.0)*r21*x1441*x1448))+(((-1.0)*cj1*x1441*x1452))+(((-1.0)*x1446*x1448*x1449))+(((-1.0)*x1441*x1453))+(((-1.0)*x1444*x1446*x1451)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj5*x1445*x1449))+(((-1.0)*sj1*x1442*x1446))+((sj2*x1454))+((sj2*x1447*x1451))+(((-1.0)*r21*x1446*x1448))+(((-1.0)*cj1*x1441*x1442))+((sj2*x1448*x1449))+(((-1.0)*x1445*x1452))+(((-1.0)*x1443*x1444*x1446))+(((-1.0)*cj1*x1441*x1450))+((sj2*x1444*x1451))+(((-1.0)*x1443*x1446*x1447))))+IKsqr(((((-1.0)*x1441*x1443*x1444))+(((-1.0)*x1446*x1447*x1451))+((x1442*x1445))+(((-1.0)*x1446*x1454))+((x1445*x1450))+(((-1.0)*x1441*x1443*x1447))+(((-1.0)*sj1*x1441*x1442))+(((-1.0)*r21*x1441*x1448))+(((-1.0)*cj1*x1441*x1452))+(((-1.0)*x1446*x1448*x1449))+(((-1.0)*x1441*x1453))+(((-1.0)*x1444*x1446*x1451))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*cj5*x1445*x1449))+(((-1.0)*sj1*x1442*x1446))+((sj2*x1454))+((sj2*x1447*x1451))+(((-1.0)*r21*x1446*x1448))+(((-1.0)*cj1*x1441*x1442))+((sj2*x1448*x1449))+(((-1.0)*x1445*x1452))+(((-1.0)*x1443*x1444*x1446))+(((-1.0)*cj1*x1441*x1450))+((sj2*x1444*x1451))+(((-1.0)*x1443*x1446*x1447))), ((((-1.0)*x1441*x1443*x1444))+(((-1.0)*x1446*x1447*x1451))+((x1442*x1445))+(((-1.0)*x1446*x1454))+((x1445*x1450))+(((-1.0)*x1441*x1443*x1447))+(((-1.0)*sj1*x1441*x1442))+(((-1.0)*r21*x1441*x1448))+(((-1.0)*cj1*x1441*x1452))+(((-1.0)*x1446*x1448*x1449))+(((-1.0)*x1441*x1453))+(((-1.0)*x1444*x1446*x1451))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
tj3 = IKtan(j3);
{
IkReal evalcond[2];
IkReal x1455=IKsin(j3);
IkReal x1456=IKcos(j3);
IkReal x1457=((1.0)*sj2);
IkReal x1458=(cj2*x1456);
IkReal x1459=(cj1*x1455);
IkReal x1460=(sj1*x1455);
evalcond[0]=(((cj1*x1458))+(((-1.0)*cj2*x1460))+(((-1.0)*x1457*x1459))+(((-1.0)*cj5*r21))+(((-1.0)*r20*sj5))+(((-1.0)*sj1*x1456*x1457)));
evalcond[1]=(((gconst11*r00*sj5))+(((-1.0)*x1457*x1460))+((sj1*x1458))+((cj5*gconst11*r01))+((gconst10*r10*sj5))+((cj5*gconst10*r11))+((cj2*x1459))+((cj1*sj2*x1456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
IkReal x1461=((-1.0)*r02);
CheckValue<IkReal> x1464 = IKatan2WithCheck(IkReal(x1461),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x1464.valid){
continue;
}
IkReal x1462=((1.0)*(x1464.value));
IkReal x1463=x1266;
sj0=gconst10;
cj0=gconst11;
j0=((3.14159265)+(((-1.0)*x1462)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x1462)));
IkReal gconst10=(x1461*x1463);
IkReal gconst11=((1.0)*r12*x1463);
j4eval[0]=((IKabs(((((-1.0)*cj5*r20))+((r21*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1465=((-1.0)*r02);
CheckValue<IkReal> x1468 = IKatan2WithCheck(IkReal(x1465),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x1468.valid){
continue;
}
IkReal x1466=((1.0)*(x1468.value));
IkReal x1467=x1266;
sj0=gconst10;
cj0=gconst11;
j0=((3.14159265)+(((-1.0)*x1466)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x1466)));
IkReal gconst10=(x1465*x1467);
IkReal gconst11=((1.0)*r12*x1467);
IkReal x1469=cj5*cj5;
IkReal x1470=r21*r21;
IkReal x1471=((r22*r22)+(((-2.0)*cj5*r20*r21*sj5))+((x1469*(r20*r20)))+x1470+(((-1.0)*x1469*x1470)));
j4eval[0]=x1471;
j4eval[1]=IKsign(x1471);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1472=cj5*cj5;
IkReal x1473=((1.0)*r22);
IkReal x1474=(cj5*r20);
IkReal x1475=(gconst10*sj5);
IkReal x1476=(r21*sj5);
IkReal x1477=((1.0)*gconst10);
IkReal x1478=(r11*r21);
IkReal x1479=(cj5*gconst11*sj5);
IkReal x1480=(cj1*cj2*cj3);
IkReal x1481=(cj2*sj1*sj3);
IkReal x1482=(cj1*sj2*sj3);
IkReal x1483=(cj3*sj1*sj2);
IkReal x1484=(gconst11*r01*r21);
IkReal x1485=(r20*x1472);
CheckValue<IkReal> x1486 = IKatan2WithCheck(IkReal(((((-1.0)*x1473*x1483))+(((-1.0)*x1473*x1481))+((r22*x1480))+(((-1.0)*x1473*x1482)))),IkReal(((((-1.0)*x1476*x1483))+((x1474*x1483))+(((-1.0)*x1476*x1481))+((x1474*x1481))+(((-1.0)*x1476*x1482))+((x1474*x1482))+((x1476*x1480))+(((-1.0)*x1474*x1480)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1486.valid){
continue;
}
CheckValue<IkReal> x1487=IKPowWithIntegerCheck(IKsign((((gconst11*r01*sj5*x1474))+((x1472*x1484))+((cj5*r10*r21*x1475))+(((-1.0)*x1484))+(((-1.0)*gconst10*r12*x1473))+(((-1.0)*x1477*x1478))+((gconst10*x1472*x1478))+(((-1.0)*r10*x1477*x1485))+(((-1.0)*gconst11*r02*x1473))+((cj5*gconst11*r00*x1476))+(((-1.0)*gconst11*r00*x1485))+((r11*x1474*x1475)))),-1);
if(!x1487.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1486.value)+(((1.5707963267949)*(x1487.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
tj4 = IKtan(j4);
{
IkReal evalcond[6];
IkReal x1488=IKsin(j4);
IkReal x1489=IKcos(j4);
IkReal x1490=((1.0)*gconst10);
IkReal x1491=(r01*sj5);
IkReal x1492=(cj5*r10);
IkReal x1493=(sj1*sj2);
IkReal x1494=(cj5*r20);
IkReal x1495=(cj1*cj3);
IkReal x1496=((1.0)*cj3);
IkReal x1497=(cj5*r00);
IkReal x1498=(cj2*sj1);
IkReal x1499=(r11*sj5);
IkReal x1500=(r21*sj5);
IkReal x1501=((1.0)*cj1*sj3);
IkReal x1502=(r12*x1489);
IkReal x1503=(gconst10*x1491);
IkReal x1504=(gconst10*x1488);
IkReal x1505=(gconst11*x1489);
IkReal x1506=(gconst11*x1488);
IkReal x1507=((1.0)*x1488);
evalcond[0]=(((r22*x1489))+(((-1.0)*x1500*x1507))+((x1488*x1494)));
evalcond[1]=(((x1489*x1494))+(((-1.0)*x1489*x1500))+((sj3*x1493))+(((-1.0)*sj2*x1495))+(((-1.0)*cj2*x1501))+(((-1.0)*x1496*x1498))+(((-1.0)*r22*x1507)));
evalcond[2]=(((r02*x1504))+((x1492*x1505))+(((-1.0)*x1489*x1490*x1497))+(((-1.0)*r12*x1506))+((x1489*x1503))+(((-1.0)*x1499*x1505)));
evalcond[3]=(((x1499*x1504))+(((-1.0)*x1497*x1506))+(((-1.0)*r02*x1505))+(((-1.0)*x1490*x1502))+((x1491*x1506))+(((-1.0)*x1488*x1490*x1492)));
evalcond[4]=((1.0)+(((-1.0)*x1499*x1506))+((x1492*x1506))+(((-1.0)*r02*x1489*x1490))+((gconst11*x1502))+(((-1.0)*x1488*x1490*x1497))+((x1488*x1503)));
evalcond[5]=(((cj2*x1495))+(((-1.0)*sj3*x1498))+(((-1.0)*x1493*x1496))+(((-1.0)*x1489*x1490*x1492))+(((-1.0)*x1497*x1505))+(((-1.0)*sj2*x1501))+((gconst10*x1489*x1499))+((r02*x1506))+((x1491*x1505))+((r12*x1504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1508=cj5*cj5;
IkReal x1509=r21*r21;
IkReal x1510=(r22*sj1);
IkReal x1511=(sj2*sj3);
IkReal x1512=(cj2*cj3);
IkReal x1513=(cj5*r20);
IkReal x1514=((1.0)*sj1);
IkReal x1515=(r21*sj5);
IkReal x1516=(cj1*cj3*sj2);
IkReal x1517=((1.0)*cj1*cj2*sj3);
CheckValue<IkReal> x1518=IKPowWithIntegerCheck(IKsign((((x1508*(r20*r20)))+(((-2.0)*x1513*x1515))+(r22*r22)+x1509+(((-1.0)*x1508*x1509)))),-1);
if(!x1518.valid){
continue;
}
CheckValue<IkReal> x1519 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1516))+(((-1.0)*x1510*x1512))+((x1510*x1511))+(((-1.0)*r22*x1517)))),IkReal((((x1513*x1516))+(((-1.0)*x1511*x1513*x1514))+(((-1.0)*x1512*x1514*x1515))+((sj1*x1511*x1515))+(((-1.0)*x1515*x1517))+((sj1*x1512*x1513))+((cj1*cj2*sj3*x1513))+(((-1.0)*x1515*x1516)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1519.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1518.value)))+(x1519.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
tj4 = IKtan(j4);
{
IkReal evalcond[6];
IkReal x1520=IKsin(j4);
IkReal x1521=IKcos(j4);
IkReal x1522=((1.0)*gconst10);
IkReal x1523=(r01*sj5);
IkReal x1524=(cj5*r10);
IkReal x1525=(sj1*sj2);
IkReal x1526=(cj5*r20);
IkReal x1527=(cj1*cj3);
IkReal x1528=((1.0)*cj3);
IkReal x1529=(cj5*r00);
IkReal x1530=(cj2*sj1);
IkReal x1531=(r11*sj5);
IkReal x1532=(r21*sj5);
IkReal x1533=((1.0)*cj1*sj3);
IkReal x1534=(r12*x1521);
IkReal x1535=(gconst10*x1523);
IkReal x1536=(gconst10*x1520);
IkReal x1537=(gconst11*x1521);
IkReal x1538=(gconst11*x1520);
IkReal x1539=((1.0)*x1520);
evalcond[0]=(((x1520*x1526))+(((-1.0)*x1532*x1539))+((r22*x1521)));
evalcond[1]=((((-1.0)*r22*x1539))+(((-1.0)*cj2*x1533))+(((-1.0)*x1521*x1532))+((sj3*x1525))+(((-1.0)*sj2*x1527))+((x1521*x1526))+(((-1.0)*x1528*x1530)));
evalcond[2]=(((x1521*x1535))+(((-1.0)*r12*x1538))+(((-1.0)*x1531*x1537))+((r02*x1536))+(((-1.0)*x1521*x1522*x1529))+((x1524*x1537)));
evalcond[3]=((((-1.0)*x1522*x1534))+((x1523*x1538))+(((-1.0)*x1520*x1522*x1524))+(((-1.0)*x1529*x1538))+(((-1.0)*r02*x1537))+((x1531*x1536)));
evalcond[4]=((1.0)+((gconst11*x1534))+(((-1.0)*x1531*x1538))+((x1520*x1535))+((x1524*x1538))+(((-1.0)*r02*x1521*x1522))+(((-1.0)*x1520*x1522*x1529)));
evalcond[5]=((((-1.0)*x1525*x1528))+((cj2*x1527))+((r02*x1538))+(((-1.0)*x1521*x1522*x1524))+((r12*x1536))+(((-1.0)*sj2*x1533))+((x1523*x1537))+((gconst10*x1521*x1531))+(((-1.0)*x1529*x1537))+(((-1.0)*sj3*x1530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1540 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj5*r20))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1540.valid){
continue;
}
CheckValue<IkReal> x1541=IKPowWithIntegerCheck(IKsign((((gconst11*r00*sj5))+((cj5*gconst11*r01))+((gconst10*r10*sj5))+((cj5*gconst10*r11)))),-1);
if(!x1541.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1540.value)+(((1.5707963267949)*(x1541.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
tj4 = IKtan(j4);
{
IkReal evalcond[6];
IkReal x1542=IKsin(j4);
IkReal x1543=IKcos(j4);
IkReal x1544=((1.0)*gconst10);
IkReal x1545=(r01*sj5);
IkReal x1546=(cj5*r10);
IkReal x1547=(sj1*sj2);
IkReal x1548=(cj5*r20);
IkReal x1549=(cj1*cj3);
IkReal x1550=((1.0)*cj3);
IkReal x1551=(cj5*r00);
IkReal x1552=(cj2*sj1);
IkReal x1553=(r11*sj5);
IkReal x1554=(r21*sj5);
IkReal x1555=((1.0)*cj1*sj3);
IkReal x1556=(r12*x1543);
IkReal x1557=(gconst10*x1545);
IkReal x1558=(gconst10*x1542);
IkReal x1559=(gconst11*x1543);
IkReal x1560=(gconst11*x1542);
IkReal x1561=((1.0)*x1542);
evalcond[0]=(((x1542*x1548))+(((-1.0)*x1554*x1561))+((r22*x1543)));
evalcond[1]=((((-1.0)*cj2*x1555))+(((-1.0)*x1543*x1554))+(((-1.0)*x1550*x1552))+(((-1.0)*r22*x1561))+((sj3*x1547))+((x1543*x1548))+(((-1.0)*sj2*x1549)));
evalcond[2]=((((-1.0)*r12*x1560))+((r02*x1558))+((x1543*x1557))+((x1546*x1559))+(((-1.0)*x1543*x1544*x1551))+(((-1.0)*x1553*x1559)));
evalcond[3]=((((-1.0)*x1542*x1544*x1546))+((x1545*x1560))+(((-1.0)*r02*x1559))+(((-1.0)*x1551*x1560))+((x1553*x1558))+(((-1.0)*x1544*x1556)));
evalcond[4]=((1.0)+(((-1.0)*x1542*x1544*x1551))+((gconst11*x1556))+(((-1.0)*x1553*x1560))+(((-1.0)*r02*x1543*x1544))+((x1542*x1557))+((x1546*x1560)));
evalcond[5]=((((-1.0)*x1551*x1559))+((cj2*x1549))+(((-1.0)*sj3*x1552))+((gconst10*x1543*x1553))+(((-1.0)*x1543*x1544*x1546))+(((-1.0)*sj2*x1555))+((r02*x1560))+((r12*x1558))+(((-1.0)*x1547*x1550))+((x1545*x1559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r02))+(IKabs(r12)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[2];
IkReal x1562=((-1.0)*pz);
r02=0;
r12=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1562);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1562);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=r22;
j5eval[1]=IKsign(r22);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x1563=((-1.0)*pz);
r02=0;
r12=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1563);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1563);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1564=((1.0)*sj1);
j3eval[0]=((IKabs(((((-1.0)*sj2*x1564))+((cj1*cj2)))))+(IKabs(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x1564))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x1565=((1.0)*sj1);
CheckValue<IkReal> x1567 = IKatan2WithCheck(IkReal(((((-1.0)*sj2*x1565))+((cj1*cj2)))),IkReal(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x1565)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1567.valid){
continue;
}
IkReal x1566=x1567.value;
j3array[0]=((-1.0)*x1566);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x1566)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
tj3 = IKtan(j3);

{
IkReal j5eval[2];
IkReal x1568=((-1.0)*pz);
r02=0;
r12=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1568);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1568);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=r22;
j5eval[1]=IKsign(r22);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1569=((-1.0)*pz);
r02=0;
r12=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1569);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1569);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1574=IKPowWithIntegerCheck(r22,-1);
if(!x1574.valid){
continue;
}
IkReal x1570=x1574.value;
IkReal x1571=(sj3*x1570);
IkReal x1572=((1.0)*cj2);
IkReal x1573=(cj3*x1570);
sj4array[0]=((((-1.0)*cj1*x1571*x1572))+((sj1*sj2*x1571))+(((-1.0)*sj1*x1572*x1573))+(((-1.0)*cj1*sj2*x1573)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
tj4 = IKtan(j4);
{
IkReal evalcond[1];
evalcond[0]=(r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
IkReal x1575=((-1.0)*pz);
r02=0;
r12=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1575);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1575);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
j5eval[2]=((cj0*cj0)+(sj0*sj0));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[4];
IkReal x1576=((-1.0)*pz);
r02=0;
r12=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1576);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1576);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1577=(((r22*(cj4*cj4)))+(((-1.0)*r22)));
j5eval[0]=x1577;
j5eval[1]=IKsign(x1577);
j5eval[2]=sj4;
j5eval[3]=((cj0*cj0)+(sj0*sj0));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  || IKabs(j5eval[3]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x1578=((-1.0)*pz);
r02=0;
r12=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1578);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1578);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=cj4;
j5eval[1]=IKsign(cj4);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1579=cj0*cj0;
IkReal x1580=((1.0)*cj4);
IkReal x1581=(px*r01);
IkReal x1582=((0.10915)*cj4);
IkReal x1583=(r00*sj0);
IkReal x1584=(cj0*r11);
IkReal x1585=(cj0*py);
IkReal x1586=(px*r00);
IkReal x1587=(r01*sj0);
IkReal x1588=(px*sj0);
IkReal x1589=(cj0*r10);
IkReal x1590=(cj4*py*x1579);
CheckValue<IkReal> x1591 = IKatan2WithCheck(IkReal((((r10*x1590))+(((-1.0)*x1582*x1583))+((cj4*x1586))+(((-1.0)*x1579*x1580*x1586))+((x1582*x1589))+(((-1.0)*x1580*x1583*x1585))+(((-1.0)*x1580*x1588*x1589)))),IkReal((((cj4*x1581))+(((-1.0)*x1580*x1584*x1588))+((x1582*x1584))+(((-1.0)*x1579*x1580*x1581))+(((-1.0)*x1582*x1587))+(((-1.0)*x1580*x1585*x1587))+((r11*x1590)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1591.valid){
continue;
}
CheckValue<IkReal> x1592=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x1592.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1591.value)+(((-1.5707963267949)*(x1592.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
tj5 = IKtan(j5);
{
IkReal evalcond[8];
IkReal x1593=IKcos(j5);
IkReal x1594=IKsin(j5);
IkReal x1595=((0.09465)*r11);
IkReal x1596=(cj1*sj3);
IkReal x1597=((1.0)*sj2);
IkReal x1598=((1.0)*r00);
IkReal x1599=(sj1*sj3);
IkReal x1600=((1.0)*sj0);
IkReal x1601=((0.09465)*sj0);
IkReal x1602=((1.0)*cj4);
IkReal x1603=((0.09465)*r01);
IkReal x1604=(cj1*cj3);
IkReal x1605=(cj4*r01);
IkReal x1606=(r10*sj4);
IkReal x1607=(cj3*sj1);
IkReal x1608=(r01*sj4);
IkReal x1609=((1.0)*r11);
IkReal x1610=(sj0*x1593);
IkReal x1611=(r00*x1594);
IkReal x1612=(cj0*x1594);
IkReal x1613=(cj0*x1593);
IkReal x1614=(sj0*x1594);
IkReal x1615=(r11*x1614);
evalcond[0]=(((sj0*x1611))+(((-1.0)*x1609*x1613))+(((-1.0)*r10*x1612))+((r01*x1610)));
evalcond[1]=(((x1605*x1614))+((cj4*r10*x1613))+(((-1.0)*r11*x1602*x1612))+(((-1.0)*cj4*x1598*x1610)));
evalcond[2]=(((x1608*x1612))+(((-1.0)*x1593*x1600*x1606))+((sj4*x1615))+(((-1.0)*sj4*x1598*x1613)));
evalcond[3]=((1.0)+((x1608*x1614))+((x1606*x1613))+(((-1.0)*sj4*x1598*x1610))+(((-1.0)*sj4*x1609*x1612)));
evalcond[4]=((0.10915)+((x1595*x1613))+(((-1.0)*r01*x1593*x1601))+(((0.09465)*r10*x1612))+(((-1.0)*x1601*x1611))+(((-1.0)*px*x1600))+((cj0*py)));
evalcond[5]=(((r11*x1610))+(((-1.0)*x1597*x1599))+((cj0*x1611))+((r10*x1614))+((r01*x1613))+((cj2*x1607))+((cj2*x1596))+((sj2*x1604)));
evalcond[6]=((((-0.09465)*cj0*x1611))+(((-1.0)*x1595*x1610))+(((0.39225)*sj1*sj2))+(((-0.39225)*cj1*cj2))+(((-1.0)*cj0*px))+(((-1.0)*r10*x1594*x1601))+(((-1.0)*py*x1600))+(((-1.0)*x1603*x1613))+(((-0.425)*cj1)));
evalcond[7]=((((-1.0)*cj4*x1598*x1613))+((cj4*x1615))+((x1605*x1612))+(((-1.0)*x1596*x1597))+(((-1.0)*x1597*x1607))+((cj2*x1604))+(((-1.0)*cj4*r10*x1593*x1600))+(((-1.0)*cj2*x1599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1616=((1.0)*sj4);
CheckValue<IkReal> x1617=IKPowWithIntegerCheck(IKsign((r22*(((-1.0)+(cj4*cj4))))),-1);
if(!x1617.valid){
continue;
}
CheckValue<IkReal> x1618 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj0*x1616))+(((-1.0)*cj0*r00*x1616)))),IkReal(((((-1.0)*r11*sj0*x1616))+(((-1.0)*cj0*r01*x1616)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1618.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1617.value)))+(x1618.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
tj5 = IKtan(j5);
{
IkReal evalcond[8];
IkReal x1619=IKcos(j5);
IkReal x1620=IKsin(j5);
IkReal x1621=((0.09465)*r11);
IkReal x1622=(cj1*sj3);
IkReal x1623=((1.0)*sj2);
IkReal x1624=((1.0)*r00);
IkReal x1625=(sj1*sj3);
IkReal x1626=((1.0)*sj0);
IkReal x1627=((0.09465)*sj0);
IkReal x1628=((1.0)*cj4);
IkReal x1629=((0.09465)*r01);
IkReal x1630=(cj1*cj3);
IkReal x1631=(cj4*r01);
IkReal x1632=(r10*sj4);
IkReal x1633=(cj3*sj1);
IkReal x1634=(r01*sj4);
IkReal x1635=((1.0)*r11);
IkReal x1636=(sj0*x1619);
IkReal x1637=(r00*x1620);
IkReal x1638=(cj0*x1620);
IkReal x1639=(cj0*x1619);
IkReal x1640=(sj0*x1620);
IkReal x1641=(r11*x1640);
evalcond[0]=(((sj0*x1637))+(((-1.0)*x1635*x1639))+(((-1.0)*r10*x1638))+((r01*x1636)));
evalcond[1]=((((-1.0)*r11*x1628*x1638))+((cj4*r10*x1639))+(((-1.0)*cj4*x1624*x1636))+((x1631*x1640)));
evalcond[2]=((((-1.0)*sj4*x1624*x1639))+((x1634*x1638))+((sj4*x1641))+(((-1.0)*x1619*x1626*x1632)));
evalcond[3]=((1.0)+((x1634*x1640))+(((-1.0)*sj4*x1635*x1638))+((x1632*x1639))+(((-1.0)*sj4*x1624*x1636)));
evalcond[4]=((0.10915)+((x1621*x1639))+(((-1.0)*r01*x1619*x1627))+(((-1.0)*x1627*x1637))+(((0.09465)*r10*x1638))+(((-1.0)*px*x1626))+((cj0*py)));
evalcond[5]=(((cj2*x1633))+((cj0*x1637))+((r10*x1640))+((r11*x1636))+((sj2*x1630))+(((-1.0)*x1623*x1625))+((cj2*x1622))+((r01*x1639)));
evalcond[6]=((((-0.09465)*cj0*x1637))+(((-1.0)*x1621*x1636))+(((-1.0)*x1629*x1639))+(((0.39225)*sj1*sj2))+(((-0.39225)*cj1*cj2))+(((-1.0)*py*x1626))+(((-1.0)*r10*x1620*x1627))+(((-1.0)*cj0*px))+(((-0.425)*cj1)));
evalcond[7]=(((cj2*x1630))+(((-1.0)*cj2*x1625))+(((-1.0)*x1622*x1623))+((cj4*x1641))+(((-1.0)*cj4*r10*x1619*x1626))+(((-1.0)*x1623*x1633))+(((-1.0)*cj4*x1624*x1639))+((x1631*x1638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1642=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x1642.valid){
continue;
}
CheckValue<IkReal> x1643 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r11))+((r01*sj0)))),IkReal(((((-1.0)*r00*sj0))+((cj0*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1643.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x1642.value)))+(x1643.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
tj5 = IKtan(j5);
{
IkReal evalcond[8];
IkReal x1644=IKcos(j5);
IkReal x1645=IKsin(j5);
IkReal x1646=((0.09465)*r11);
IkReal x1647=(cj1*sj3);
IkReal x1648=((1.0)*sj2);
IkReal x1649=((1.0)*r00);
IkReal x1650=(sj1*sj3);
IkReal x1651=((1.0)*sj0);
IkReal x1652=((0.09465)*sj0);
IkReal x1653=((1.0)*cj4);
IkReal x1654=((0.09465)*r01);
IkReal x1655=(cj1*cj3);
IkReal x1656=(cj4*r01);
IkReal x1657=(r10*sj4);
IkReal x1658=(cj3*sj1);
IkReal x1659=(r01*sj4);
IkReal x1660=((1.0)*r11);
IkReal x1661=(sj0*x1644);
IkReal x1662=(r00*x1645);
IkReal x1663=(cj0*x1645);
IkReal x1664=(cj0*x1644);
IkReal x1665=(sj0*x1645);
IkReal x1666=(r11*x1665);
evalcond[0]=((((-1.0)*r10*x1663))+((r01*x1661))+(((-1.0)*x1660*x1664))+((sj0*x1662)));
evalcond[1]=((((-1.0)*cj4*x1649*x1661))+((x1656*x1665))+(((-1.0)*r11*x1653*x1663))+((cj4*r10*x1664)));
evalcond[2]=(((sj4*x1666))+(((-1.0)*x1644*x1651*x1657))+(((-1.0)*sj4*x1649*x1664))+((x1659*x1663)));
evalcond[3]=((1.0)+(((-1.0)*sj4*x1660*x1663))+((x1657*x1664))+((x1659*x1665))+(((-1.0)*sj4*x1649*x1661)));
evalcond[4]=((0.10915)+(((-1.0)*x1652*x1662))+(((-1.0)*r01*x1644*x1652))+((x1646*x1664))+(((-1.0)*px*x1651))+(((0.09465)*r10*x1663))+((cj0*py)));
evalcond[5]=(((r01*x1664))+((cj2*x1647))+((cj2*x1658))+(((-1.0)*x1648*x1650))+((sj2*x1655))+((cj0*x1662))+((r10*x1665))+((r11*x1661)));
evalcond[6]=((((-1.0)*x1646*x1661))+(((-0.09465)*cj0*x1662))+(((0.39225)*sj1*sj2))+(((-0.39225)*cj1*cj2))+(((-1.0)*py*x1651))+(((-1.0)*r10*x1645*x1652))+(((-1.0)*cj0*px))+(((-1.0)*x1654*x1664))+(((-0.425)*cj1)));
evalcond[7]=(((cj2*x1655))+(((-1.0)*x1647*x1648))+((x1656*x1663))+(((-1.0)*cj4*x1649*x1664))+(((-1.0)*x1648*x1658))+(((-1.0)*cj2*x1650))+(((-1.0)*cj4*r10*x1644*x1651))+((cj4*x1666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1667=(cj0*cj1);
IkReal x1668=((0.0371264625)*cj2);
IkReal x1669=(cj1*sj0);
IkReal x1670=((0.0371264625)*sj1*sj2);
IkReal x1671=(sj0*x1670);
IkReal x1672=(((cj0*x1670))+(((0.0103310475)*sj0)));
IkReal x1673=(((x1667*x1668))+(((0.04022625)*x1667)));
IkReal x1674=(((x1668*x1669))+(((0.04022625)*x1669))+(((0.0103310475)*cj0)));
CheckValue<IkReal> x1675 = IKatan2WithCheck(IkReal((((r01*((x1671+(((-1.0)*x1674))))))+(((-0.09465)*rxp1_2))+((r11*(((((-1.0)*x1672))+x1673)))))),IkReal((((r00*((x1674+(((-1.0)*x1671))))))+(((0.09465)*rxp0_2))+((r10*((x1672+(((-1.0)*x1673)))))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1675.valid){
continue;
}
CheckValue<IkReal> x1676=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x1676.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1675.value)+(((-1.5707963267949)*(x1676.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
tj5 = IKtan(j5);
{
IkReal evalcond[4];
IkReal x1677=IKcos(j5);
IkReal x1678=IKsin(j5);
IkReal x1679=((0.09465)*sj0);
IkReal x1680=(cj1*cj2);
IkReal x1681=(sj1*sj2);
IkReal x1682=((1.0)*sj0);
IkReal x1683=((0.09465)*cj0);
IkReal x1684=((1.0)*cj0);
IkReal x1685=(r11*x1677);
IkReal x1686=(r00*x1678);
IkReal x1687=(r01*x1677);
IkReal x1688=(r10*x1678);
evalcond[0]=(((sj0*x1687))+(((-1.0)*x1684*x1685))+((sj0*x1686))+(((-1.0)*x1684*x1688)));
evalcond[1]=((0.10915)+((x1683*x1685))+(((-1.0)*px*x1682))+(((-1.0)*x1679*x1687))+((x1683*x1688))+(((-1.0)*x1679*x1686))+((cj0*py)));
evalcond[2]=(((cj0*x1687))+((cj1*cj3*sj2))+((sj0*x1688))+((sj3*x1680))+(((-1.0)*sj3*x1681))+((cj0*x1686))+((sj0*x1685))+((cj2*cj3*sj1)));
evalcond[3]=((((-1.0)*px*x1684))+(((0.39225)*x1681))+(((-1.0)*x1683*x1687))+(((-1.0)*x1679*x1688))+(((-1.0)*py*x1682))+(((-0.39225)*x1680))+(((-1.0)*x1683*x1686))+(((-1.0)*x1679*x1685))+(((-0.425)*cj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
IkReal x1689=((-1.0)*pz);
r02=0;
r12=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1689);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1689);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1690=(cj5*r10);
IkReal x1691=(r11*sj5);
IkReal x1692=((1.0)*sj0);
IkReal x1693=(cj5*r00);
IkReal x1694=((1.0)*cj0);
IkReal x1695=(r01*sj5);
j4eval[0]=((((-1.0)*x1692*x1693))+((sj0*x1695))+((cj0*x1690))+(((-1.0)*x1691*x1694)));
j4eval[1]=(((cj0*x1695))+(((-1.0)*x1693*x1694))+((sj0*x1691))+(((-1.0)*x1690*x1692)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1696=((-1.0)*pz);
r02=0;
r12=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1696);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1696);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1697=((1.0)*cj5);
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r10*sj0*x1697))+(((-1.0)*cj0*r00*x1697))+((r11*sj0*sj5))+((cj0*r01*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1698=((1.0)*cj5);
IkReal x1699=(cj1*sj3);
IkReal x1700=((1.0)*cj2);
IkReal x1701=(cj1*cj3);
IkReal x1702=(sj1*sj3);
IkReal x1703=(cj3*sj1);
CheckValue<IkReal> x1704=IKPowWithIntegerCheck(r22,-1);
if(!x1704.valid){
continue;
}
CheckValue<IkReal> x1705=IKPowWithIntegerCheck(((((-1.0)*r10*sj0*x1698))+((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1698))+((cj0*r01*sj5))),-1);
if(!x1705.valid){
continue;
}
if( IKabs(((x1704.value)*(((((-1.0)*x1699*x1700))+((sj2*x1702))+(((-1.0)*sj2*x1701))+(((-1.0)*x1700*x1703)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1705.value)*((((sj2*x1703))+((cj2*x1702))+(((-1.0)*x1700*x1701))+((sj2*x1699)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1704.value)*(((((-1.0)*x1699*x1700))+((sj2*x1702))+(((-1.0)*sj2*x1701))+(((-1.0)*x1700*x1703))))))+IKsqr(((x1705.value)*((((sj2*x1703))+((cj2*x1702))+(((-1.0)*x1700*x1701))+((sj2*x1699))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1704.value)*(((((-1.0)*x1699*x1700))+((sj2*x1702))+(((-1.0)*sj2*x1701))+(((-1.0)*x1700*x1703))))), ((x1705.value)*((((sj2*x1703))+((cj2*x1702))+(((-1.0)*x1700*x1701))+((sj2*x1699))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
tj4 = IKtan(j4);
{
IkReal evalcond[6];
IkReal x1706=IKcos(j4);
IkReal x1707=IKsin(j4);
IkReal x1708=(r11*sj0);
IkReal x1709=(sj1*sj2);
IkReal x1710=(cj1*cj3);
IkReal x1711=(cj5*r10);
IkReal x1712=((1.0)*cj3);
IkReal x1713=(r01*sj5);
IkReal x1714=((1.0)*sj0);
IkReal x1715=((1.0)*r11);
IkReal x1716=(cj2*sj1);
IkReal x1717=(cj5*r00);
IkReal x1718=(sj5*x1707);
IkReal x1719=((1.0)*cj1*sj3);
IkReal x1720=(cj0*x1706);
IkReal x1721=((1.0)*cj0*x1717);
evalcond[0]=(r22*x1706);
evalcond[1]=(((sj3*x1709))+(((-1.0)*r22*x1707))+(((-1.0)*x1712*x1716))+(((-1.0)*sj2*x1710))+(((-1.0)*cj2*x1719)));
evalcond[2]=((((-1.0)*sj5*x1715*x1720))+((sj0*x1706*x1713))+(((-1.0)*x1706*x1714*x1717))+((x1711*x1720)));
evalcond[3]=(((cj0*x1707*x1713))+(((-1.0)*x1707*x1711*x1714))+((x1708*x1718))+(((-1.0)*x1707*x1721)));
evalcond[4]=((1.0)+((sj0*x1707*x1713))+(((-1.0)*cj0*x1715*x1718))+(((-1.0)*x1707*x1714*x1717))+((cj0*x1707*x1711)));
evalcond[5]=(((sj5*x1706*x1708))+(((-1.0)*x1706*x1711*x1714))+((cj2*x1710))+(((-1.0)*sj3*x1716))+(((-1.0)*x1709*x1712))+((x1713*x1720))+(((-1.0)*x1717*x1720))+(((-1.0)*sj2*x1719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1722=(cj5*r10);
IkReal x1723=(r11*sj5);
IkReal x1724=((1.0)*sj0);
IkReal x1725=(cj5*r00);
IkReal x1726=((1.0)*cj0);
IkReal x1727=(r01*sj5);
CheckValue<IkReal> x1728=IKPowWithIntegerCheck(((((-1.0)*x1723*x1726))+((sj0*x1727))+(((-1.0)*x1724*x1725))+((cj0*x1722))),-1);
if(!x1728.valid){
continue;
}
CheckValue<IkReal> x1729=IKPowWithIntegerCheck(((((-1.0)*x1722*x1724))+((sj0*x1723))+(((-1.0)*x1725*x1726))+((cj0*x1727))),-1);
if(!x1729.valid){
continue;
}
if( IKabs(((-1.0)*(x1728.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1729.value)*((((cj1*sj2*sj3))+(((-1.0)*cj1*cj2*cj3))+((cj2*sj1*sj3))+((cj3*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x1728.value)))+IKsqr(((x1729.value)*((((cj1*sj2*sj3))+(((-1.0)*cj1*cj2*cj3))+((cj2*sj1*sj3))+((cj3*sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x1728.value)), ((x1729.value)*((((cj1*sj2*sj3))+(((-1.0)*cj1*cj2*cj3))+((cj2*sj1*sj3))+((cj3*sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
tj4 = IKtan(j4);
{
IkReal evalcond[6];
IkReal x1730=IKcos(j4);
IkReal x1731=IKsin(j4);
IkReal x1732=(r11*sj0);
IkReal x1733=(sj1*sj2);
IkReal x1734=(cj1*cj3);
IkReal x1735=(cj5*r10);
IkReal x1736=((1.0)*cj3);
IkReal x1737=(r01*sj5);
IkReal x1738=((1.0)*sj0);
IkReal x1739=((1.0)*r11);
IkReal x1740=(cj2*sj1);
IkReal x1741=(cj5*r00);
IkReal x1742=(sj5*x1731);
IkReal x1743=((1.0)*cj1*sj3);
IkReal x1744=(cj0*x1730);
IkReal x1745=((1.0)*cj0*x1741);
evalcond[0]=(r22*x1730);
evalcond[1]=((((-1.0)*x1736*x1740))+(((-1.0)*cj2*x1743))+(((-1.0)*sj2*x1734))+((sj3*x1733))+(((-1.0)*r22*x1731)));
evalcond[2]=(((sj0*x1730*x1737))+(((-1.0)*sj5*x1739*x1744))+(((-1.0)*x1730*x1738*x1741))+((x1735*x1744)));
evalcond[3]=((((-1.0)*x1731*x1745))+(((-1.0)*x1731*x1735*x1738))+((cj0*x1731*x1737))+((x1732*x1742)));
evalcond[4]=((1.0)+((sj0*x1731*x1737))+((cj0*x1731*x1735))+(((-1.0)*x1731*x1738*x1741))+(((-1.0)*cj0*x1739*x1742)));
evalcond[5]=((((-1.0)*x1741*x1744))+(((-1.0)*x1733*x1736))+((x1737*x1744))+((sj5*x1730*x1732))+(((-1.0)*sj2*x1743))+(((-1.0)*x1730*x1735*x1738))+((cj2*x1734))+(((-1.0)*sj3*x1740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1746=(cj0*cj1);
IkReal x1747=((0.0371264625)*cj2);
IkReal x1748=(cj1*sj0);
IkReal x1749=((0.0371264625)*sj1*sj2);
IkReal x1750=(sj0*x1749);
IkReal x1751=(((cj0*x1749))+(((0.0103310475)*sj0)));
IkReal x1752=((((0.04022625)*x1746))+((x1746*x1747)));
IkReal x1753=(((x1747*x1748))+(((0.0103310475)*cj0))+(((0.04022625)*x1748)));
CheckValue<IkReal> x1754 = IKatan2WithCheck(IkReal((((r01*(((((-1.0)*x1753))+x1750))))+((r11*(((((-1.0)*x1751))+x1752))))+(((-0.09465)*rxp1_2)))),IkReal(((((0.09465)*rxp0_2))+((r00*(((((-1.0)*x1750))+x1753))))+((r10*((x1751+(((-1.0)*x1752)))))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1754.valid){
continue;
}
CheckValue<IkReal> x1755=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x1755.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1754.value)+(((-1.5707963267949)*(x1755.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
tj5 = IKtan(j5);
{
IkReal evalcond[3];
IkReal x1756=IKcos(j5);
IkReal x1757=IKsin(j5);
IkReal x1758=((0.09465)*sj0);
IkReal x1759=((1.0)*sj0);
IkReal x1760=((0.09465)*cj0);
IkReal x1761=((1.0)*cj0);
IkReal x1762=(r11*x1756);
IkReal x1763=(r00*x1757);
IkReal x1764=(r01*x1756);
IkReal x1765=(r10*x1757);
evalcond[0]=(((sj0*x1764))+((sj0*x1763))+(((-1.0)*x1761*x1762))+(((-1.0)*x1761*x1765)));
evalcond[1]=((0.10915)+((x1760*x1765))+(((-1.0)*x1758*x1764))+((x1760*x1762))+(((-1.0)*x1758*x1763))+(((-1.0)*px*x1759))+((cj0*py)));
evalcond[2]=((((-1.0)*px*x1761))+(((-1.0)*py*x1759))+(((-1.0)*x1760*x1764))+(((-1.0)*x1760*x1763))+(((0.39225)*sj1*sj2))+(((-0.39225)*cj1*cj2))+(((-1.0)*x1758*x1765))+(((-1.0)*x1758*x1762))+(((-0.425)*cj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1766=(cj5*r01);
IkReal x1767=(cj2*sj1);
IkReal x1768=(cj0*sj2);
IkReal x1769=((1.0)*cj1);
IkReal x1770=(r00*sj5);
IkReal x1771=(sj1*sj2);
IkReal x1772=((1.0)*cj0*cj2);
IkReal x1773=(sj1*x1770);
IkReal x1774=(r10*sj0*sj5);
IkReal x1775=((1.0)*cj5*r11*sj0);
if( IKabs(((((-1.0)*cj2*x1769*x1774))+((x1768*x1773))+((sj1*x1766*x1768))+((x1771*x1774))+((cj5*r11*sj0*x1771))+(((-1.0)*cj2*cj5*r11*sj0*x1769))+(((-1.0)*cj0*cj2*x1769*x1770))+(((-1.0)*cj0*cj2*x1766*x1769)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1767*x1774))+(((-1.0)*cj0*x1766*x1767))+(((-1.0)*x1766*x1768*x1769))+(((-1.0)*cj5*r11*sj0*sj2*x1769))+(((-1.0)*cj0*x1767*x1770))+(((-1.0)*x1768*x1769*x1770))+(((-1.0)*sj2*x1769*x1774))+(((-1.0)*x1767*x1775)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj2*x1769*x1774))+((x1768*x1773))+((sj1*x1766*x1768))+((x1771*x1774))+((cj5*r11*sj0*x1771))+(((-1.0)*cj2*cj5*r11*sj0*x1769))+(((-1.0)*cj0*cj2*x1769*x1770))+(((-1.0)*cj0*cj2*x1766*x1769))))+IKsqr(((((-1.0)*x1767*x1774))+(((-1.0)*cj0*x1766*x1767))+(((-1.0)*x1766*x1768*x1769))+(((-1.0)*cj5*r11*sj0*sj2*x1769))+(((-1.0)*cj0*x1767*x1770))+(((-1.0)*x1768*x1769*x1770))+(((-1.0)*sj2*x1769*x1774))+(((-1.0)*x1767*x1775))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*cj2*x1769*x1774))+((x1768*x1773))+((sj1*x1766*x1768))+((x1771*x1774))+((cj5*r11*sj0*x1771))+(((-1.0)*cj2*cj5*r11*sj0*x1769))+(((-1.0)*cj0*cj2*x1769*x1770))+(((-1.0)*cj0*cj2*x1766*x1769))), ((((-1.0)*x1767*x1774))+(((-1.0)*cj0*x1766*x1767))+(((-1.0)*x1766*x1768*x1769))+(((-1.0)*cj5*r11*sj0*sj2*x1769))+(((-1.0)*cj0*x1767*x1770))+(((-1.0)*x1768*x1769*x1770))+(((-1.0)*sj2*x1769*x1774))+(((-1.0)*x1767*x1775))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
tj3 = IKtan(j3);
{
IkReal evalcond[2];
IkReal x1776=IKsin(j3);
IkReal x1777=IKcos(j3);
IkReal x1778=((1.0)*sj2);
IkReal x1779=(cj2*x1777);
IkReal x1780=(cj1*x1776);
IkReal x1781=(sj1*x1776);
evalcond[0]=((((-1.0)*sj1*x1777*x1778))+(((-1.0)*cj2*x1781))+(((-1.0)*x1778*x1780))+((cj1*x1779)));
evalcond[1]=(((cj2*x1780))+((cj1*sj2*x1777))+((cj5*r11*sj0))+((sj1*x1779))+((r10*sj0*sj5))+(((-1.0)*x1778*x1781))+((cj0*r00*sj5))+((cj0*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
IkReal x1782=((-1.0)*pz);
r02=0;
r12=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1782);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1782);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1783=(cj5*r10);
IkReal x1784=(r11*sj5);
IkReal x1785=((1.0)*sj0);
IkReal x1786=(cj5*r00);
IkReal x1787=((1.0)*cj0);
IkReal x1788=(r01*sj5);
j4eval[0]=((((-1.0)*x1785*x1786))+((sj0*x1788))+(((-1.0)*x1784*x1787))+((cj0*x1783)));
j4eval[1]=(((cj0*x1788))+(((-1.0)*x1783*x1785))+((sj0*x1784))+(((-1.0)*x1786*x1787)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1789=((-1.0)*pz);
r02=0;
r12=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1789);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1789);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1790=((1.0)*cj5);
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r10*sj0*x1790))+((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1790)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1791=((1.0)*cj5);
IkReal x1792=(cj1*sj3);
IkReal x1793=((1.0)*cj2);
IkReal x1794=(cj1*cj3);
IkReal x1795=(sj1*sj3);
IkReal x1796=(cj3*sj1);
CheckValue<IkReal> x1797=IKPowWithIntegerCheck(r22,-1);
if(!x1797.valid){
continue;
}
CheckValue<IkReal> x1798=IKPowWithIntegerCheck(((((-1.0)*r10*sj0*x1791))+(((-1.0)*cj0*r00*x1791))+((r11*sj0*sj5))+((cj0*r01*sj5))),-1);
if(!x1798.valid){
continue;
}
if( IKabs(((x1797.value)*(((((-1.0)*sj2*x1794))+(((-1.0)*x1792*x1793))+((sj2*x1795))+(((-1.0)*x1793*x1796)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1798.value)*((((sj2*x1796))+((cj2*x1795))+((sj2*x1792))+(((-1.0)*x1793*x1794)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1797.value)*(((((-1.0)*sj2*x1794))+(((-1.0)*x1792*x1793))+((sj2*x1795))+(((-1.0)*x1793*x1796))))))+IKsqr(((x1798.value)*((((sj2*x1796))+((cj2*x1795))+((sj2*x1792))+(((-1.0)*x1793*x1794))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1797.value)*(((((-1.0)*sj2*x1794))+(((-1.0)*x1792*x1793))+((sj2*x1795))+(((-1.0)*x1793*x1796))))), ((x1798.value)*((((sj2*x1796))+((cj2*x1795))+((sj2*x1792))+(((-1.0)*x1793*x1794))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
tj4 = IKtan(j4);
{
IkReal evalcond[6];
IkReal x1799=IKcos(j4);
IkReal x1800=IKsin(j4);
IkReal x1801=(r11*sj0);
IkReal x1802=(sj1*sj2);
IkReal x1803=(cj1*cj3);
IkReal x1804=(cj5*r10);
IkReal x1805=((1.0)*cj3);
IkReal x1806=(r01*sj5);
IkReal x1807=((1.0)*sj0);
IkReal x1808=((1.0)*r11);
IkReal x1809=(cj2*sj1);
IkReal x1810=(cj5*r00);
IkReal x1811=(sj5*x1800);
IkReal x1812=((1.0)*cj1*sj3);
IkReal x1813=(cj0*x1799);
IkReal x1814=((1.0)*cj0*x1810);
evalcond[0]=(r22*x1799);
evalcond[1]=((((-1.0)*sj2*x1803))+(((-1.0)*cj2*x1812))+((sj3*x1802))+(((-1.0)*x1805*x1809))+(((-1.0)*r22*x1800)));
evalcond[2]=((((-1.0)*sj5*x1808*x1813))+(((-1.0)*x1799*x1807*x1810))+((x1804*x1813))+((sj0*x1799*x1806)));
evalcond[3]=(((x1801*x1811))+((cj0*x1800*x1806))+(((-1.0)*x1800*x1814))+(((-1.0)*x1800*x1804*x1807)));
evalcond[4]=((1.0)+(((-1.0)*x1800*x1807*x1810))+((cj0*x1800*x1804))+((sj0*x1800*x1806))+(((-1.0)*cj0*x1808*x1811)));
evalcond[5]=((((-1.0)*x1802*x1805))+(((-1.0)*x1810*x1813))+((x1806*x1813))+(((-1.0)*sj2*x1812))+((cj2*x1803))+((sj5*x1799*x1801))+(((-1.0)*sj3*x1809))+(((-1.0)*x1799*x1804*x1807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1815=(cj5*r10);
IkReal x1816=(r11*sj5);
IkReal x1817=((1.0)*sj0);
IkReal x1818=(cj5*r00);
IkReal x1819=((1.0)*cj0);
IkReal x1820=(r01*sj5);
CheckValue<IkReal> x1821=IKPowWithIntegerCheck(((((-1.0)*x1817*x1818))+((cj0*x1815))+(((-1.0)*x1816*x1819))+((sj0*x1820))),-1);
if(!x1821.valid){
continue;
}
CheckValue<IkReal> x1822=IKPowWithIntegerCheck(((((-1.0)*x1818*x1819))+((sj0*x1816))+((cj0*x1820))+(((-1.0)*x1815*x1817))),-1);
if(!x1822.valid){
continue;
}
if( IKabs(((-1.0)*(x1821.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1822.value)*((((cj1*sj2*sj3))+(((-1.0)*cj1*cj2*cj3))+((cj2*sj1*sj3))+((cj3*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x1821.value)))+IKsqr(((x1822.value)*((((cj1*sj2*sj3))+(((-1.0)*cj1*cj2*cj3))+((cj2*sj1*sj3))+((cj3*sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x1821.value)), ((x1822.value)*((((cj1*sj2*sj3))+(((-1.0)*cj1*cj2*cj3))+((cj2*sj1*sj3))+((cj3*sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
tj4 = IKtan(j4);
{
IkReal evalcond[6];
IkReal x1823=IKcos(j4);
IkReal x1824=IKsin(j4);
IkReal x1825=(r11*sj0);
IkReal x1826=(sj1*sj2);
IkReal x1827=(cj1*cj3);
IkReal x1828=(cj5*r10);
IkReal x1829=((1.0)*cj3);
IkReal x1830=(r01*sj5);
IkReal x1831=((1.0)*sj0);
IkReal x1832=((1.0)*r11);
IkReal x1833=(cj2*sj1);
IkReal x1834=(cj5*r00);
IkReal x1835=(sj5*x1824);
IkReal x1836=((1.0)*cj1*sj3);
IkReal x1837=(cj0*x1823);
IkReal x1838=((1.0)*cj0*x1834);
evalcond[0]=(r22*x1823);
evalcond[1]=(((sj3*x1826))+(((-1.0)*x1829*x1833))+(((-1.0)*cj2*x1836))+(((-1.0)*sj2*x1827))+(((-1.0)*r22*x1824)));
evalcond[2]=((((-1.0)*sj5*x1832*x1837))+((x1828*x1837))+((sj0*x1823*x1830))+(((-1.0)*x1823*x1831*x1834)));
evalcond[3]=((((-1.0)*x1824*x1828*x1831))+((cj0*x1824*x1830))+(((-1.0)*x1824*x1838))+((x1825*x1835)));
evalcond[4]=((1.0)+(((-1.0)*cj0*x1832*x1835))+((sj0*x1824*x1830))+(((-1.0)*x1824*x1831*x1834))+((cj0*x1824*x1828)));
evalcond[5]=((((-1.0)*sj2*x1836))+(((-1.0)*x1823*x1828*x1831))+((sj5*x1823*x1825))+(((-1.0)*x1834*x1837))+(((-1.0)*x1826*x1829))+((x1830*x1837))+(((-1.0)*sj3*x1833))+((cj2*x1827)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1839=cj0*cj0;
IkReal x1840=((0.39225)*cj0);
IkReal x1841=(sj1*sj2);
IkReal x1842=(cj1*cj2);
IkReal x1843=((0.425)*cj1);
IkReal x1844=(r00*sj0);
IkReal x1845=(py*r00);
IkReal x1846=(cj0*r10);
IkReal x1847=(cj0*r11);
IkReal x1848=(py*sj0);
IkReal x1849=(cj0*px);
IkReal x1850=((1.0)*r01);
IkReal x1851=((1.0)*x1839);
IkReal x1852=((0.39225)*r01*sj0);
CheckValue<IkReal> x1853 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x1840*x1841))+((x1847*x1848))+((py*r01*x1839))+(((-1.0)*r01*sj0*x1843))+((r11*x1840*x1842))+(((-1.0)*py*x1850))+((x1843*x1847))+(((-1.0)*x1842*x1852))+(((-1.0)*sj0*x1849*x1850))+((px*r11*x1839))+((x1841*x1852)))),IkReal(((((-1.0)*x1843*x1846))+((x1844*x1849))+(((-1.0)*x1845*x1851))+((x1843*x1844))+(((-1.0)*x1846*x1848))+((r10*x1840*x1841))+(((-1.0)*px*r10*x1851))+(((-1.0)*r10*x1840*x1842))+(((0.39225)*x1842*x1844))+x1845+(((-0.39225)*x1841*x1844)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1853.valid){
continue;
}
CheckValue<IkReal> x1854=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x1854.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1853.value)+(((-1.5707963267949)*(x1854.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
tj5 = IKtan(j5);
{
IkReal evalcond[4];
IkReal x1855=IKcos(j5);
IkReal x1856=IKsin(j5);
IkReal x1857=((0.09465)*sj0);
IkReal x1858=((0.39225)*sj1);
IkReal x1859=((1.0)*sj0);
IkReal x1860=((0.09465)*cj0);
IkReal x1861=((1.0)*cj0);
IkReal x1862=((0.39225)*cj1);
IkReal x1863=(r11*x1855);
IkReal x1864=(r00*x1856);
IkReal x1865=(r01*x1855);
IkReal x1866=(r10*x1856);
evalcond[0]=(((cj2*x1858))+(((0.09465)*r20*x1856))+(((0.425)*sj1))+pz+((sj2*x1862))+(((0.09465)*r21*x1855)));
evalcond[1]=(((sj0*x1865))+(((-1.0)*x1861*x1866))+((sj0*x1864))+(((-1.0)*x1861*x1863)));
evalcond[2]=((0.10915)+(((-1.0)*x1857*x1864))+((x1860*x1866))+(((-1.0)*x1857*x1865))+(((-1.0)*px*x1859))+((x1860*x1863))+((cj0*py)));
evalcond[3]=((((-1.0)*x1860*x1865))+(((-1.0)*py*x1859))+((sj2*x1858))+(((-1.0)*x1860*x1864))+(((-1.0)*px*x1861))+(((-1.0)*x1857*x1863))+(((-1.0)*cj2*x1862))+(((-1.0)*x1857*x1866))+(((-0.425)*cj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1867=((1.0)*sj2);
IkReal x1868=(sj1*sj5);
IkReal x1869=(cj0*cj1);
IkReal x1870=(cj5*r01);
IkReal x1871=(r00*sj5);
IkReal x1872=((1.0)*cj2);
IkReal x1873=(cj0*sj1);
IkReal x1874=(r10*sj0);
IkReal x1875=(cj1*sj5);
IkReal x1876=(cj0*r00);
IkReal x1877=(cj5*r21);
IkReal x1878=(cj5*r11*sj0);
if( IKabs(((((-1.0)*cj1*x1872*x1878))+((sj2*x1870*x1873))+(((-1.0)*r20*x1868*x1872))+((sj2*x1868*x1874))+(((-1.0)*x1869*x1871*x1872))+(((-1.0)*x1869*x1870*x1872))+(((-1.0)*r20*x1867*x1875))+(((-1.0)*cj1*x1867*x1877))+((sj2*x1868*x1876))+((sj1*sj2*x1878))+(((-1.0)*sj1*x1872*x1877))+(((-1.0)*x1872*x1874*x1875)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x1872*x1878))+(((-1.0)*x1868*x1872*x1876))+(((-1.0)*x1868*x1872*x1874))+(((-1.0)*x1870*x1872*x1873))+((cj1*cj2*x1877))+(((-1.0)*r20*x1867*x1868))+(((-1.0)*x1867*x1869*x1870))+(((-1.0)*x1867*x1869*x1871))+((cj2*r20*x1875))+(((-1.0)*sj1*x1867*x1877))+(((-1.0)*x1867*x1874*x1875))+(((-1.0)*cj1*x1867*x1878)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x1872*x1878))+((sj2*x1870*x1873))+(((-1.0)*r20*x1868*x1872))+((sj2*x1868*x1874))+(((-1.0)*x1869*x1871*x1872))+(((-1.0)*x1869*x1870*x1872))+(((-1.0)*r20*x1867*x1875))+(((-1.0)*cj1*x1867*x1877))+((sj2*x1868*x1876))+((sj1*sj2*x1878))+(((-1.0)*sj1*x1872*x1877))+(((-1.0)*x1872*x1874*x1875))))+IKsqr(((((-1.0)*sj1*x1872*x1878))+(((-1.0)*x1868*x1872*x1876))+(((-1.0)*x1868*x1872*x1874))+(((-1.0)*x1870*x1872*x1873))+((cj1*cj2*x1877))+(((-1.0)*r20*x1867*x1868))+(((-1.0)*x1867*x1869*x1870))+(((-1.0)*x1867*x1869*x1871))+((cj2*r20*x1875))+(((-1.0)*sj1*x1867*x1877))+(((-1.0)*x1867*x1874*x1875))+(((-1.0)*cj1*x1867*x1878))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*cj1*x1872*x1878))+((sj2*x1870*x1873))+(((-1.0)*r20*x1868*x1872))+((sj2*x1868*x1874))+(((-1.0)*x1869*x1871*x1872))+(((-1.0)*x1869*x1870*x1872))+(((-1.0)*r20*x1867*x1875))+(((-1.0)*cj1*x1867*x1877))+((sj2*x1868*x1876))+((sj1*sj2*x1878))+(((-1.0)*sj1*x1872*x1877))+(((-1.0)*x1872*x1874*x1875))), ((((-1.0)*sj1*x1872*x1878))+(((-1.0)*x1868*x1872*x1876))+(((-1.0)*x1868*x1872*x1874))+(((-1.0)*x1870*x1872*x1873))+((cj1*cj2*x1877))+(((-1.0)*r20*x1867*x1868))+(((-1.0)*x1867*x1869*x1870))+(((-1.0)*x1867*x1869*x1871))+((cj2*r20*x1875))+(((-1.0)*sj1*x1867*x1877))+(((-1.0)*x1867*x1874*x1875))+(((-1.0)*cj1*x1867*x1878))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
tj3 = IKtan(j3);
{
IkReal evalcond[2];
IkReal x1879=IKsin(j3);
IkReal x1880=IKcos(j3);
IkReal x1881=((1.0)*sj2);
IkReal x1882=(cj2*x1880);
IkReal x1883=(cj1*x1879);
IkReal x1884=(sj1*x1879);
evalcond[0]=((((-1.0)*sj1*x1880*x1881))+((cj1*x1882))+(((-1.0)*x1881*x1883))+(((-1.0)*cj5*r21))+(((-1.0)*r20*sj5))+(((-1.0)*cj2*x1884)));
evalcond[1]=(((cj2*x1883))+((sj1*x1882))+(((-1.0)*x1881*x1884))+((cj5*r11*sj0))+((r10*sj0*sj5))+((cj1*sj2*x1880))+((cj0*r00*sj5))+((cj0*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x1885=(((cj5*r11*sj0))+((r10*sj0*sj5))+((cj0*r00*sj5))+((cj0*cj5*r01)));
j4eval[0]=x1885;
j4eval[1]=IKsign(x1885);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20))+((r21*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1886=cj5*cj5;
IkReal x1887=r21*r21;
IkReal x1888=((r22*r22)+(((-2.0)*cj5*r20*r21*sj5))+x1887+(((-1.0)*x1886*x1887))+((x1886*(r20*r20))));
j4eval[0]=x1888;
j4eval[1]=IKsign(x1888);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1889=cj5*cj5;
IkReal x1890=((1.0)*r22);
IkReal x1891=(cj0*r21);
IkReal x1892=(cj5*sj5);
IkReal x1893=(sj0*x1892);
IkReal x1894=(r11*r21*sj0);
IkReal x1895=((1.0)*r20*x1889);
IkReal x1896=(((cj0*r01*r20*x1892))+((r10*r21*x1893))+((r11*r20*x1893))+(((-1.0)*cj0*r02*x1890))+(((-1.0)*r12*sj0*x1890))+(((-1.0)*r10*sj0*x1895))+(((-1.0)*cj0*r00*x1895))+((r01*x1889*x1891))+((r00*x1891*x1892))+((x1889*x1894))+(((-1.0)*x1894))+(((-1.0)*r01*x1891)));
j4eval[0]=x1896;
j4eval[1]=IKsign(x1896);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1897=cj5*cj5;
IkReal x1898=((1.0)*sj0);
IkReal x1899=(cj0*r00);
IkReal x1900=(r11*r21);
IkReal x1901=(cj5*r20);
IkReal x1902=(sj0*sj5);
IkReal x1903=(r21*sj5);
IkReal x1904=(cj0*r01);
IkReal x1905=((1.0)*r22);
IkReal x1906=(cj1*cj2*cj3);
IkReal x1907=(r20*x1897);
IkReal x1908=(cj2*sj1*sj3);
IkReal x1909=(cj1*sj2*sj3);
IkReal x1910=(cj3*sj1*sj2);
CheckValue<IkReal> x1911 = IKatan2WithCheck(IkReal(((((-1.0)*x1905*x1909))+(((-1.0)*x1905*x1908))+((r22*x1906))+(((-1.0)*x1905*x1910)))),IkReal(((((-1.0)*x1903*x1909))+(((-1.0)*x1903*x1908))+(((-1.0)*x1903*x1910))+(((-1.0)*x1901*x1906))+((x1901*x1909))+((x1901*x1908))+((x1903*x1906))+((x1901*x1910)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1911.valid){
continue;
}
CheckValue<IkReal> x1912=IKPowWithIntegerCheck(IKsign((((cj5*r10*r21*x1902))+((r11*x1901*x1902))+((sj5*x1901*x1904))+((r21*x1897*x1904))+((cj5*x1899*x1903))+(((-1.0)*cj0*r02*x1905))+(((-1.0)*r21*x1904))+(((-1.0)*x1898*x1900))+(((-1.0)*x1899*x1907))+(((-1.0)*r12*r22*x1898))+((sj0*x1897*x1900))+(((-1.0)*r10*x1898*x1907)))),-1);
if(!x1912.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1911.value)+(((1.5707963267949)*(x1912.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
tj4 = IKtan(j4);
{
IkReal evalcond[6];
IkReal x1913=IKsin(j4);
IkReal x1914=IKcos(j4);
IkReal x1915=(r11*sj5);
IkReal x1916=((1.0)*cj5);
IkReal x1917=(sj1*sj2);
IkReal x1918=(cj5*r20);
IkReal x1919=(cj1*cj3);
IkReal x1920=(cj5*r10);
IkReal x1921=((1.0)*cj3);
IkReal x1922=(r01*sj5);
IkReal x1923=((1.0)*r12);
IkReal x1924=(cj2*sj1);
IkReal x1925=((1.0)*r02);
IkReal x1926=(r21*sj5);
IkReal x1927=(sj0*x1913);
IkReal x1928=((1.0)*cj1*sj3);
IkReal x1929=(cj0*x1914);
IkReal x1930=(cj0*x1913);
IkReal x1931=(sj0*x1914);
IkReal x1932=((1.0)*x1913);
IkReal x1933=(cj0*r00*x1916);
evalcond[0]=((((-1.0)*x1926*x1932))+((x1913*x1918))+((r22*x1914)));
evalcond[1]=(((x1914*x1918))+(((-1.0)*r22*x1932))+(((-1.0)*sj2*x1919))+(((-1.0)*cj2*x1928))+(((-1.0)*x1914*x1926))+(((-1.0)*x1921*x1924))+((sj3*x1917)));
evalcond[2]=(((r02*x1927))+((x1920*x1929))+(((-1.0)*r00*x1916*x1931))+(((-1.0)*x1923*x1930))+((x1922*x1931))+(((-1.0)*x1915*x1929)));
evalcond[3]=((((-1.0)*x1925*x1929))+(((-1.0)*r00*x1916*x1930))+((x1915*x1927))+(((-1.0)*r10*x1916*x1927))+(((-1.0)*x1923*x1931))+((x1922*x1930)));
evalcond[4]=((1.0)+(((-1.0)*r00*x1916*x1927))+((r12*x1929))+((x1922*x1927))+((x1920*x1930))+(((-1.0)*x1915*x1930))+(((-1.0)*x1925*x1931)));
evalcond[5]=((((-1.0)*x1917*x1921))+((cj2*x1919))+((x1922*x1929))+((r12*x1927))+((x1915*x1931))+(((-1.0)*r10*x1916*x1931))+(((-1.0)*sj2*x1928))+(((-1.0)*sj3*x1924))+((r02*x1930))+(((-1.0)*r00*x1916*x1929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1934=cj5*cj5;
IkReal x1935=r21*r21;
IkReal x1936=(r22*sj1);
IkReal x1937=(sj2*sj3);
IkReal x1938=(cj2*cj3);
IkReal x1939=(cj5*r20);
IkReal x1940=((1.0)*sj1);
IkReal x1941=(r21*sj5);
IkReal x1942=(cj1*cj3*sj2);
IkReal x1943=((1.0)*cj1*cj2*sj3);
CheckValue<IkReal> x1944 = IKatan2WithCheck(IkReal((((x1936*x1937))+(((-1.0)*x1936*x1938))+(((-1.0)*r22*x1943))+(((-1.0)*r22*x1942)))),IkReal((((cj1*cj2*sj3*x1939))+(((-1.0)*x1941*x1943))+((sj1*x1938*x1939))+((sj1*x1937*x1941))+(((-1.0)*x1938*x1940*x1941))+(((-1.0)*x1937*x1939*x1940))+(((-1.0)*x1941*x1942))+((x1939*x1942)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1944.valid){
continue;
}
CheckValue<IkReal> x1945=IKPowWithIntegerCheck(IKsign((x1935+(r22*r22)+(((-1.0)*x1934*x1935))+((x1934*(r20*r20)))+(((-2.0)*x1939*x1941)))),-1);
if(!x1945.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1944.value)+(((1.5707963267949)*(x1945.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
tj4 = IKtan(j4);
{
IkReal evalcond[6];
IkReal x1946=IKsin(j4);
IkReal x1947=IKcos(j4);
IkReal x1948=(r11*sj5);
IkReal x1949=((1.0)*cj5);
IkReal x1950=(sj1*sj2);
IkReal x1951=(cj5*r20);
IkReal x1952=(cj1*cj3);
IkReal x1953=(cj5*r10);
IkReal x1954=((1.0)*cj3);
IkReal x1955=(r01*sj5);
IkReal x1956=((1.0)*r12);
IkReal x1957=(cj2*sj1);
IkReal x1958=((1.0)*r02);
IkReal x1959=(r21*sj5);
IkReal x1960=(sj0*x1946);
IkReal x1961=((1.0)*cj1*sj3);
IkReal x1962=(cj0*x1947);
IkReal x1963=(cj0*x1946);
IkReal x1964=(sj0*x1947);
IkReal x1965=((1.0)*x1946);
IkReal x1966=(cj0*r00*x1949);
evalcond[0]=(((r22*x1947))+((x1946*x1951))+(((-1.0)*x1959*x1965)));
evalcond[1]=((((-1.0)*r22*x1965))+(((-1.0)*x1947*x1959))+((sj3*x1950))+((x1947*x1951))+(((-1.0)*sj2*x1952))+(((-1.0)*x1954*x1957))+(((-1.0)*cj2*x1961)));
evalcond[2]=((((-1.0)*x1956*x1963))+(((-1.0)*r00*x1949*x1964))+((x1953*x1962))+((r02*x1960))+((x1955*x1964))+(((-1.0)*x1948*x1962)));
evalcond[3]=((((-1.0)*r10*x1949*x1960))+((x1948*x1960))+(((-1.0)*r00*x1949*x1963))+(((-1.0)*x1958*x1962))+((x1955*x1963))+(((-1.0)*x1956*x1964)));
evalcond[4]=((1.0)+((x1955*x1960))+((x1953*x1963))+(((-1.0)*r00*x1949*x1960))+((r12*x1962))+(((-1.0)*x1948*x1963))+(((-1.0)*x1958*x1964)));
evalcond[5]=(((r12*x1960))+(((-1.0)*sj3*x1957))+((x1948*x1964))+(((-1.0)*x1950*x1954))+((cj2*x1952))+(((-1.0)*r00*x1949*x1962))+(((-1.0)*r10*x1949*x1964))+((x1955*x1962))+((r02*x1963))+(((-1.0)*sj2*x1961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1967 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj5*r20))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1967.valid){
continue;
}
CheckValue<IkReal> x1968=IKPowWithIntegerCheck(IKsign((((cj5*r11*sj0))+((r10*sj0*sj5))+((cj0*r00*sj5))+((cj0*cj5*r01)))),-1);
if(!x1968.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1967.value)+(((1.5707963267949)*(x1968.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
tj4 = IKtan(j4);
{
IkReal evalcond[6];
IkReal x1969=IKsin(j4);
IkReal x1970=IKcos(j4);
IkReal x1971=(r11*sj5);
IkReal x1972=((1.0)*cj5);
IkReal x1973=(sj1*sj2);
IkReal x1974=(cj5*r20);
IkReal x1975=(cj1*cj3);
IkReal x1976=(cj5*r10);
IkReal x1977=((1.0)*cj3);
IkReal x1978=(r01*sj5);
IkReal x1979=((1.0)*r12);
IkReal x1980=(cj2*sj1);
IkReal x1981=((1.0)*r02);
IkReal x1982=(r21*sj5);
IkReal x1983=(sj0*x1969);
IkReal x1984=((1.0)*cj1*sj3);
IkReal x1985=(cj0*x1970);
IkReal x1986=(cj0*x1969);
IkReal x1987=(sj0*x1970);
IkReal x1988=((1.0)*x1969);
IkReal x1989=(cj0*r00*x1972);
evalcond[0]=(((r22*x1970))+((x1969*x1974))+(((-1.0)*x1982*x1988)));
evalcond[1]=(((x1970*x1974))+(((-1.0)*r22*x1988))+((sj3*x1973))+(((-1.0)*x1970*x1982))+(((-1.0)*cj2*x1984))+(((-1.0)*x1977*x1980))+(((-1.0)*sj2*x1975)));
evalcond[2]=(((x1978*x1987))+(((-1.0)*r00*x1972*x1987))+(((-1.0)*x1979*x1986))+((x1976*x1985))+((r02*x1983))+(((-1.0)*x1971*x1985)));
evalcond[3]=(((x1971*x1983))+(((-1.0)*x1981*x1985))+((x1978*x1986))+(((-1.0)*r00*x1972*x1986))+(((-1.0)*r10*x1972*x1983))+(((-1.0)*x1979*x1987)));
evalcond[4]=((1.0)+((x1976*x1986))+((x1978*x1983))+(((-1.0)*x1981*x1987))+((r12*x1985))+(((-1.0)*x1971*x1986))+(((-1.0)*r00*x1972*x1983)));
evalcond[5]=((((-1.0)*sj3*x1980))+((r12*x1983))+((cj2*x1975))+((x1978*x1985))+(((-1.0)*r00*x1972*x1985))+(((-1.0)*r10*x1972*x1987))+((r02*x1986))+(((-1.0)*x1973*x1977))+(((-1.0)*sj2*x1984))+((x1971*x1987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1990=((1893.0)*sj0);
IkReal x1991=((804.525)*sj1);
IkReal x1992=((1893.0)*cj0);
IkReal x1993=((742.52925)*sj1*sj2);
IkReal x1994=((742.52925)*cj2*sj1);
IkReal x1995=((742.52925)*cj1*sj2);
IkReal x1996=((((804.525)*cj1))+(((742.52925)*cj1*cj2)));
IkReal x1997=(((sj0*x1995))+((sj0*x1994))+((sj0*x1991)));
IkReal x1998=(((cj0*x1991))+((cj0*x1995))+((cj0*x1994)));
CheckValue<IkReal> x1999 = IKatan2WithCheck(IkReal(((((-1.0)*rxp1_1*x1992))+((r11*x1997))+((r21*(((((-1.0)*x1996))+x1993))))+((rxp1_0*x1990))+((r01*x1998)))),IkReal(((((-1.0)*rxp0_0*x1990))+(((-1.0)*r10*x1997))+((rxp0_1*x1992))+(((-1.0)*r00*x1998))+((r20*(((((-1.0)*x1993))+x1996)))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1999.valid){
continue;
}
CheckValue<IkReal> x2000=IKPowWithIntegerCheck(IKsign(((((179.17245)*r02*sj0))+(((-179.17245)*cj0*r12)))),-1);
if(!x2000.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1999.value)+(((1.5707963267949)*(x2000.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
tj5 = IKtan(j5);
{
IkReal evalcond[4];
IkReal x2001=IKcos(j5);
IkReal x2002=IKsin(j5);
IkReal x2003=((0.09465)*sj0);
IkReal x2004=((0.39225)*sj1);
IkReal x2005=((1.0)*sj0);
IkReal x2006=((0.09465)*cj0);
IkReal x2007=((1.0)*cj0);
IkReal x2008=((0.39225)*cj1);
IkReal x2009=(r11*x2001);
IkReal x2010=(r00*x2002);
IkReal x2011=(r01*x2001);
IkReal x2012=(r10*x2002);
evalcond[0]=((((0.09465)*r21*x2001))+(((0.425)*sj1))+((sj2*x2008))+(((0.09465)*r20*x2002))+pz+((cj2*x2004)));
evalcond[1]=(((sj0*x2011))+(((-1.0)*x2007*x2012))+((sj0*x2010))+(((-1.0)*x2007*x2009)));
evalcond[2]=((0.10915)+((x2006*x2012))+(((-1.0)*px*x2005))+(((-1.0)*x2003*x2010))+((x2006*x2009))+(((-1.0)*x2003*x2011))+((cj0*py)));
evalcond[3]=((((-1.0)*x2003*x2012))+(((-1.0)*x2003*x2009))+(((-1.0)*py*x2005))+(((-1.0)*cj2*x2008))+(((-1.0)*x2006*x2011))+((sj2*x2004))+(((-1.0)*px*x2007))+(((-1.0)*x2006*x2010))+(((-0.425)*cj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2013=((1.0)*sj2);
IkReal x2014=(sj1*sj5);
IkReal x2015=(cj0*cj1);
IkReal x2016=(cj5*r01);
IkReal x2017=(r00*sj5);
IkReal x2018=((1.0)*cj2);
IkReal x2019=(cj0*sj1);
IkReal x2020=(r10*sj0);
IkReal x2021=(cj1*sj5);
IkReal x2022=(cj0*r00);
IkReal x2023=(cj5*r21);
IkReal x2024=(cj5*r11*sj0);
if( IKabs(((((-1.0)*r20*x2014*x2018))+(((-1.0)*x2018*x2020*x2021))+((sj1*sj2*x2024))+(((-1.0)*x2015*x2016*x2018))+((sj2*x2014*x2020))+(((-1.0)*cj1*x2018*x2024))+(((-1.0)*r20*x2013*x2021))+((sj2*x2014*x2022))+(((-1.0)*x2015*x2017*x2018))+(((-1.0)*cj1*x2013*x2023))+(((-1.0)*sj1*x2018*x2023))+((sj2*x2016*x2019)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj2*r20*x2021))+(((-1.0)*x2013*x2015*x2017))+(((-1.0)*sj1*x2018*x2024))+((cj1*cj2*x2023))+(((-1.0)*x2013*x2020*x2021))+(((-1.0)*x2016*x2018*x2019))+(((-1.0)*r20*x2013*x2014))+(((-1.0)*x2013*x2015*x2016))+(((-1.0)*sj1*x2013*x2023))+(((-1.0)*cj1*x2013*x2024))+(((-1.0)*x2014*x2018*x2022))+(((-1.0)*x2014*x2018*x2020)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x2014*x2018))+(((-1.0)*x2018*x2020*x2021))+((sj1*sj2*x2024))+(((-1.0)*x2015*x2016*x2018))+((sj2*x2014*x2020))+(((-1.0)*cj1*x2018*x2024))+(((-1.0)*r20*x2013*x2021))+((sj2*x2014*x2022))+(((-1.0)*x2015*x2017*x2018))+(((-1.0)*cj1*x2013*x2023))+(((-1.0)*sj1*x2018*x2023))+((sj2*x2016*x2019))))+IKsqr((((cj2*r20*x2021))+(((-1.0)*x2013*x2015*x2017))+(((-1.0)*sj1*x2018*x2024))+((cj1*cj2*x2023))+(((-1.0)*x2013*x2020*x2021))+(((-1.0)*x2016*x2018*x2019))+(((-1.0)*r20*x2013*x2014))+(((-1.0)*x2013*x2015*x2016))+(((-1.0)*sj1*x2013*x2023))+(((-1.0)*cj1*x2013*x2024))+(((-1.0)*x2014*x2018*x2022))+(((-1.0)*x2014*x2018*x2020))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r20*x2014*x2018))+(((-1.0)*x2018*x2020*x2021))+((sj1*sj2*x2024))+(((-1.0)*x2015*x2016*x2018))+((sj2*x2014*x2020))+(((-1.0)*cj1*x2018*x2024))+(((-1.0)*r20*x2013*x2021))+((sj2*x2014*x2022))+(((-1.0)*x2015*x2017*x2018))+(((-1.0)*cj1*x2013*x2023))+(((-1.0)*sj1*x2018*x2023))+((sj2*x2016*x2019))), (((cj2*r20*x2021))+(((-1.0)*x2013*x2015*x2017))+(((-1.0)*sj1*x2018*x2024))+((cj1*cj2*x2023))+(((-1.0)*x2013*x2020*x2021))+(((-1.0)*x2016*x2018*x2019))+(((-1.0)*r20*x2013*x2014))+(((-1.0)*x2013*x2015*x2016))+(((-1.0)*sj1*x2013*x2023))+(((-1.0)*cj1*x2013*x2024))+(((-1.0)*x2014*x2018*x2022))+(((-1.0)*x2014*x2018*x2020))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
tj3 = IKtan(j3);
{
IkReal evalcond[2];
IkReal x2025=IKsin(j3);
IkReal x2026=IKcos(j3);
IkReal x2027=((1.0)*sj2);
IkReal x2028=(cj2*x2026);
IkReal x2029=(cj1*x2025);
IkReal x2030=(sj1*x2025);
evalcond[0]=((((-1.0)*cj2*x2030))+(((-1.0)*x2027*x2029))+((cj1*x2028))+(((-1.0)*sj1*x2026*x2027))+(((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
evalcond[1]=(((sj1*x2028))+((cj5*r11*sj0))+((cj1*sj2*x2026))+((cj2*x2029))+((r10*sj0*sj5))+(((-1.0)*x2027*x2030))+((cj0*r00*sj5))+((cj0*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x2031=(((cj5*r11*sj0))+((r10*sj0*sj5))+((cj0*r00*sj5))+((cj0*cj5*r01)));
j4eval[0]=x2031;
j4eval[1]=IKsign(x2031);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20))+((r21*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2032=cj5*cj5;
IkReal x2033=r21*r21;
IkReal x2034=((r22*r22)+(((-2.0)*cj5*r20*r21*sj5))+(((-1.0)*x2032*x2033))+x2033+((x2032*(r20*r20))));
j4eval[0]=x2034;
j4eval[1]=IKsign(x2034);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2035=cj5*cj5;
IkReal x2036=((1.0)*r22);
IkReal x2037=(cj0*r21);
IkReal x2038=(cj5*sj5);
IkReal x2039=(sj0*x2038);
IkReal x2040=(r11*r21*sj0);
IkReal x2041=((1.0)*r20*x2035);
IkReal x2042=((((-1.0)*x2040))+((r01*x2035*x2037))+((r00*x2037*x2038))+(((-1.0)*r10*sj0*x2041))+(((-1.0)*r12*sj0*x2036))+(((-1.0)*r01*x2037))+((x2035*x2040))+(((-1.0)*cj0*r02*x2036))+((r10*r21*x2039))+((r11*r20*x2039))+(((-1.0)*cj0*r00*x2041))+((cj0*r01*r20*x2038)));
j4eval[0]=x2042;
j4eval[1]=IKsign(x2042);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2043=cj5*cj5;
IkReal x2044=((1.0)*sj0);
IkReal x2045=(cj0*r00);
IkReal x2046=(r11*r21);
IkReal x2047=(cj5*r20);
IkReal x2048=(sj0*sj5);
IkReal x2049=(r21*sj5);
IkReal x2050=(cj0*r01);
IkReal x2051=((1.0)*r22);
IkReal x2052=(cj1*cj2*cj3);
IkReal x2053=(r20*x2043);
IkReal x2054=(cj2*sj1*sj3);
IkReal x2055=(cj1*sj2*sj3);
IkReal x2056=(cj3*sj1*sj2);
CheckValue<IkReal> x2057=IKPowWithIntegerCheck(IKsign((((r21*x2043*x2050))+(((-1.0)*x2045*x2053))+((cj5*x2045*x2049))+((sj0*x2043*x2046))+(((-1.0)*r10*x2044*x2053))+(((-1.0)*x2044*x2046))+(((-1.0)*r12*r22*x2044))+((cj5*r10*r21*x2048))+(((-1.0)*r21*x2050))+((r11*x2047*x2048))+(((-1.0)*cj0*r02*x2051))+((sj5*x2047*x2050)))),-1);
if(!x2057.valid){
continue;
}
CheckValue<IkReal> x2058 = IKatan2WithCheck(IkReal(((((-1.0)*x2051*x2055))+(((-1.0)*x2051*x2054))+((r22*x2052))+(((-1.0)*x2051*x2056)))),IkReal((((x2047*x2055))+(((-1.0)*x2047*x2052))+((x2047*x2054))+((x2049*x2052))+(((-1.0)*x2049*x2056))+((x2047*x2056))+(((-1.0)*x2049*x2055))+(((-1.0)*x2049*x2054)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2058.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2057.value)))+(x2058.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
tj4 = IKtan(j4);
{
IkReal evalcond[6];
IkReal x2059=IKsin(j4);
IkReal x2060=IKcos(j4);
IkReal x2061=(r11*sj5);
IkReal x2062=((1.0)*cj5);
IkReal x2063=(sj1*sj2);
IkReal x2064=(cj5*r20);
IkReal x2065=(cj1*cj3);
IkReal x2066=(cj5*r10);
IkReal x2067=((1.0)*cj3);
IkReal x2068=(r01*sj5);
IkReal x2069=((1.0)*r12);
IkReal x2070=(cj2*sj1);
IkReal x2071=((1.0)*r02);
IkReal x2072=(r21*sj5);
IkReal x2073=(sj0*x2059);
IkReal x2074=((1.0)*cj1*sj3);
IkReal x2075=(cj0*x2060);
IkReal x2076=(cj0*x2059);
IkReal x2077=(sj0*x2060);
IkReal x2078=((1.0)*x2059);
IkReal x2079=(cj0*r00*x2062);
evalcond[0]=(((r22*x2060))+(((-1.0)*x2072*x2078))+((x2059*x2064)));
evalcond[1]=((((-1.0)*r22*x2078))+(((-1.0)*sj2*x2065))+(((-1.0)*x2067*x2070))+(((-1.0)*x2060*x2072))+(((-1.0)*cj2*x2074))+((sj3*x2063))+((x2060*x2064)));
evalcond[2]=((((-1.0)*x2069*x2076))+((r02*x2073))+(((-1.0)*r00*x2062*x2077))+(((-1.0)*x2061*x2075))+((x2068*x2077))+((x2066*x2075)));
evalcond[3]=((((-1.0)*r10*x2062*x2073))+((x2061*x2073))+((x2068*x2076))+(((-1.0)*x2069*x2077))+(((-1.0)*x2071*x2075))+(((-1.0)*r00*x2062*x2076)));
evalcond[4]=((1.0)+(((-1.0)*x2071*x2077))+((x2068*x2073))+(((-1.0)*r00*x2062*x2073))+((x2066*x2076))+((r12*x2075))+(((-1.0)*x2061*x2076)));
evalcond[5]=(((r12*x2073))+(((-1.0)*r00*x2062*x2075))+(((-1.0)*r10*x2062*x2077))+((x2061*x2077))+((x2068*x2075))+(((-1.0)*sj3*x2070))+(((-1.0)*sj2*x2074))+((cj2*x2065))+(((-1.0)*x2063*x2067))+((r02*x2076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2080=cj5*cj5;
IkReal x2081=r21*r21;
IkReal x2082=(r22*sj1);
IkReal x2083=(sj2*sj3);
IkReal x2084=(cj2*cj3);
IkReal x2085=(cj5*r20);
IkReal x2086=((1.0)*sj1);
IkReal x2087=(r21*sj5);
IkReal x2088=(cj1*cj3*sj2);
IkReal x2089=((1.0)*cj1*cj2*sj3);
CheckValue<IkReal> x2090 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2088))+(((-1.0)*r22*x2089))+(((-1.0)*x2082*x2084))+((x2082*x2083)))),IkReal(((((-1.0)*x2087*x2089))+((x2085*x2088))+((sj1*x2084*x2085))+((sj1*x2083*x2087))+(((-1.0)*x2084*x2086*x2087))+(((-1.0)*x2087*x2088))+(((-1.0)*x2083*x2085*x2086))+((cj1*cj2*sj3*x2085)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2090.valid){
continue;
}
CheckValue<IkReal> x2091=IKPowWithIntegerCheck(IKsign(((r22*r22)+x2081+((x2080*(r20*r20)))+(((-2.0)*x2085*x2087))+(((-1.0)*x2080*x2081)))),-1);
if(!x2091.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2090.value)+(((1.5707963267949)*(x2091.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
tj4 = IKtan(j4);
{
IkReal evalcond[6];
IkReal x2092=IKsin(j4);
IkReal x2093=IKcos(j4);
IkReal x2094=(r11*sj5);
IkReal x2095=((1.0)*cj5);
IkReal x2096=(sj1*sj2);
IkReal x2097=(cj5*r20);
IkReal x2098=(cj1*cj3);
IkReal x2099=(cj5*r10);
IkReal x2100=((1.0)*cj3);
IkReal x2101=(r01*sj5);
IkReal x2102=((1.0)*r12);
IkReal x2103=(cj2*sj1);
IkReal x2104=((1.0)*r02);
IkReal x2105=(r21*sj5);
IkReal x2106=(sj0*x2092);
IkReal x2107=((1.0)*cj1*sj3);
IkReal x2108=(cj0*x2093);
IkReal x2109=(cj0*x2092);
IkReal x2110=(sj0*x2093);
IkReal x2111=((1.0)*x2092);
IkReal x2112=(cj0*r00*x2095);
evalcond[0]=(((r22*x2093))+((x2092*x2097))+(((-1.0)*x2105*x2111)));
evalcond[1]=(((x2093*x2097))+(((-1.0)*cj2*x2107))+(((-1.0)*r22*x2111))+(((-1.0)*x2093*x2105))+(((-1.0)*x2100*x2103))+((sj3*x2096))+(((-1.0)*sj2*x2098)));
evalcond[2]=((((-1.0)*x2094*x2108))+(((-1.0)*r00*x2095*x2110))+((x2101*x2110))+(((-1.0)*x2102*x2109))+((x2099*x2108))+((r02*x2106)));
evalcond[3]=((((-1.0)*x2102*x2110))+(((-1.0)*r10*x2095*x2106))+((x2094*x2106))+(((-1.0)*x2104*x2108))+((x2101*x2109))+(((-1.0)*r00*x2095*x2109)));
evalcond[4]=((1.0)+(((-1.0)*r00*x2095*x2106))+((x2101*x2106))+((r12*x2108))+(((-1.0)*x2104*x2110))+((x2099*x2109))+(((-1.0)*x2094*x2109)));
evalcond[5]=((((-1.0)*sj3*x2103))+((r02*x2109))+((cj2*x2098))+(((-1.0)*r00*x2095*x2108))+(((-1.0)*r10*x2095*x2110))+((x2094*x2110))+((r12*x2106))+(((-1.0)*x2096*x2100))+((x2101*x2108))+(((-1.0)*sj2*x2107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2113 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj5*r20))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2113.valid){
continue;
}
CheckValue<IkReal> x2114=IKPowWithIntegerCheck(IKsign((((cj5*r11*sj0))+((r10*sj0*sj5))+((cj0*r00*sj5))+((cj0*cj5*r01)))),-1);
if(!x2114.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2113.value)+(((1.5707963267949)*(x2114.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
tj4 = IKtan(j4);
{
IkReal evalcond[6];
IkReal x2115=IKsin(j4);
IkReal x2116=IKcos(j4);
IkReal x2117=(r11*sj5);
IkReal x2118=((1.0)*cj5);
IkReal x2119=(sj1*sj2);
IkReal x2120=(cj5*r20);
IkReal x2121=(cj1*cj3);
IkReal x2122=(cj5*r10);
IkReal x2123=((1.0)*cj3);
IkReal x2124=(r01*sj5);
IkReal x2125=((1.0)*r12);
IkReal x2126=(cj2*sj1);
IkReal x2127=((1.0)*r02);
IkReal x2128=(r21*sj5);
IkReal x2129=(sj0*x2115);
IkReal x2130=((1.0)*cj1*sj3);
IkReal x2131=(cj0*x2116);
IkReal x2132=(cj0*x2115);
IkReal x2133=(sj0*x2116);
IkReal x2134=((1.0)*x2115);
IkReal x2135=(cj0*r00*x2118);
evalcond[0]=(((x2115*x2120))+(((-1.0)*x2128*x2134))+((r22*x2116)));
evalcond[1]=((((-1.0)*sj2*x2121))+((x2116*x2120))+((sj3*x2119))+(((-1.0)*r22*x2134))+(((-1.0)*x2123*x2126))+(((-1.0)*x2116*x2128))+(((-1.0)*cj2*x2130)));
evalcond[2]=((((-1.0)*x2117*x2131))+(((-1.0)*x2125*x2132))+((x2124*x2133))+((x2122*x2131))+(((-1.0)*r00*x2118*x2133))+((r02*x2129)));
evalcond[3]=(((x2117*x2129))+((x2124*x2132))+(((-1.0)*x2127*x2131))+(((-1.0)*x2125*x2133))+(((-1.0)*r00*x2118*x2132))+(((-1.0)*r10*x2118*x2129)));
evalcond[4]=((1.0)+(((-1.0)*x2117*x2132))+(((-1.0)*x2127*x2133))+((r12*x2131))+((x2122*x2132))+((x2124*x2129))+(((-1.0)*r00*x2118*x2129)));
evalcond[5]=((((-1.0)*x2119*x2123))+((cj2*x2121))+(((-1.0)*sj2*x2130))+((r12*x2129))+(((-1.0)*r10*x2118*x2133))+((x2124*x2131))+((r02*x2132))+(((-1.0)*r00*x2118*x2131))+((x2117*x2133))+(((-1.0)*sj3*x2126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2136=((7845.0)*sj0);
IkReal x2137=(cj2*sj1);
IkReal x2138=(cj0*r11);
IkReal x2139=((8500.0)*sj1);
IkReal x2140=(cj1*sj2);
IkReal x2141=(cj0*r10);
IkReal x2142=((20000.0)*pz*sj0);
IkReal x2143=((20000.0)*cj0*pz);
CheckValue<IkReal> x2144=IKPowWithIntegerCheck(IKsign(((((-1893.0)*cj0*r02))+(((-1893.0)*r12*sj0)))),-1);
if(!x2144.valid){
continue;
}
CheckValue<IkReal> x2145 = IKatan2WithCheck(IkReal(((((-20000.0)*pz*x2138))+((r01*sj0*x2139))+((r01*x2136*x2140))+(((-7845.0)*x2138*x2140))+(((-7845.0)*x2137*x2138))+((r01*x2136*x2137))+(((-1.0)*x2138*x2139))+((r01*x2142)))),IkReal((((x2139*x2141))+(((-1.0)*r00*x2142))+(((-1.0)*r00*x2136*x2137))+(((20000.0)*pz*x2141))+(((-1.0)*r00*sj0*x2139))+(((7845.0)*x2140*x2141))+(((7845.0)*x2137*x2141))+(((-1.0)*r00*x2136*x2140)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2145.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2144.value)))+(x2145.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
tj5 = IKtan(j5);
{
IkReal evalcond[4];
IkReal x2146=IKcos(j5);
IkReal x2147=IKsin(j5);
IkReal x2148=((0.09465)*sj0);
IkReal x2149=((0.39225)*sj1);
IkReal x2150=((1.0)*sj0);
IkReal x2151=((0.09465)*cj0);
IkReal x2152=((1.0)*cj0);
IkReal x2153=((0.39225)*cj1);
IkReal x2154=(r11*x2146);
IkReal x2155=(r00*x2147);
IkReal x2156=(r01*x2146);
IkReal x2157=(r10*x2147);
evalcond[0]=(((cj2*x2149))+(((0.425)*sj1))+((sj2*x2153))+(((0.09465)*r21*x2146))+pz+(((0.09465)*r20*x2147)));
evalcond[1]=(((sj0*x2155))+((sj0*x2156))+(((-1.0)*x2152*x2154))+(((-1.0)*x2152*x2157)));
evalcond[2]=((0.10915)+((x2151*x2154))+(((-1.0)*x2148*x2155))+(((-1.0)*px*x2150))+(((-1.0)*x2148*x2156))+((x2151*x2157))+((cj0*py)));
evalcond[3]=(((sj2*x2149))+(((-1.0)*cj2*x2153))+(((-1.0)*x2148*x2154))+(((-1.0)*x2151*x2155))+(((-1.0)*x2148*x2157))+(((-1.0)*x2151*x2156))+(((-1.0)*px*x2152))+(((-1.0)*py*x2150))+(((-0.425)*cj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2158=((1.0)*sj2);
IkReal x2159=(sj1*sj5);
IkReal x2160=(cj0*cj1);
IkReal x2161=(cj5*r01);
IkReal x2162=(r00*sj5);
IkReal x2163=((1.0)*cj2);
IkReal x2164=(cj0*sj1);
IkReal x2165=(r10*sj0);
IkReal x2166=(cj1*sj5);
IkReal x2167=(cj0*r00);
IkReal x2168=(cj5*r21);
IkReal x2169=(cj5*r11*sj0);
if( IKabs(((((-1.0)*sj1*x2163*x2168))+(((-1.0)*cj1*x2158*x2168))+(((-1.0)*x2163*x2165*x2166))+(((-1.0)*r20*x2158*x2166))+(((-1.0)*x2160*x2162*x2163))+((sj2*x2161*x2164))+((sj2*x2159*x2167))+(((-1.0)*cj1*x2163*x2169))+((sj2*x2159*x2165))+(((-1.0)*x2160*x2161*x2163))+((sj1*sj2*x2169))+(((-1.0)*r20*x2159*x2163)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj2*r20*x2166))+((cj1*cj2*x2168))+(((-1.0)*x2158*x2160*x2161))+(((-1.0)*x2158*x2160*x2162))+(((-1.0)*sj1*x2163*x2169))+(((-1.0)*cj1*x2158*x2169))+(((-1.0)*x2158*x2165*x2166))+(((-1.0)*x2161*x2163*x2164))+(((-1.0)*sj1*x2158*x2168))+(((-1.0)*r20*x2158*x2159))+(((-1.0)*x2159*x2163*x2167))+(((-1.0)*x2159*x2163*x2165)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj1*x2163*x2168))+(((-1.0)*cj1*x2158*x2168))+(((-1.0)*x2163*x2165*x2166))+(((-1.0)*r20*x2158*x2166))+(((-1.0)*x2160*x2162*x2163))+((sj2*x2161*x2164))+((sj2*x2159*x2167))+(((-1.0)*cj1*x2163*x2169))+((sj2*x2159*x2165))+(((-1.0)*x2160*x2161*x2163))+((sj1*sj2*x2169))+(((-1.0)*r20*x2159*x2163))))+IKsqr((((cj2*r20*x2166))+((cj1*cj2*x2168))+(((-1.0)*x2158*x2160*x2161))+(((-1.0)*x2158*x2160*x2162))+(((-1.0)*sj1*x2163*x2169))+(((-1.0)*cj1*x2158*x2169))+(((-1.0)*x2158*x2165*x2166))+(((-1.0)*x2161*x2163*x2164))+(((-1.0)*sj1*x2158*x2168))+(((-1.0)*r20*x2158*x2159))+(((-1.0)*x2159*x2163*x2167))+(((-1.0)*x2159*x2163*x2165))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*sj1*x2163*x2168))+(((-1.0)*cj1*x2158*x2168))+(((-1.0)*x2163*x2165*x2166))+(((-1.0)*r20*x2158*x2166))+(((-1.0)*x2160*x2162*x2163))+((sj2*x2161*x2164))+((sj2*x2159*x2167))+(((-1.0)*cj1*x2163*x2169))+((sj2*x2159*x2165))+(((-1.0)*x2160*x2161*x2163))+((sj1*sj2*x2169))+(((-1.0)*r20*x2159*x2163))), (((cj2*r20*x2166))+((cj1*cj2*x2168))+(((-1.0)*x2158*x2160*x2161))+(((-1.0)*x2158*x2160*x2162))+(((-1.0)*sj1*x2163*x2169))+(((-1.0)*cj1*x2158*x2169))+(((-1.0)*x2158*x2165*x2166))+(((-1.0)*x2161*x2163*x2164))+(((-1.0)*sj1*x2158*x2168))+(((-1.0)*r20*x2158*x2159))+(((-1.0)*x2159*x2163*x2167))+(((-1.0)*x2159*x2163*x2165))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
tj3 = IKtan(j3);
{
IkReal evalcond[2];
IkReal x2170=IKsin(j3);
IkReal x2171=IKcos(j3);
IkReal x2172=((1.0)*sj2);
IkReal x2173=(cj2*x2171);
IkReal x2174=(cj1*x2170);
IkReal x2175=(sj1*x2170);
evalcond[0]=((((-1.0)*cj2*x2175))+(((-1.0)*sj1*x2171*x2172))+(((-1.0)*cj5*r21))+(((-1.0)*r20*sj5))+((cj1*x2173))+(((-1.0)*x2172*x2174)));
evalcond[1]=(((cj5*r11*sj0))+((cj1*sj2*x2171))+((r10*sj0*sj5))+((sj1*x2173))+((cj0*r00*sj5))+((cj0*cj5*r01))+((cj2*x2174))+(((-1.0)*x2172*x2175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x2176=(((cj5*r11*sj0))+((r10*sj0*sj5))+((cj0*r00*sj5))+((cj0*cj5*r01)));
j4eval[0]=x2176;
j4eval[1]=IKsign(x2176);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20))+((r21*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2177=cj5*cj5;
IkReal x2178=r21*r21;
IkReal x2179=(((x2177*(r20*r20)))+(r22*r22)+(((-2.0)*cj5*r20*r21*sj5))+(((-1.0)*x2177*x2178))+x2178);
j4eval[0]=x2179;
j4eval[1]=IKsign(x2179);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2180=cj5*cj5;
IkReal x2181=((1.0)*r22);
IkReal x2182=(cj0*r21);
IkReal x2183=(cj5*sj5);
IkReal x2184=(sj0*x2183);
IkReal x2185=(r11*r21*sj0);
IkReal x2186=((1.0)*r20*x2180);
IkReal x2187=((((-1.0)*cj0*r02*x2181))+(((-1.0)*r12*sj0*x2181))+(((-1.0)*r10*sj0*x2186))+((cj0*r01*r20*x2183))+((r10*r21*x2184))+((r11*r20*x2184))+(((-1.0)*r01*x2182))+((r00*x2182*x2183))+(((-1.0)*x2185))+((x2180*x2185))+(((-1.0)*cj0*r00*x2186))+((r01*x2180*x2182)));
j4eval[0]=x2187;
j4eval[1]=IKsign(x2187);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2188=cj5*cj5;
IkReal x2189=((1.0)*sj0);
IkReal x2190=(cj0*r00);
IkReal x2191=(r11*r21);
IkReal x2192=(cj5*r20);
IkReal x2193=(sj0*sj5);
IkReal x2194=(r21*sj5);
IkReal x2195=(cj0*r01);
IkReal x2196=((1.0)*r22);
IkReal x2197=(cj1*cj2*cj3);
IkReal x2198=(r20*x2188);
IkReal x2199=(cj2*sj1*sj3);
IkReal x2200=(cj1*sj2*sj3);
IkReal x2201=(cj3*sj1*sj2);
CheckValue<IkReal> x2202 = IKatan2WithCheck(IkReal(((((-1.0)*x2196*x2201))+(((-1.0)*x2196*x2200))+((r22*x2197))+(((-1.0)*x2196*x2199)))),IkReal(((((-1.0)*x2194*x2200))+((x2192*x2201))+((x2194*x2197))+(((-1.0)*x2194*x2199))+(((-1.0)*x2194*x2201))+(((-1.0)*x2192*x2197))+((x2192*x2200))+((x2192*x2199)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2202.valid){
continue;
}
CheckValue<IkReal> x2203=IKPowWithIntegerCheck(IKsign((((sj5*x2192*x2195))+((sj0*x2188*x2191))+((cj5*x2190*x2194))+(((-1.0)*cj0*r02*x2196))+((r11*x2192*x2193))+(((-1.0)*x2189*x2191))+((cj5*r10*r21*x2193))+(((-1.0)*r12*r22*x2189))+(((-1.0)*r21*x2195))+(((-1.0)*x2190*x2198))+((r21*x2188*x2195))+(((-1.0)*r10*x2189*x2198)))),-1);
if(!x2203.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2202.value)+(((1.5707963267949)*(x2203.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
tj4 = IKtan(j4);
{
IkReal evalcond[6];
IkReal x2204=IKsin(j4);
IkReal x2205=IKcos(j4);
IkReal x2206=(r11*sj5);
IkReal x2207=((1.0)*cj5);
IkReal x2208=(sj1*sj2);
IkReal x2209=(cj5*r20);
IkReal x2210=(cj1*cj3);
IkReal x2211=(cj5*r10);
IkReal x2212=((1.0)*cj3);
IkReal x2213=(r01*sj5);
IkReal x2214=((1.0)*r12);
IkReal x2215=(cj2*sj1);
IkReal x2216=((1.0)*r02);
IkReal x2217=(r21*sj5);
IkReal x2218=(sj0*x2204);
IkReal x2219=((1.0)*cj1*sj3);
IkReal x2220=(cj0*x2205);
IkReal x2221=(cj0*x2204);
IkReal x2222=(sj0*x2205);
IkReal x2223=((1.0)*x2204);
IkReal x2224=(cj0*r00*x2207);
evalcond[0]=(((x2204*x2209))+(((-1.0)*x2217*x2223))+((r22*x2205)));
evalcond[1]=((((-1.0)*x2205*x2217))+(((-1.0)*x2212*x2215))+(((-1.0)*cj2*x2219))+((sj3*x2208))+(((-1.0)*sj2*x2210))+((x2205*x2209))+(((-1.0)*r22*x2223)));
evalcond[2]=(((x2211*x2220))+((x2213*x2222))+(((-1.0)*x2214*x2221))+(((-1.0)*x2206*x2220))+(((-1.0)*r00*x2207*x2222))+((r02*x2218)));
evalcond[3]=((((-1.0)*r00*x2207*x2221))+(((-1.0)*x2214*x2222))+((x2206*x2218))+((x2213*x2221))+(((-1.0)*x2216*x2220))+(((-1.0)*r10*x2207*x2218)));
evalcond[4]=((1.0)+((r12*x2220))+((x2213*x2218))+(((-1.0)*x2206*x2221))+((x2211*x2221))+(((-1.0)*r00*x2207*x2218))+(((-1.0)*x2216*x2222)));
evalcond[5]=(((x2213*x2220))+((r02*x2221))+(((-1.0)*sj2*x2219))+((r12*x2218))+((x2206*x2222))+(((-1.0)*r00*x2207*x2220))+(((-1.0)*r10*x2207*x2222))+(((-1.0)*sj3*x2215))+((cj2*x2210))+(((-1.0)*x2208*x2212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2225=cj5*cj5;
IkReal x2226=r21*r21;
IkReal x2227=(r22*sj1);
IkReal x2228=(sj2*sj3);
IkReal x2229=(cj2*cj3);
IkReal x2230=(cj5*r20);
IkReal x2231=((1.0)*sj1);
IkReal x2232=(r21*sj5);
IkReal x2233=(cj1*cj3*sj2);
IkReal x2234=((1.0)*cj1*cj2*sj3);
CheckValue<IkReal> x2235 = IKatan2WithCheck(IkReal((((x2227*x2228))+(((-1.0)*x2227*x2229))+(((-1.0)*r22*x2234))+(((-1.0)*r22*x2233)))),IkReal((((sj1*x2228*x2232))+(((-1.0)*x2229*x2231*x2232))+(((-1.0)*x2228*x2230*x2231))+((cj1*cj2*sj3*x2230))+((sj1*x2229*x2230))+(((-1.0)*x2232*x2233))+(((-1.0)*x2232*x2234))+((x2230*x2233)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2235.valid){
continue;
}
CheckValue<IkReal> x2236=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2225*x2226))+(r22*r22)+((x2225*(r20*r20)))+x2226+(((-2.0)*x2230*x2232)))),-1);
if(!x2236.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2235.value)+(((1.5707963267949)*(x2236.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
tj4 = IKtan(j4);
{
IkReal evalcond[6];
IkReal x2237=IKsin(j4);
IkReal x2238=IKcos(j4);
IkReal x2239=(r11*sj5);
IkReal x2240=((1.0)*cj5);
IkReal x2241=(sj1*sj2);
IkReal x2242=(cj5*r20);
IkReal x2243=(cj1*cj3);
IkReal x2244=(cj5*r10);
IkReal x2245=((1.0)*cj3);
IkReal x2246=(r01*sj5);
IkReal x2247=((1.0)*r12);
IkReal x2248=(cj2*sj1);
IkReal x2249=((1.0)*r02);
IkReal x2250=(r21*sj5);
IkReal x2251=(sj0*x2237);
IkReal x2252=((1.0)*cj1*sj3);
IkReal x2253=(cj0*x2238);
IkReal x2254=(cj0*x2237);
IkReal x2255=(sj0*x2238);
IkReal x2256=((1.0)*x2237);
IkReal x2257=(cj0*r00*x2240);
evalcond[0]=((((-1.0)*x2250*x2256))+((x2237*x2242))+((r22*x2238)));
evalcond[1]=(((x2238*x2242))+(((-1.0)*sj2*x2243))+(((-1.0)*x2245*x2248))+(((-1.0)*x2238*x2250))+(((-1.0)*cj2*x2252))+((sj3*x2241))+(((-1.0)*r22*x2256)));
evalcond[2]=(((r02*x2251))+(((-1.0)*x2247*x2254))+(((-1.0)*r00*x2240*x2255))+((x2246*x2255))+(((-1.0)*x2239*x2253))+((x2244*x2253)));
evalcond[3]=((((-1.0)*x2247*x2255))+((x2246*x2254))+(((-1.0)*x2249*x2253))+((x2239*x2251))+(((-1.0)*r10*x2240*x2251))+(((-1.0)*r00*x2240*x2254)));
evalcond[4]=((1.0)+(((-1.0)*x2249*x2255))+((x2244*x2254))+((r12*x2253))+(((-1.0)*r00*x2240*x2251))+(((-1.0)*x2239*x2254))+((x2246*x2251)));
evalcond[5]=((((-1.0)*r00*x2240*x2253))+((r02*x2254))+(((-1.0)*sj3*x2248))+(((-1.0)*r10*x2240*x2255))+((x2239*x2255))+((r12*x2251))+((cj2*x2243))+((x2246*x2253))+(((-1.0)*sj2*x2252))+(((-1.0)*x2241*x2245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2258 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj5*r20))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2258.valid){
continue;
}
CheckValue<IkReal> x2259=IKPowWithIntegerCheck(IKsign((((cj5*r11*sj0))+((r10*sj0*sj5))+((cj0*r00*sj5))+((cj0*cj5*r01)))),-1);
if(!x2259.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2258.value)+(((1.5707963267949)*(x2259.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
tj4 = IKtan(j4);
{
IkReal evalcond[6];
IkReal x2260=IKsin(j4);
IkReal x2261=IKcos(j4);
IkReal x2262=(r11*sj5);
IkReal x2263=((1.0)*cj5);
IkReal x2264=(sj1*sj2);
IkReal x2265=(cj5*r20);
IkReal x2266=(cj1*cj3);
IkReal x2267=(cj5*r10);
IkReal x2268=((1.0)*cj3);
IkReal x2269=(r01*sj5);
IkReal x2270=((1.0)*r12);
IkReal x2271=(cj2*sj1);
IkReal x2272=((1.0)*r02);
IkReal x2273=(r21*sj5);
IkReal x2274=(sj0*x2260);
IkReal x2275=((1.0)*cj1*sj3);
IkReal x2276=(cj0*x2261);
IkReal x2277=(cj0*x2260);
IkReal x2278=(sj0*x2261);
IkReal x2279=((1.0)*x2260);
IkReal x2280=(cj0*r00*x2263);
evalcond[0]=(((r22*x2261))+((x2260*x2265))+(((-1.0)*x2273*x2279)));
evalcond[1]=((((-1.0)*cj2*x2275))+(((-1.0)*x2261*x2273))+(((-1.0)*sj2*x2266))+(((-1.0)*x2268*x2271))+((x2261*x2265))+((sj3*x2264))+(((-1.0)*r22*x2279)));
evalcond[2]=(((r02*x2274))+((x2269*x2278))+(((-1.0)*x2262*x2276))+((x2267*x2276))+(((-1.0)*r00*x2263*x2278))+(((-1.0)*x2270*x2277)));
evalcond[3]=((((-1.0)*x2270*x2278))+(((-1.0)*r10*x2263*x2274))+((x2262*x2274))+(((-1.0)*r00*x2263*x2277))+(((-1.0)*x2272*x2276))+((x2269*x2277)));
evalcond[4]=((1.0)+((x2269*x2274))+(((-1.0)*x2262*x2277))+((r12*x2276))+((x2267*x2277))+(((-1.0)*x2272*x2278))+(((-1.0)*r00*x2263*x2274)));
evalcond[5]=((((-1.0)*sj3*x2271))+((r12*x2274))+(((-1.0)*r00*x2263*x2276))+((x2269*x2276))+((r02*x2277))+(((-1.0)*x2264*x2268))+((x2262*x2278))+((cj2*x2266))+(((-1.0)*r10*x2263*x2278))+(((-1.0)*sj2*x2275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}

}

}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - UR5 (01a609c886485171e1ee870f6e25c836)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004c"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
